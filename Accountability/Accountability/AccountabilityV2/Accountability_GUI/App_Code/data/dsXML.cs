//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace TSN.ERP.WebGUI.Data {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsXML : DataSet {
        
        private RETURNDATADataTable tableRETURNDATA;
        
        private DATADataTable tableDATA;
        
        private ITEM_DATADataTable tableITEM_DATA;
        
        private DataRelation relationDATA_ITEM_DATA;
        
        private DataRelation relationRETURNDATA_DATA;
        
        public dsXML() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsXML(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["RETURNDATA"] != null)) {
                    this.Tables.Add(new RETURNDATADataTable(ds.Tables["RETURNDATA"]));
                }
                if ((ds.Tables["DATA"] != null)) {
                    this.Tables.Add(new DATADataTable(ds.Tables["DATA"]));
                }
                if ((ds.Tables["ITEM_DATA"] != null)) {
                    this.Tables.Add(new ITEM_DATADataTable(ds.Tables["ITEM_DATA"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RETURNDATADataTable RETURNDATA {
            get {
                return this.tableRETURNDATA;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DATADataTable DATA {
            get {
                return this.tableDATA;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ITEM_DATADataTable ITEM_DATA {
            get {
                return this.tableITEM_DATA;
            }
        }
        
        public override DataSet Clone() {
            dsXML cln = ((dsXML)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["RETURNDATA"] != null)) {
                this.Tables.Add(new RETURNDATADataTable(ds.Tables["RETURNDATA"]));
            }
            if ((ds.Tables["DATA"] != null)) {
                this.Tables.Add(new DATADataTable(ds.Tables["DATA"]));
            }
            if ((ds.Tables["ITEM_DATA"] != null)) {
                this.Tables.Add(new ITEM_DATADataTable(ds.Tables["ITEM_DATA"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        public void InitVars() {
            this.tableRETURNDATA = ((RETURNDATADataTable)(this.Tables["RETURNDATA"]));
            if ((this.tableRETURNDATA != null)) {
                this.tableRETURNDATA.InitVars();
            }
            this.tableDATA = ((DATADataTable)(this.Tables["DATA"]));
            if ((this.tableDATA != null)) {
                this.tableDATA.InitVars();
            }
            this.tableITEM_DATA = ((ITEM_DATADataTable)(this.Tables["ITEM_DATA"]));
            if ((this.tableITEM_DATA != null)) {
                this.tableITEM_DATA.InitVars();
            }
            this.relationDATA_ITEM_DATA = this.Relations["DATA_ITEM_DATA"];
            this.relationRETURNDATA_DATA = this.Relations["RETURNDATA_DATA"];
        }
        
        private void InitClass() {
            this.DataSetName = "dsXML";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/001-002-003.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = false;
            this.tableRETURNDATA = new RETURNDATADataTable();
            this.Tables.Add(this.tableRETURNDATA);
            this.tableDATA = new DATADataTable();
            this.Tables.Add(this.tableDATA);
            this.tableITEM_DATA = new ITEM_DATADataTable();
            this.Tables.Add(this.tableITEM_DATA);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("RETURNDATA_DATA", new DataColumn[] {
                        this.tableRETURNDATA.RETURNDATA_IdColumn}, new DataColumn[] {
                        this.tableDATA.RETURNDATA_IdColumn});
            this.tableDATA.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("DATA_ITEM_DATA", new DataColumn[] {
                        this.tableDATA.DATA_IdColumn}, new DataColumn[] {
                        this.tableITEM_DATA.DATA_IdColumn});
            this.tableITEM_DATA.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationDATA_ITEM_DATA = new DataRelation("DATA_ITEM_DATA", new DataColumn[] {
                        this.tableDATA.DATA_IdColumn}, new DataColumn[] {
                        this.tableITEM_DATA.DATA_IdColumn}, false);
            this.relationDATA_ITEM_DATA.Nested = true;
            this.Relations.Add(this.relationDATA_ITEM_DATA);
            this.relationRETURNDATA_DATA = new DataRelation("RETURNDATA_DATA", new DataColumn[] {
                        this.tableRETURNDATA.RETURNDATA_IdColumn}, new DataColumn[] {
                        this.tableDATA.RETURNDATA_IdColumn}, false);
            this.relationRETURNDATA_DATA.Nested = true;
            this.Relations.Add(this.relationRETURNDATA_DATA);
        }
        
        private bool ShouldSerializeRETURNDATA() {
            return false;
        }
        
        private bool ShouldSerializeDATA() {
            return false;
        }
        
        private bool ShouldSerializeITEM_DATA() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void RETURNDATARowChangeEventHandler(object sender, RETURNDATARowChangeEvent e);
        
        public delegate void DATARowChangeEventHandler(object sender, DATARowChangeEvent e);
        
        public delegate void ITEM_DATARowChangeEventHandler(object sender, ITEM_DATARowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class RETURNDATADataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnOVERVIEW_CONTENT;
            
            private DataColumn columnRETURNDATA_Id;
            
            public RETURNDATADataTable() : 
                    base("RETURNDATA") {
                this.InitClass();
            }
            
            public RETURNDATADataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public DataColumn OVERVIEW_CONTENTColumn {
                get {
                    return this.columnOVERVIEW_CONTENT;
                }
            }
            
            public DataColumn RETURNDATA_IdColumn {
                get {
                    return this.columnRETURNDATA_Id;
                }
            }
            
            public RETURNDATARow this[int index] {
                get {
                    return ((RETURNDATARow)(this.Rows[index]));
                }
            }
            
            public event RETURNDATARowChangeEventHandler RETURNDATARowChanged;
            
            public event RETURNDATARowChangeEventHandler RETURNDATARowChanging;
            
            public event RETURNDATARowChangeEventHandler RETURNDATARowDeleted;
            
            public event RETURNDATARowChangeEventHandler RETURNDATARowDeleting;
            
            public void AddRETURNDATARow(RETURNDATARow row) {
                this.Rows.Add(row);
            }
            
            public RETURNDATARow AddRETURNDATARow(string OVERVIEW_CONTENT) {
                RETURNDATARow rowRETURNDATARow = ((RETURNDATARow)(this.NewRow()));
                rowRETURNDATARow.ItemArray = new object[] {
                        OVERVIEW_CONTENT,
                        null};
                this.Rows.Add(rowRETURNDATARow);
                return rowRETURNDATARow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                RETURNDATADataTable cln = ((RETURNDATADataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new RETURNDATADataTable();
            }
            
            public void InitVars() {
                this.columnOVERVIEW_CONTENT = this.Columns["OVERVIEW_CONTENT"];
                this.columnRETURNDATA_Id = this.Columns["RETURNDATA_Id"];
            }
            
            private void InitClass() {
                this.columnOVERVIEW_CONTENT = new DataColumn("OVERVIEW_CONTENT", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOVERVIEW_CONTENT);
                this.columnRETURNDATA_Id = new DataColumn("RETURNDATA_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnRETURNDATA_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnRETURNDATA_Id}, true));
                this.columnRETURNDATA_Id.AutoIncrement = true;
                this.columnRETURNDATA_Id.AllowDBNull = false;
                this.columnRETURNDATA_Id.Unique = true;
            }
            
            public RETURNDATARow NewRETURNDATARow() {
                return ((RETURNDATARow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new RETURNDATARow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(RETURNDATARow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RETURNDATARowChanged != null)) {
                    this.RETURNDATARowChanged(this, new RETURNDATARowChangeEvent(((RETURNDATARow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RETURNDATARowChanging != null)) {
                    this.RETURNDATARowChanging(this, new RETURNDATARowChangeEvent(((RETURNDATARow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RETURNDATARowDeleted != null)) {
                    this.RETURNDATARowDeleted(this, new RETURNDATARowChangeEvent(((RETURNDATARow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RETURNDATARowDeleting != null)) {
                    this.RETURNDATARowDeleting(this, new RETURNDATARowChangeEvent(((RETURNDATARow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveRETURNDATARow(RETURNDATARow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class RETURNDATARow : DataRow {
            
            private RETURNDATADataTable tableRETURNDATA;
            
            public RETURNDATARow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableRETURNDATA = ((RETURNDATADataTable)(this.Table));
            }
            
            public string OVERVIEW_CONTENT {
                get {
                    try {
                        return ((string)(this[this.tableRETURNDATA.OVERVIEW_CONTENTColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRETURNDATA.OVERVIEW_CONTENTColumn] = value;
                }
            }
            
            public bool IsOVERVIEW_CONTENTNull() {
                return this.IsNull(this.tableRETURNDATA.OVERVIEW_CONTENTColumn);
            }
            
            public void SetOVERVIEW_CONTENTNull() {
                this[this.tableRETURNDATA.OVERVIEW_CONTENTColumn] = System.Convert.DBNull;
            }
            
            public DATARow[] GetDATARows() {
                return ((DATARow[])(this.GetChildRows(this.Table.ChildRelations["RETURNDATA_DATA"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class RETURNDATARowChangeEvent : EventArgs {
            
            private RETURNDATARow eventRow;
            
            private DataRowAction eventAction;
            
            public RETURNDATARowChangeEvent(RETURNDATARow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public RETURNDATARow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DATADataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnMODULEID;
            
            private DataColumn columnLINKID;
            
            private DataColumn columnFUNCTIONALITYID;
            
            private DataColumn columnDATA_Id;
            
            private DataColumn columnRETURNDATA_Id;
            
            public DATADataTable() : 
                    base("DATA") {
                this.InitClass();
            }
            
            public DATADataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public DataColumn MODULEIDColumn {
                get {
                    return this.columnMODULEID;
                }
            }
            
            public DataColumn LINKIDColumn {
                get {
                    return this.columnLINKID;
                }
            }
            
            public DataColumn FUNCTIONALITYIDColumn {
                get {
                    return this.columnFUNCTIONALITYID;
                }
            }
            
            public DataColumn DATA_IdColumn {
                get {
                    return this.columnDATA_Id;
                }
            }
            
            public DataColumn RETURNDATA_IdColumn {
                get {
                    return this.columnRETURNDATA_Id;
                }
            }
            
            public DATARow this[int index] {
                get {
                    return ((DATARow)(this.Rows[index]));
                }
            }
            
            public event DATARowChangeEventHandler DATARowChanged;
            
            public event DATARowChangeEventHandler DATARowChanging;
            
            public event DATARowChangeEventHandler DATARowDeleted;
            
            public event DATARowChangeEventHandler DATARowDeleting;
            
            public void AddDATARow(DATARow row) {
                this.Rows.Add(row);
            }
            
            public DATARow AddDATARow(string MODULEID, string LINKID, string FUNCTIONALITYID, RETURNDATARow parentRETURNDATARowByRETURNDATA_DATA) {
                DATARow rowDATARow = ((DATARow)(this.NewRow()));
                rowDATARow.ItemArray = new object[] {
                        MODULEID,
                        LINKID,
                        FUNCTIONALITYID,
                        null,
                        parentRETURNDATARowByRETURNDATA_DATA[1]};
                this.Rows.Add(rowDATARow);
                return rowDATARow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                DATADataTable cln = ((DATADataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new DATADataTable();
            }
            
            public void InitVars() {
                this.columnMODULEID = this.Columns["MODULEID"];
                this.columnLINKID = this.Columns["LINKID"];
                this.columnFUNCTIONALITYID = this.Columns["FUNCTIONALITYID"];
                this.columnDATA_Id = this.Columns["DATA_Id"];
                this.columnRETURNDATA_Id = this.Columns["RETURNDATA_Id"];
            }
            
            private void InitClass() {
                this.columnMODULEID = new DataColumn("MODULEID", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnMODULEID);
                this.columnLINKID = new DataColumn("LINKID", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnLINKID);
                this.columnFUNCTIONALITYID = new DataColumn("FUNCTIONALITYID", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnFUNCTIONALITYID);
                this.columnDATA_Id = new DataColumn("DATA_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnDATA_Id);
                this.columnRETURNDATA_Id = new DataColumn("RETURNDATA_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnRETURNDATA_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnDATA_Id}, true));
                this.columnMODULEID.Namespace = "";
                this.columnLINKID.Namespace = "";
                this.columnFUNCTIONALITYID.Namespace = "";
                this.columnDATA_Id.AutoIncrement = true;
                this.columnDATA_Id.AllowDBNull = false;
                this.columnDATA_Id.Unique = true;
            }
            
            public DATARow NewDATARow() {
                return ((DATARow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new DATARow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(DATARow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DATARowChanged != null)) {
                    this.DATARowChanged(this, new DATARowChangeEvent(((DATARow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DATARowChanging != null)) {
                    this.DATARowChanging(this, new DATARowChangeEvent(((DATARow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DATARowDeleted != null)) {
                    this.DATARowDeleted(this, new DATARowChangeEvent(((DATARow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DATARowDeleting != null)) {
                    this.DATARowDeleting(this, new DATARowChangeEvent(((DATARow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveDATARow(DATARow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DATARow : DataRow {
            
            private DATADataTable tableDATA;
            
            public DATARow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableDATA = ((DATADataTable)(this.Table));
            }
            
            public string MODULEID {
                get {
                    try {
                        return ((string)(this[this.tableDATA.MODULEIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDATA.MODULEIDColumn] = value;
                }
            }
            
            public string LINKID {
                get {
                    try {
                        return ((string)(this[this.tableDATA.LINKIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDATA.LINKIDColumn] = value;
                }
            }
            
            public string FUNCTIONALITYID {
                get {
                    try {
                        return ((string)(this[this.tableDATA.FUNCTIONALITYIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDATA.FUNCTIONALITYIDColumn] = value;
                }
            }
            
            public RETURNDATARow RETURNDATARow {
                get {
                    return ((RETURNDATARow)(this.GetParentRow(this.Table.ParentRelations["RETURNDATA_DATA"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["RETURNDATA_DATA"]);
                }
            }
            
            public bool IsMODULEIDNull() {
                return this.IsNull(this.tableDATA.MODULEIDColumn);
            }
            
            public void SetMODULEIDNull() {
                this[this.tableDATA.MODULEIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsLINKIDNull() {
                return this.IsNull(this.tableDATA.LINKIDColumn);
            }
            
            public void SetLINKIDNull() {
                this[this.tableDATA.LINKIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsFUNCTIONALITYIDNull() {
                return this.IsNull(this.tableDATA.FUNCTIONALITYIDColumn);
            }
            
            public void SetFUNCTIONALITYIDNull() {
                this[this.tableDATA.FUNCTIONALITYIDColumn] = System.Convert.DBNull;
            }
            
            public ITEM_DATARow[] GetITEM_DATARows() {
                return ((ITEM_DATARow[])(this.GetChildRows(this.Table.ChildRelations["DATA_ITEM_DATA"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DATARowChangeEvent : EventArgs {
            
            private DATARow eventRow;
            
            private DataRowAction eventAction;
            
            public DATARowChangeEvent(DATARow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public DATARow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ITEM_DATADataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnITEMID;
            
            private DataColumn columnITEMPARENT;
            
            private DataColumn columnITEM_NAME;
            
            private DataColumn columnITEM_DESCRIPTION;
            
            private DataColumn columnIMAGENAME;
            
            private DataColumn columnDATA_Id;
            
            public ITEM_DATADataTable() : 
                    base("ITEM_DATA") {
                this.InitClass();
            }
            
            public ITEM_DATADataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public DataColumn ITEMIDColumn {
                get {
                    return this.columnITEMID;
                }
            }
            
            public DataColumn ITEMPARENTColumn {
                get {
                    return this.columnITEMPARENT;
                }
            }
            
            public DataColumn ITEM_NAMEColumn {
                get {
                    return this.columnITEM_NAME;
                }
            }
            
            public DataColumn ITEM_DESCRIPTIONColumn {
                get {
                    return this.columnITEM_DESCRIPTION;
                }
            }
            
            public DataColumn IMAGENAMEColumn {
                get {
                    return this.columnIMAGENAME;
                }
            }
            
            public DataColumn DATA_IdColumn {
                get {
                    return this.columnDATA_Id;
                }
            }
            
            public ITEM_DATARow this[int index] {
                get {
                    return ((ITEM_DATARow)(this.Rows[index]));
                }
            }
            
            public event ITEM_DATARowChangeEventHandler ITEM_DATARowChanged;
            
            public event ITEM_DATARowChangeEventHandler ITEM_DATARowChanging;
            
            public event ITEM_DATARowChangeEventHandler ITEM_DATARowDeleted;
            
            public event ITEM_DATARowChangeEventHandler ITEM_DATARowDeleting;
            
            public void AddITEM_DATARow(ITEM_DATARow row) {
                this.Rows.Add(row);
            }
            
            public ITEM_DATARow AddITEM_DATARow(string ITEMID, string ITEMPARENT, string ITEM_NAME, string ITEM_DESCRIPTION, string IMAGENAME, DATARow parentDATARowByDATA_ITEM_DATA) {
                ITEM_DATARow rowITEM_DATARow = ((ITEM_DATARow)(this.NewRow()));
                rowITEM_DATARow.ItemArray = new object[] {
                        ITEMID,
                        ITEMPARENT,
                        ITEM_NAME,
                        ITEM_DESCRIPTION,
                        IMAGENAME,
                        parentDATARowByDATA_ITEM_DATA[3]};
                this.Rows.Add(rowITEM_DATARow);
                return rowITEM_DATARow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ITEM_DATADataTable cln = ((ITEM_DATADataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ITEM_DATADataTable();
            }
            
            public void InitVars() {
                this.columnITEMID = this.Columns["ITEMID"];
                this.columnITEMPARENT = this.Columns["ITEMPARENT"];
                this.columnITEM_NAME = this.Columns["ITEM_NAME"];
                this.columnITEM_DESCRIPTION = this.Columns["ITEM_DESCRIPTION"];
                this.columnIMAGENAME = this.Columns["IMAGENAME"];
                this.columnDATA_Id = this.Columns["DATA_Id"];
            }
            
            private void InitClass() {
                this.columnITEMID = new DataColumn("ITEMID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnITEMID);
                this.columnITEMPARENT = new DataColumn("ITEMPARENT", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnITEMPARENT);
                this.columnITEM_NAME = new DataColumn("ITEM_NAME", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnITEM_NAME);
                this.columnITEM_DESCRIPTION = new DataColumn("ITEM_DESCRIPTION", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnITEM_DESCRIPTION);
                this.columnIMAGENAME = new DataColumn("IMAGENAME", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIMAGENAME);
                this.columnDATA_Id = new DataColumn("DATA_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnDATA_Id);
            }
            
            public ITEM_DATARow NewITEM_DATARow() {
                return ((ITEM_DATARow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ITEM_DATARow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ITEM_DATARow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ITEM_DATARowChanged != null)) {
                    this.ITEM_DATARowChanged(this, new ITEM_DATARowChangeEvent(((ITEM_DATARow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ITEM_DATARowChanging != null)) {
                    this.ITEM_DATARowChanging(this, new ITEM_DATARowChangeEvent(((ITEM_DATARow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ITEM_DATARowDeleted != null)) {
                    this.ITEM_DATARowDeleted(this, new ITEM_DATARowChangeEvent(((ITEM_DATARow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ITEM_DATARowDeleting != null)) {
                    this.ITEM_DATARowDeleting(this, new ITEM_DATARowChangeEvent(((ITEM_DATARow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveITEM_DATARow(ITEM_DATARow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ITEM_DATARow : DataRow {
            
            private ITEM_DATADataTable tableITEM_DATA;
            
            public ITEM_DATARow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableITEM_DATA = ((ITEM_DATADataTable)(this.Table));
            }
            
            public string ITEMID {
                get {
                    try {
                        return ((string)(this[this.tableITEM_DATA.ITEMIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableITEM_DATA.ITEMIDColumn] = value;
                }
            }
            
            public string ITEMPARENT {
                get {
                    try {
                        return ((string)(this[this.tableITEM_DATA.ITEMPARENTColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableITEM_DATA.ITEMPARENTColumn] = value;
                }
            }
            
            public string ITEM_NAME {
                get {
                    try {
                        return ((string)(this[this.tableITEM_DATA.ITEM_NAMEColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableITEM_DATA.ITEM_NAMEColumn] = value;
                }
            }
            
            public string ITEM_DESCRIPTION {
                get {
                    try {
                        return ((string)(this[this.tableITEM_DATA.ITEM_DESCRIPTIONColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableITEM_DATA.ITEM_DESCRIPTIONColumn] = value;
                }
            }
            
            public string IMAGENAME {
                get {
                    try {
                        return ((string)(this[this.tableITEM_DATA.IMAGENAMEColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableITEM_DATA.IMAGENAMEColumn] = value;
                }
            }
            
            public DATARow DATARow {
                get {
                    return ((DATARow)(this.GetParentRow(this.Table.ParentRelations["DATA_ITEM_DATA"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["DATA_ITEM_DATA"]);
                }
            }
            
            public bool IsITEMIDNull() {
                return this.IsNull(this.tableITEM_DATA.ITEMIDColumn);
            }
            
            public void SetITEMIDNull() {
                this[this.tableITEM_DATA.ITEMIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsITEMPARENTNull() {
                return this.IsNull(this.tableITEM_DATA.ITEMPARENTColumn);
            }
            
            public void SetITEMPARENTNull() {
                this[this.tableITEM_DATA.ITEMPARENTColumn] = System.Convert.DBNull;
            }
            
            public bool IsITEM_NAMENull() {
                return this.IsNull(this.tableITEM_DATA.ITEM_NAMEColumn);
            }
            
            public void SetITEM_NAMENull() {
                this[this.tableITEM_DATA.ITEM_NAMEColumn] = System.Convert.DBNull;
            }
            
            public bool IsITEM_DESCRIPTIONNull() {
                return this.IsNull(this.tableITEM_DATA.ITEM_DESCRIPTIONColumn);
            }
            
            public void SetITEM_DESCRIPTIONNull() {
                this[this.tableITEM_DATA.ITEM_DESCRIPTIONColumn] = System.Convert.DBNull;
            }
            
            public bool IsIMAGENAMENull() {
                return this.IsNull(this.tableITEM_DATA.IMAGENAMEColumn);
            }
            
            public void SetIMAGENAMENull() {
                this[this.tableITEM_DATA.IMAGENAMEColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ITEM_DATARowChangeEvent : EventArgs {
            
            private ITEM_DATARow eventRow;
            
            private DataRowAction eventAction;
            
            public ITEM_DATARowChangeEvent(ITEM_DATARow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ITEM_DATARow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
