//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace TSN.ERP.Security.Data {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class DataSetEntities : DataSet {
        
        private SEC_EntitiesDataTable tableSEC_Entities;
        
        public DataSetEntities() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected DataSetEntities(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["SEC_Entities"] != null)) {
                    this.Tables.Add(new SEC_EntitiesDataTable(ds.Tables["SEC_Entities"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SEC_EntitiesDataTable SEC_Entities {
            get {
                return this.tableSEC_Entities;
            }
        }
        
        public override DataSet Clone() {
            DataSetEntities cln = ((DataSetEntities)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["SEC_Entities"] != null)) {
                this.Tables.Add(new SEC_EntitiesDataTable(ds.Tables["SEC_Entities"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        public void InitVars() {
            this.tableSEC_Entities = ((SEC_EntitiesDataTable)(this.Tables["SEC_Entities"]));
            if ((this.tableSEC_Entities != null)) {
                this.tableSEC_Entities.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "DataSetEntities";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/DataSetEntities.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableSEC_Entities = new SEC_EntitiesDataTable();
            this.Tables.Add(this.tableSEC_Entities);
        }
        
        private bool ShouldSerializeSEC_Entities() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void SEC_EntitiesRowChangeEventHandler(object sender, SEC_EntitiesRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SEC_EntitiesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnEntityID;
            
            private DataColumn columnEntityName;
            
            private DataColumn columncTableName;
            
            private DataColumn columncKeyName;
            
            private DataColumn columncDescription;
            
            private DataColumn columncManagerColoum;
            
            private DataColumn columncAutoAssginUsers;
            
            public SEC_EntitiesDataTable() : 
                    base("SEC_Entities") {
                this.InitClass();
            }
            
            public SEC_EntitiesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public DataColumn EntityIDColumn {
                get {
                    return this.columnEntityID;
                }
            }
            
            public DataColumn EntityNameColumn {
                get {
                    return this.columnEntityName;
                }
            }
            
            public DataColumn cTableNameColumn {
                get {
                    return this.columncTableName;
                }
            }
            
            public DataColumn cKeyNameColumn {
                get {
                    return this.columncKeyName;
                }
            }
            
            public DataColumn cDescriptionColumn {
                get {
                    return this.columncDescription;
                }
            }
            
            public DataColumn cManagerColoumColumn {
                get {
                    return this.columncManagerColoum;
                }
            }
            
            public DataColumn cAutoAssginUsersColumn {
                get {
                    return this.columncAutoAssginUsers;
                }
            }
            
            public SEC_EntitiesRow this[int index] {
                get {
                    return ((SEC_EntitiesRow)(this.Rows[index]));
                }
            }
            
            public event SEC_EntitiesRowChangeEventHandler SEC_EntitiesRowChanged;
            
            public event SEC_EntitiesRowChangeEventHandler SEC_EntitiesRowChanging;
            
            public event SEC_EntitiesRowChangeEventHandler SEC_EntitiesRowDeleted;
            
            public event SEC_EntitiesRowChangeEventHandler SEC_EntitiesRowDeleting;
            
            public void AddSEC_EntitiesRow(SEC_EntitiesRow row) {
                this.Rows.Add(row);
            }
            
            public SEC_EntitiesRow AddSEC_EntitiesRow(int EntityID, string EntityName, string cTableName, string cKeyName, string cDescription, string cManagerColoum, bool cAutoAssginUsers) {
                SEC_EntitiesRow rowSEC_EntitiesRow = ((SEC_EntitiesRow)(this.NewRow()));
                rowSEC_EntitiesRow.ItemArray = new object[] {
                        EntityID,
                        EntityName,
                        cTableName,
                        cKeyName,
                        cDescription,
                        cManagerColoum,
                        cAutoAssginUsers};
                this.Rows.Add(rowSEC_EntitiesRow);
                return rowSEC_EntitiesRow;
            }
            
            public SEC_EntitiesRow FindByEntityID(int EntityID) {
                return ((SEC_EntitiesRow)(this.Rows.Find(new object[] {
                            EntityID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                SEC_EntitiesDataTable cln = ((SEC_EntitiesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new SEC_EntitiesDataTable();
            }
            
            public void InitVars() {
                this.columnEntityID = this.Columns["EntityID"];
                this.columnEntityName = this.Columns["EntityName"];
                this.columncTableName = this.Columns["cTableName"];
                this.columncKeyName = this.Columns["cKeyName"];
                this.columncDescription = this.Columns["cDescription"];
                this.columncManagerColoum = this.Columns["cManagerColoum"];
                this.columncAutoAssginUsers = this.Columns["cAutoAssginUsers"];
            }
            
            private void InitClass() {
                this.columnEntityID = new DataColumn("EntityID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEntityID);
                this.columnEntityName = new DataColumn("EntityName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEntityName);
                this.columncTableName = new DataColumn("cTableName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncTableName);
                this.columncKeyName = new DataColumn("cKeyName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncKeyName);
                this.columncDescription = new DataColumn("cDescription", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncDescription);
                this.columncManagerColoum = new DataColumn("cManagerColoum", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncManagerColoum);
                this.columncAutoAssginUsers = new DataColumn("cAutoAssginUsers", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncAutoAssginUsers);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnEntityID}, true));
                this.columnEntityID.AllowDBNull = false;
                this.columnEntityID.Unique = true;
                this.columnEntityName.AllowDBNull = false;
                this.columncTableName.AllowDBNull = false;
            }
            
            public SEC_EntitiesRow NewSEC_EntitiesRow() {
                return ((SEC_EntitiesRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new SEC_EntitiesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(SEC_EntitiesRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SEC_EntitiesRowChanged != null)) {
                    this.SEC_EntitiesRowChanged(this, new SEC_EntitiesRowChangeEvent(((SEC_EntitiesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SEC_EntitiesRowChanging != null)) {
                    this.SEC_EntitiesRowChanging(this, new SEC_EntitiesRowChangeEvent(((SEC_EntitiesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SEC_EntitiesRowDeleted != null)) {
                    this.SEC_EntitiesRowDeleted(this, new SEC_EntitiesRowChangeEvent(((SEC_EntitiesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SEC_EntitiesRowDeleting != null)) {
                    this.SEC_EntitiesRowDeleting(this, new SEC_EntitiesRowChangeEvent(((SEC_EntitiesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveSEC_EntitiesRow(SEC_EntitiesRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SEC_EntitiesRow : DataRow {
            
            private SEC_EntitiesDataTable tableSEC_Entities;
            
            public SEC_EntitiesRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableSEC_Entities = ((SEC_EntitiesDataTable)(this.Table));
            }
            
            public int EntityID {
                get {
                    return ((int)(this[this.tableSEC_Entities.EntityIDColumn]));
                }
                set {
                    this[this.tableSEC_Entities.EntityIDColumn] = value;
                }
            }
            
            public string EntityName {
                get {
                    return ((string)(this[this.tableSEC_Entities.EntityNameColumn]));
                }
                set {
                    this[this.tableSEC_Entities.EntityNameColumn] = value;
                }
            }
            
            public string cTableName {
                get {
                    return ((string)(this[this.tableSEC_Entities.cTableNameColumn]));
                }
                set {
                    this[this.tableSEC_Entities.cTableNameColumn] = value;
                }
            }
            
            public string cKeyName {
                get {
                    try {
                        return ((string)(this[this.tableSEC_Entities.cKeyNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSEC_Entities.cKeyNameColumn] = value;
                }
            }
            
            public string cDescription {
                get {
                    try {
                        return ((string)(this[this.tableSEC_Entities.cDescriptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSEC_Entities.cDescriptionColumn] = value;
                }
            }
            
            public string cManagerColoum {
                get {
                    try {
                        return ((string)(this[this.tableSEC_Entities.cManagerColoumColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSEC_Entities.cManagerColoumColumn] = value;
                }
            }
            
            public bool cAutoAssginUsers {
                get {
                    try {
                        return ((bool)(this[this.tableSEC_Entities.cAutoAssginUsersColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSEC_Entities.cAutoAssginUsersColumn] = value;
                }
            }
            
            public bool IscKeyNameNull() {
                return this.IsNull(this.tableSEC_Entities.cKeyNameColumn);
            }
            
            public void SetcKeyNameNull() {
                this[this.tableSEC_Entities.cKeyNameColumn] = System.Convert.DBNull;
            }
            
            public bool IscDescriptionNull() {
                return this.IsNull(this.tableSEC_Entities.cDescriptionColumn);
            }
            
            public void SetcDescriptionNull() {
                this[this.tableSEC_Entities.cDescriptionColumn] = System.Convert.DBNull;
            }
            
            public bool IscManagerColoumNull() {
                return this.IsNull(this.tableSEC_Entities.cManagerColoumColumn);
            }
            
            public void SetcManagerColoumNull() {
                this[this.tableSEC_Entities.cManagerColoumColumn] = System.Convert.DBNull;
            }
            
            public bool IscAutoAssginUsersNull() {
                return this.IsNull(this.tableSEC_Entities.cAutoAssginUsersColumn);
            }
            
            public void SetcAutoAssginUsersNull() {
                this[this.tableSEC_Entities.cAutoAssginUsersColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SEC_EntitiesRowChangeEvent : EventArgs {
            
            private SEC_EntitiesRow eventRow;
            
            private DataRowAction eventAction;
            
            public SEC_EntitiesRowChangeEvent(SEC_EntitiesRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public SEC_EntitiesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
