//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TSN.ERP.Reporting.Data {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("dsRepParms")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class dsRepParms : System.Data.DataSet {
        
        private REP_CallParmsDataTable tableREP_CallParms;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public dsRepParms() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected dsRepParms(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["REP_CallParms"] != null)) {
                    base.Tables.Add(new REP_CallParmsDataTable(ds.Tables["REP_CallParms"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public REP_CallParmsDataTable REP_CallParms {
            get {
                return this.tableREP_CallParms;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            dsRepParms cln = ((dsRepParms)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["REP_CallParms"] != null)) {
                    base.Tables.Add(new REP_CallParmsDataTable(ds.Tables["REP_CallParms"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableREP_CallParms = ((REP_CallParmsDataTable)(base.Tables["REP_CallParms"]));
            if ((initTable == true)) {
                if ((this.tableREP_CallParms != null)) {
                    this.tableREP_CallParms.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "dsRepParms";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/dsRepParms.xsd";
            this.Locale = new System.Globalization.CultureInfo("ar-EG");
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableREP_CallParms = new REP_CallParmsDataTable();
            base.Tables.Add(this.tableREP_CallParms);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeREP_CallParms() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            dsRepParms ds = new dsRepParms();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void REP_CallParmsRowChangeEventHandler(object sender, REP_CallParmsRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class REP_CallParmsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnRCParmID;
            
            private System.Data.DataColumn columnRepCallIId;
            
            private System.Data.DataColumn columnRCParmName;
            
            private System.Data.DataColumn columnRCPFixed;
            
            private System.Data.DataColumn columnRCPVal;
            
            private System.Data.DataColumn columnRCPType;
            
            private System.Data.DataColumn columnRCPCall;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public REP_CallParmsDataTable() {
                this.TableName = "REP_CallParms";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal REP_CallParmsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected REP_CallParmsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RCParmIDColumn {
                get {
                    return this.columnRCParmID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RepCallIIdColumn {
                get {
                    return this.columnRepCallIId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RCParmNameColumn {
                get {
                    return this.columnRCParmName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RCPFixedColumn {
                get {
                    return this.columnRCPFixed;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RCPValColumn {
                get {
                    return this.columnRCPVal;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RCPTypeColumn {
                get {
                    return this.columnRCPType;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RCPCallColumn {
                get {
                    return this.columnRCPCall;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public REP_CallParmsRow this[int index] {
                get {
                    return ((REP_CallParmsRow)(this.Rows[index]));
                }
            }
            
            public event REP_CallParmsRowChangeEventHandler REP_CallParmsRowChanging;
            
            public event REP_CallParmsRowChangeEventHandler REP_CallParmsRowChanged;
            
            public event REP_CallParmsRowChangeEventHandler REP_CallParmsRowDeleting;
            
            public event REP_CallParmsRowChangeEventHandler REP_CallParmsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddREP_CallParmsRow(REP_CallParmsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public REP_CallParmsRow AddREP_CallParmsRow(int RCParmID, int RepCallIId, string RCParmName, byte RCPFixed, string RCPVal, int RCPType, int RCPCall) {
                REP_CallParmsRow rowREP_CallParmsRow = ((REP_CallParmsRow)(this.NewRow()));
                rowREP_CallParmsRow.ItemArray = new object[] {
                        RCParmID,
                        RepCallIId,
                        RCParmName,
                        RCPFixed,
                        RCPVal,
                        RCPType,
                        RCPCall};
                this.Rows.Add(rowREP_CallParmsRow);
                return rowREP_CallParmsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public REP_CallParmsRow FindByRCParmID(int RCParmID) {
                return ((REP_CallParmsRow)(this.Rows.Find(new object[] {
                            RCParmID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                REP_CallParmsDataTable cln = ((REP_CallParmsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new REP_CallParmsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRCParmID = base.Columns["RCParmID"];
                this.columnRepCallIId = base.Columns["RepCallIId"];
                this.columnRCParmName = base.Columns["RCParmName"];
                this.columnRCPFixed = base.Columns["RCPFixed"];
                this.columnRCPVal = base.Columns["RCPVal"];
                this.columnRCPType = base.Columns["RCPType"];
                this.columnRCPCall = base.Columns["RCPCall"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRCParmID = new System.Data.DataColumn("RCParmID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRCParmID);
                this.columnRepCallIId = new System.Data.DataColumn("RepCallIId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRepCallIId);
                this.columnRCParmName = new System.Data.DataColumn("RCParmName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRCParmName);
                this.columnRCPFixed = new System.Data.DataColumn("RCPFixed", typeof(byte), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRCPFixed);
                this.columnRCPVal = new System.Data.DataColumn("RCPVal", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRCPVal);
                this.columnRCPType = new System.Data.DataColumn("RCPType", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRCPType);
                this.columnRCPCall = new System.Data.DataColumn("RCPCall", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRCPCall);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnRCParmID}, true));
                this.columnRCParmID.AllowDBNull = false;
                this.columnRCParmID.Unique = true;
                this.columnRCParmName.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public REP_CallParmsRow NewREP_CallParmsRow() {
                return ((REP_CallParmsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new REP_CallParmsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(REP_CallParmsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.REP_CallParmsRowChanged != null)) {
                    this.REP_CallParmsRowChanged(this, new REP_CallParmsRowChangeEvent(((REP_CallParmsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.REP_CallParmsRowChanging != null)) {
                    this.REP_CallParmsRowChanging(this, new REP_CallParmsRowChangeEvent(((REP_CallParmsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.REP_CallParmsRowDeleted != null)) {
                    this.REP_CallParmsRowDeleted(this, new REP_CallParmsRowChangeEvent(((REP_CallParmsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.REP_CallParmsRowDeleting != null)) {
                    this.REP_CallParmsRowDeleting(this, new REP_CallParmsRowChangeEvent(((REP_CallParmsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveREP_CallParmsRow(REP_CallParmsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                dsRepParms ds = new dsRepParms();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "REP_CallParmsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class REP_CallParmsRow : System.Data.DataRow {
            
            private REP_CallParmsDataTable tableREP_CallParms;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal REP_CallParmsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableREP_CallParms = ((REP_CallParmsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RCParmID {
                get {
                    return ((int)(this[this.tableREP_CallParms.RCParmIDColumn]));
                }
                set {
                    this[this.tableREP_CallParms.RCParmIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RepCallIId {
                get {
                    try {
                        return ((int)(this[this.tableREP_CallParms.RepCallIIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RepCallIId\' in table \'REP_CallParms\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREP_CallParms.RepCallIIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RCParmName {
                get {
                    return ((string)(this[this.tableREP_CallParms.RCParmNameColumn]));
                }
                set {
                    this[this.tableREP_CallParms.RCParmNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte RCPFixed {
                get {
                    try {
                        return ((byte)(this[this.tableREP_CallParms.RCPFixedColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RCPFixed\' in table \'REP_CallParms\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREP_CallParms.RCPFixedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RCPVal {
                get {
                    try {
                        return ((string)(this[this.tableREP_CallParms.RCPValColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RCPVal\' in table \'REP_CallParms\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREP_CallParms.RCPValColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RCPType {
                get {
                    try {
                        return ((int)(this[this.tableREP_CallParms.RCPTypeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RCPType\' in table \'REP_CallParms\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREP_CallParms.RCPTypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RCPCall {
                get {
                    try {
                        return ((int)(this[this.tableREP_CallParms.RCPCallColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RCPCall\' in table \'REP_CallParms\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREP_CallParms.RCPCallColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRepCallIIdNull() {
                return this.IsNull(this.tableREP_CallParms.RepCallIIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRepCallIIdNull() {
                this[this.tableREP_CallParms.RepCallIIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRCPFixedNull() {
                return this.IsNull(this.tableREP_CallParms.RCPFixedColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRCPFixedNull() {
                this[this.tableREP_CallParms.RCPFixedColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRCPValNull() {
                return this.IsNull(this.tableREP_CallParms.RCPValColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRCPValNull() {
                this[this.tableREP_CallParms.RCPValColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRCPTypeNull() {
                return this.IsNull(this.tableREP_CallParms.RCPTypeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRCPTypeNull() {
                this[this.tableREP_CallParms.RCPTypeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRCPCallNull() {
                return this.IsNull(this.tableREP_CallParms.RCPCallColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRCPCallNull() {
                this[this.tableREP_CallParms.RCPCallColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class REP_CallParmsRowChangeEvent : System.EventArgs {
            
            private REP_CallParmsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public REP_CallParmsRowChangeEvent(REP_CallParmsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public REP_CallParmsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591