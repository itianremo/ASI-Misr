//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace TSN.ERP.SharedComponents.Data {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsAccDailyEntries : DataSet {
        
        private GEN_AccDailyEntriesDataTable tableGEN_AccDailyEntries;
        
        private GEN_ProjectsDataTable tableGEN_Projects;
        
        public dsAccDailyEntries() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsAccDailyEntries(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["GEN_AccDailyEntries"] != null)) {
                    this.Tables.Add(new GEN_AccDailyEntriesDataTable(ds.Tables["GEN_AccDailyEntries"]));
                }
                if ((ds.Tables["GEN_Projects"] != null)) {
                    this.Tables.Add(new GEN_ProjectsDataTable(ds.Tables["GEN_Projects"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GEN_AccDailyEntriesDataTable GEN_AccDailyEntries {
            get {
                return this.tableGEN_AccDailyEntries;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GEN_ProjectsDataTable GEN_Projects {
            get {
                return this.tableGEN_Projects;
            }
        }
        
        public override DataSet Clone() {
            dsAccDailyEntries cln = ((dsAccDailyEntries)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["GEN_AccDailyEntries"] != null)) {
                this.Tables.Add(new GEN_AccDailyEntriesDataTable(ds.Tables["GEN_AccDailyEntries"]));
            }
            if ((ds.Tables["GEN_Projects"] != null)) {
                this.Tables.Add(new GEN_ProjectsDataTable(ds.Tables["GEN_Projects"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableGEN_AccDailyEntries = ((GEN_AccDailyEntriesDataTable)(this.Tables["GEN_AccDailyEntries"]));
            if ((this.tableGEN_AccDailyEntries != null)) {
                this.tableGEN_AccDailyEntries.InitVars();
            }
            this.tableGEN_Projects = ((GEN_ProjectsDataTable)(this.Tables["GEN_Projects"]));
            if ((this.tableGEN_Projects != null)) {
                this.tableGEN_Projects.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "dsAccDailyEntries";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/dsAccDailyEntries.xsd";
            this.Locale = new System.Globalization.CultureInfo("ar-EG");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableGEN_AccDailyEntries = new GEN_AccDailyEntriesDataTable();
            this.Tables.Add(this.tableGEN_AccDailyEntries);
            this.tableGEN_Projects = new GEN_ProjectsDataTable();
            this.Tables.Add(this.tableGEN_Projects);
        }
        
        private bool ShouldSerializeGEN_AccDailyEntries() {
            return false;
        }
        
        private bool ShouldSerializeGEN_Projects() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void GEN_AccDailyEntriesRowChangeEventHandler(object sender, GEN_AccDailyEntriesRowChangeEvent e);
        
        public delegate void GEN_ProjectsRowChangeEventHandler(object sender, GEN_ProjectsRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GEN_AccDailyEntriesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnTransID;
            
            private DataColumn columnNoteID;
            
            private DataColumn columnAssignmentD;
            
            private DataColumn columnAccountabilityValue;
            
            private DataColumn columnAccountabilityDate;
            
            internal GEN_AccDailyEntriesDataTable() : 
                    base("GEN_AccDailyEntries") {
                this.InitClass();
            }
            
            internal GEN_AccDailyEntriesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn TransIDColumn {
                get {
                    return this.columnTransID;
                }
            }
            
            internal DataColumn NoteIDColumn {
                get {
                    return this.columnNoteID;
                }
            }
            
            internal DataColumn AssignmentDColumn {
                get {
                    return this.columnAssignmentD;
                }
            }
            
            internal DataColumn AccountabilityValueColumn {
                get {
                    return this.columnAccountabilityValue;
                }
            }
            
            internal DataColumn AccountabilityDateColumn {
                get {
                    return this.columnAccountabilityDate;
                }
            }
            
            public GEN_AccDailyEntriesRow this[int index] {
                get {
                    return ((GEN_AccDailyEntriesRow)(this.Rows[index]));
                }
            }
            
            public event GEN_AccDailyEntriesRowChangeEventHandler GEN_AccDailyEntriesRowChanged;
            
            public event GEN_AccDailyEntriesRowChangeEventHandler GEN_AccDailyEntriesRowChanging;
            
            public event GEN_AccDailyEntriesRowChangeEventHandler GEN_AccDailyEntriesRowDeleted;
            
            public event GEN_AccDailyEntriesRowChangeEventHandler GEN_AccDailyEntriesRowDeleting;
            
            public void AddGEN_AccDailyEntriesRow(GEN_AccDailyEntriesRow row) {
                this.Rows.Add(row);
            }
            
            public GEN_AccDailyEntriesRow AddGEN_AccDailyEntriesRow(int TransID, int NoteID, int AssignmentD, System.Decimal AccountabilityValue, System.DateTime AccountabilityDate) {
                GEN_AccDailyEntriesRow rowGEN_AccDailyEntriesRow = ((GEN_AccDailyEntriesRow)(this.NewRow()));
                rowGEN_AccDailyEntriesRow.ItemArray = new object[] {
                        TransID,
                        NoteID,
                        AssignmentD,
                        AccountabilityValue,
                        AccountabilityDate};
                this.Rows.Add(rowGEN_AccDailyEntriesRow);
                return rowGEN_AccDailyEntriesRow;
            }
            
            public GEN_AccDailyEntriesRow FindByTransID(int TransID) {
                return ((GEN_AccDailyEntriesRow)(this.Rows.Find(new object[] {
                            TransID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                GEN_AccDailyEntriesDataTable cln = ((GEN_AccDailyEntriesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new GEN_AccDailyEntriesDataTable();
            }
            
            internal void InitVars() {
                this.columnTransID = this.Columns["TransID"];
                this.columnNoteID = this.Columns["NoteID"];
                this.columnAssignmentD = this.Columns["AssignmentD"];
                this.columnAccountabilityValue = this.Columns["AccountabilityValue"];
                this.columnAccountabilityDate = this.Columns["AccountabilityDate"];
            }
            
            private void InitClass() {
                this.columnTransID = new DataColumn("TransID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTransID);
                this.columnNoteID = new DataColumn("NoteID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNoteID);
                this.columnAssignmentD = new DataColumn("AssignmentD", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAssignmentD);
                this.columnAccountabilityValue = new DataColumn("AccountabilityValue", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAccountabilityValue);
                this.columnAccountabilityDate = new DataColumn("AccountabilityDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAccountabilityDate);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnTransID}, true));
                this.columnTransID.AllowDBNull = false;
                this.columnTransID.Unique = true;
                this.columnAccountabilityValue.AllowDBNull = false;
                this.columnAccountabilityDate.AllowDBNull = false;
            }
            
            public GEN_AccDailyEntriesRow NewGEN_AccDailyEntriesRow() {
                return ((GEN_AccDailyEntriesRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new GEN_AccDailyEntriesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(GEN_AccDailyEntriesRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GEN_AccDailyEntriesRowChanged != null)) {
                    this.GEN_AccDailyEntriesRowChanged(this, new GEN_AccDailyEntriesRowChangeEvent(((GEN_AccDailyEntriesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GEN_AccDailyEntriesRowChanging != null)) {
                    this.GEN_AccDailyEntriesRowChanging(this, new GEN_AccDailyEntriesRowChangeEvent(((GEN_AccDailyEntriesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GEN_AccDailyEntriesRowDeleted != null)) {
                    this.GEN_AccDailyEntriesRowDeleted(this, new GEN_AccDailyEntriesRowChangeEvent(((GEN_AccDailyEntriesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GEN_AccDailyEntriesRowDeleting != null)) {
                    this.GEN_AccDailyEntriesRowDeleting(this, new GEN_AccDailyEntriesRowChangeEvent(((GEN_AccDailyEntriesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveGEN_AccDailyEntriesRow(GEN_AccDailyEntriesRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GEN_AccDailyEntriesRow : DataRow {
            
            private GEN_AccDailyEntriesDataTable tableGEN_AccDailyEntries;
            
            internal GEN_AccDailyEntriesRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableGEN_AccDailyEntries = ((GEN_AccDailyEntriesDataTable)(this.Table));
            }
            
            public int TransID {
                get {
                    return ((int)(this[this.tableGEN_AccDailyEntries.TransIDColumn]));
                }
                set {
                    this[this.tableGEN_AccDailyEntries.TransIDColumn] = value;
                }
            }
            
            public int NoteID {
                get {
                    try {
                        return ((int)(this[this.tableGEN_AccDailyEntries.NoteIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEN_AccDailyEntries.NoteIDColumn] = value;
                }
            }
            
            public int AssignmentD {
                get {
                    try {
                        return ((int)(this[this.tableGEN_AccDailyEntries.AssignmentDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEN_AccDailyEntries.AssignmentDColumn] = value;
                }
            }
            
            public System.Decimal AccountabilityValue {
                get {
                    return ((System.Decimal)(this[this.tableGEN_AccDailyEntries.AccountabilityValueColumn]));
                }
                set {
                    this[this.tableGEN_AccDailyEntries.AccountabilityValueColumn] = value;
                }
            }
            
            public System.DateTime AccountabilityDate {
                get {
                    return ((System.DateTime)(this[this.tableGEN_AccDailyEntries.AccountabilityDateColumn]));
                }
                set {
                    this[this.tableGEN_AccDailyEntries.AccountabilityDateColumn] = value;
                }
            }
            
            public bool IsNoteIDNull() {
                return this.IsNull(this.tableGEN_AccDailyEntries.NoteIDColumn);
            }
            
            public void SetNoteIDNull() {
                this[this.tableGEN_AccDailyEntries.NoteIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsAssignmentDNull() {
                return this.IsNull(this.tableGEN_AccDailyEntries.AssignmentDColumn);
            }
            
            public void SetAssignmentDNull() {
                this[this.tableGEN_AccDailyEntries.AssignmentDColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GEN_AccDailyEntriesRowChangeEvent : EventArgs {
            
            private GEN_AccDailyEntriesRow eventRow;
            
            private DataRowAction eventAction;
            
            public GEN_AccDailyEntriesRowChangeEvent(GEN_AccDailyEntriesRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public GEN_AccDailyEntriesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GEN_ProjectsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnprojectID;
            
            private DataColumn columnProjectName;
            
            private DataColumn columnProjectOwner;
            
            private DataColumn columnProjectStartDate;
            
            private DataColumn columnProjectStatus;
            
            private DataColumn columnProjectOrginatorTarget;
            
            private DataColumn columnProjectTargetDate;
            
            private DataColumn columnProjectCriticalDate;
            
            private DataColumn columnProjectCompleteDate;
            
            private DataColumn columnProjectComplete;
            
            private DataColumn columnProjectManager;
            
            private DataColumn columnProjectDesc;
            
            internal GEN_ProjectsDataTable() : 
                    base("GEN_Projects") {
                this.InitClass();
            }
            
            internal GEN_ProjectsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn projectIDColumn {
                get {
                    return this.columnprojectID;
                }
            }
            
            internal DataColumn ProjectNameColumn {
                get {
                    return this.columnProjectName;
                }
            }
            
            internal DataColumn ProjectOwnerColumn {
                get {
                    return this.columnProjectOwner;
                }
            }
            
            internal DataColumn ProjectStartDateColumn {
                get {
                    return this.columnProjectStartDate;
                }
            }
            
            internal DataColumn ProjectStatusColumn {
                get {
                    return this.columnProjectStatus;
                }
            }
            
            internal DataColumn ProjectOrginatorTargetColumn {
                get {
                    return this.columnProjectOrginatorTarget;
                }
            }
            
            internal DataColumn ProjectTargetDateColumn {
                get {
                    return this.columnProjectTargetDate;
                }
            }
            
            internal DataColumn ProjectCriticalDateColumn {
                get {
                    return this.columnProjectCriticalDate;
                }
            }
            
            internal DataColumn ProjectCompleteDateColumn {
                get {
                    return this.columnProjectCompleteDate;
                }
            }
            
            internal DataColumn ProjectCompleteColumn {
                get {
                    return this.columnProjectComplete;
                }
            }
            
            internal DataColumn ProjectManagerColumn {
                get {
                    return this.columnProjectManager;
                }
            }
            
            internal DataColumn ProjectDescColumn {
                get {
                    return this.columnProjectDesc;
                }
            }
            
            public GEN_ProjectsRow this[int index] {
                get {
                    return ((GEN_ProjectsRow)(this.Rows[index]));
                }
            }
            
            public event GEN_ProjectsRowChangeEventHandler GEN_ProjectsRowChanged;
            
            public event GEN_ProjectsRowChangeEventHandler GEN_ProjectsRowChanging;
            
            public event GEN_ProjectsRowChangeEventHandler GEN_ProjectsRowDeleted;
            
            public event GEN_ProjectsRowChangeEventHandler GEN_ProjectsRowDeleting;
            
            public void AddGEN_ProjectsRow(GEN_ProjectsRow row) {
                this.Rows.Add(row);
            }
            
            public GEN_ProjectsRow AddGEN_ProjectsRow(int projectID, string ProjectName, int ProjectOwner, System.DateTime ProjectStartDate, short ProjectStatus, System.DateTime ProjectOrginatorTarget, System.DateTime ProjectTargetDate, System.DateTime ProjectCriticalDate, System.DateTime ProjectCompleteDate, bool ProjectComplete, int ProjectManager, string ProjectDesc) {
                GEN_ProjectsRow rowGEN_ProjectsRow = ((GEN_ProjectsRow)(this.NewRow()));
                rowGEN_ProjectsRow.ItemArray = new object[] {
                        projectID,
                        ProjectName,
                        ProjectOwner,
                        ProjectStartDate,
                        ProjectStatus,
                        ProjectOrginatorTarget,
                        ProjectTargetDate,
                        ProjectCriticalDate,
                        ProjectCompleteDate,
                        ProjectComplete,
                        ProjectManager,
                        ProjectDesc};
                this.Rows.Add(rowGEN_ProjectsRow);
                return rowGEN_ProjectsRow;
            }
            
            public GEN_ProjectsRow FindByprojectID(int projectID) {
                return ((GEN_ProjectsRow)(this.Rows.Find(new object[] {
                            projectID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                GEN_ProjectsDataTable cln = ((GEN_ProjectsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new GEN_ProjectsDataTable();
            }
            
            internal void InitVars() {
                this.columnprojectID = this.Columns["projectID"];
                this.columnProjectName = this.Columns["ProjectName"];
                this.columnProjectOwner = this.Columns["ProjectOwner"];
                this.columnProjectStartDate = this.Columns["ProjectStartDate"];
                this.columnProjectStatus = this.Columns["ProjectStatus"];
                this.columnProjectOrginatorTarget = this.Columns["ProjectOrginatorTarget"];
                this.columnProjectTargetDate = this.Columns["ProjectTargetDate"];
                this.columnProjectCriticalDate = this.Columns["ProjectCriticalDate"];
                this.columnProjectCompleteDate = this.Columns["ProjectCompleteDate"];
                this.columnProjectComplete = this.Columns["ProjectComplete"];
                this.columnProjectManager = this.Columns["ProjectManager"];
                this.columnProjectDesc = this.Columns["ProjectDesc"];
            }
            
            private void InitClass() {
                this.columnprojectID = new DataColumn("projectID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnprojectID);
                this.columnProjectName = new DataColumn("ProjectName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnProjectName);
                this.columnProjectOwner = new DataColumn("ProjectOwner", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnProjectOwner);
                this.columnProjectStartDate = new DataColumn("ProjectStartDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnProjectStartDate);
                this.columnProjectStatus = new DataColumn("ProjectStatus", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnProjectStatus);
                this.columnProjectOrginatorTarget = new DataColumn("ProjectOrginatorTarget", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnProjectOrginatorTarget);
                this.columnProjectTargetDate = new DataColumn("ProjectTargetDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnProjectTargetDate);
                this.columnProjectCriticalDate = new DataColumn("ProjectCriticalDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnProjectCriticalDate);
                this.columnProjectCompleteDate = new DataColumn("ProjectCompleteDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnProjectCompleteDate);
                this.columnProjectComplete = new DataColumn("ProjectComplete", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnProjectComplete);
                this.columnProjectManager = new DataColumn("ProjectManager", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnProjectManager);
                this.columnProjectDesc = new DataColumn("ProjectDesc", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnProjectDesc);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnprojectID}, true));
                this.columnprojectID.AllowDBNull = false;
                this.columnprojectID.Unique = true;
                this.columnProjectName.AllowDBNull = false;
                this.columnProjectOwner.AllowDBNull = false;
            }
            
            public GEN_ProjectsRow NewGEN_ProjectsRow() {
                return ((GEN_ProjectsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new GEN_ProjectsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(GEN_ProjectsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GEN_ProjectsRowChanged != null)) {
                    this.GEN_ProjectsRowChanged(this, new GEN_ProjectsRowChangeEvent(((GEN_ProjectsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GEN_ProjectsRowChanging != null)) {
                    this.GEN_ProjectsRowChanging(this, new GEN_ProjectsRowChangeEvent(((GEN_ProjectsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GEN_ProjectsRowDeleted != null)) {
                    this.GEN_ProjectsRowDeleted(this, new GEN_ProjectsRowChangeEvent(((GEN_ProjectsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GEN_ProjectsRowDeleting != null)) {
                    this.GEN_ProjectsRowDeleting(this, new GEN_ProjectsRowChangeEvent(((GEN_ProjectsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveGEN_ProjectsRow(GEN_ProjectsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GEN_ProjectsRow : DataRow {
            
            private GEN_ProjectsDataTable tableGEN_Projects;
            
            internal GEN_ProjectsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableGEN_Projects = ((GEN_ProjectsDataTable)(this.Table));
            }
            
            public int projectID {
                get {
                    return ((int)(this[this.tableGEN_Projects.projectIDColumn]));
                }
                set {
                    this[this.tableGEN_Projects.projectIDColumn] = value;
                }
            }
            
            public string ProjectName {
                get {
                    return ((string)(this[this.tableGEN_Projects.ProjectNameColumn]));
                }
                set {
                    this[this.tableGEN_Projects.ProjectNameColumn] = value;
                }
            }
            
            public int ProjectOwner {
                get {
                    return ((int)(this[this.tableGEN_Projects.ProjectOwnerColumn]));
                }
                set {
                    this[this.tableGEN_Projects.ProjectOwnerColumn] = value;
                }
            }
            
            public System.DateTime ProjectStartDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableGEN_Projects.ProjectStartDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEN_Projects.ProjectStartDateColumn] = value;
                }
            }
            
            public short ProjectStatus {
                get {
                    try {
                        return ((short)(this[this.tableGEN_Projects.ProjectStatusColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEN_Projects.ProjectStatusColumn] = value;
                }
            }
            
            public System.DateTime ProjectOrginatorTarget {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableGEN_Projects.ProjectOrginatorTargetColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEN_Projects.ProjectOrginatorTargetColumn] = value;
                }
            }
            
            public System.DateTime ProjectTargetDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableGEN_Projects.ProjectTargetDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEN_Projects.ProjectTargetDateColumn] = value;
                }
            }
            
            public System.DateTime ProjectCriticalDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableGEN_Projects.ProjectCriticalDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEN_Projects.ProjectCriticalDateColumn] = value;
                }
            }
            
            public System.DateTime ProjectCompleteDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableGEN_Projects.ProjectCompleteDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEN_Projects.ProjectCompleteDateColumn] = value;
                }
            }
            
            public bool ProjectComplete {
                get {
                    try {
                        return ((bool)(this[this.tableGEN_Projects.ProjectCompleteColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEN_Projects.ProjectCompleteColumn] = value;
                }
            }
            
            public int ProjectManager {
                get {
                    try {
                        return ((int)(this[this.tableGEN_Projects.ProjectManagerColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEN_Projects.ProjectManagerColumn] = value;
                }
            }
            
            public string ProjectDesc {
                get {
                    try {
                        return ((string)(this[this.tableGEN_Projects.ProjectDescColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEN_Projects.ProjectDescColumn] = value;
                }
            }
            
            public bool IsProjectStartDateNull() {
                return this.IsNull(this.tableGEN_Projects.ProjectStartDateColumn);
            }
            
            public void SetProjectStartDateNull() {
                this[this.tableGEN_Projects.ProjectStartDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsProjectStatusNull() {
                return this.IsNull(this.tableGEN_Projects.ProjectStatusColumn);
            }
            
            public void SetProjectStatusNull() {
                this[this.tableGEN_Projects.ProjectStatusColumn] = System.Convert.DBNull;
            }
            
            public bool IsProjectOrginatorTargetNull() {
                return this.IsNull(this.tableGEN_Projects.ProjectOrginatorTargetColumn);
            }
            
            public void SetProjectOrginatorTargetNull() {
                this[this.tableGEN_Projects.ProjectOrginatorTargetColumn] = System.Convert.DBNull;
            }
            
            public bool IsProjectTargetDateNull() {
                return this.IsNull(this.tableGEN_Projects.ProjectTargetDateColumn);
            }
            
            public void SetProjectTargetDateNull() {
                this[this.tableGEN_Projects.ProjectTargetDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsProjectCriticalDateNull() {
                return this.IsNull(this.tableGEN_Projects.ProjectCriticalDateColumn);
            }
            
            public void SetProjectCriticalDateNull() {
                this[this.tableGEN_Projects.ProjectCriticalDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsProjectCompleteDateNull() {
                return this.IsNull(this.tableGEN_Projects.ProjectCompleteDateColumn);
            }
            
            public void SetProjectCompleteDateNull() {
                this[this.tableGEN_Projects.ProjectCompleteDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsProjectCompleteNull() {
                return this.IsNull(this.tableGEN_Projects.ProjectCompleteColumn);
            }
            
            public void SetProjectCompleteNull() {
                this[this.tableGEN_Projects.ProjectCompleteColumn] = System.Convert.DBNull;
            }
            
            public bool IsProjectManagerNull() {
                return this.IsNull(this.tableGEN_Projects.ProjectManagerColumn);
            }
            
            public void SetProjectManagerNull() {
                this[this.tableGEN_Projects.ProjectManagerColumn] = System.Convert.DBNull;
            }
            
            public bool IsProjectDescNull() {
                return this.IsNull(this.tableGEN_Projects.ProjectDescColumn);
            }
            
            public void SetProjectDescNull() {
                this[this.tableGEN_Projects.ProjectDescColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GEN_ProjectsRowChangeEvent : EventArgs {
            
            private GEN_ProjectsRow eventRow;
            
            private DataRowAction eventAction;
            
            public GEN_ProjectsRowChangeEvent(GEN_ProjectsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public GEN_ProjectsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
