//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace TSN.ERP.SharedComponents.Data {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsOrgnizationCharts : DataSet {
        
        private GEN_OrgnizationChartsDataTable tableGEN_OrgnizationCharts;
        
        public dsOrgnizationCharts() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsOrgnizationCharts(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["GEN_OrgnizationCharts"] != null)) {
                    this.Tables.Add(new GEN_OrgnizationChartsDataTable(ds.Tables["GEN_OrgnizationCharts"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GEN_OrgnizationChartsDataTable GEN_OrgnizationCharts {
            get {
                return this.tableGEN_OrgnizationCharts;
            }
        }
        
        public override DataSet Clone() {
            dsOrgnizationCharts cln = ((dsOrgnizationCharts)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["GEN_OrgnizationCharts"] != null)) {
                this.Tables.Add(new GEN_OrgnizationChartsDataTable(ds.Tables["GEN_OrgnizationCharts"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableGEN_OrgnizationCharts = ((GEN_OrgnizationChartsDataTable)(this.Tables["GEN_OrgnizationCharts"]));
            if ((this.tableGEN_OrgnizationCharts != null)) {
                this.tableGEN_OrgnizationCharts.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "dsOrgnizationCharts";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/dsOrgnizationCharts.xsd";
            this.Locale = new System.Globalization.CultureInfo("ar-EG");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableGEN_OrgnizationCharts = new GEN_OrgnizationChartsDataTable();
            this.Tables.Add(this.tableGEN_OrgnizationCharts);
        }
        
        private bool ShouldSerializeGEN_OrgnizationCharts() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void GEN_OrgnizationChartsRowChangeEventHandler(object sender, GEN_OrgnizationChartsRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GEN_OrgnizationChartsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnFileID;
            
            private DataColumn columnOChartDesc;
            
            private DataColumn columnOChartObject;
            
            private DataColumn columnOChartType;
            
            internal GEN_OrgnizationChartsDataTable() : 
                    base("GEN_OrgnizationCharts") {
                this.InitClass();
            }
            
            internal GEN_OrgnizationChartsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn FileIDColumn {
                get {
                    return this.columnFileID;
                }
            }
            
            internal DataColumn OChartDescColumn {
                get {
                    return this.columnOChartDesc;
                }
            }
            
            internal DataColumn OChartObjectColumn {
                get {
                    return this.columnOChartObject;
                }
            }
            
            internal DataColumn OChartTypeColumn {
                get {
                    return this.columnOChartType;
                }
            }
            
            public GEN_OrgnizationChartsRow this[int index] {
                get {
                    return ((GEN_OrgnizationChartsRow)(this.Rows[index]));
                }
            }
            
            public event GEN_OrgnizationChartsRowChangeEventHandler GEN_OrgnizationChartsRowChanged;
            
            public event GEN_OrgnizationChartsRowChangeEventHandler GEN_OrgnizationChartsRowChanging;
            
            public event GEN_OrgnizationChartsRowChangeEventHandler GEN_OrgnizationChartsRowDeleted;
            
            public event GEN_OrgnizationChartsRowChangeEventHandler GEN_OrgnizationChartsRowDeleting;
            
            public void AddGEN_OrgnizationChartsRow(GEN_OrgnizationChartsRow row) {
                this.Rows.Add(row);
            }
            
            public GEN_OrgnizationChartsRow AddGEN_OrgnizationChartsRow(int FileID, string OChartDesc, string OChartObject, int OChartType) {
                GEN_OrgnizationChartsRow rowGEN_OrgnizationChartsRow = ((GEN_OrgnizationChartsRow)(this.NewRow()));
                rowGEN_OrgnizationChartsRow.ItemArray = new object[] {
                        FileID,
                        OChartDesc,
                        OChartObject,
                        OChartType};
                this.Rows.Add(rowGEN_OrgnizationChartsRow);
                return rowGEN_OrgnizationChartsRow;
            }
            
            public GEN_OrgnizationChartsRow FindByFileID(int FileID) {
                return ((GEN_OrgnizationChartsRow)(this.Rows.Find(new object[] {
                            FileID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                GEN_OrgnizationChartsDataTable cln = ((GEN_OrgnizationChartsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new GEN_OrgnizationChartsDataTable();
            }
            
            internal void InitVars() {
                this.columnFileID = this.Columns["FileID"];
                this.columnOChartDesc = this.Columns["OChartDesc"];
                this.columnOChartObject = this.Columns["OChartObject"];
                this.columnOChartType = this.Columns["OChartType"];
            }
            
            private void InitClass() {
                this.columnFileID = new DataColumn("FileID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFileID);
                this.columnOChartDesc = new DataColumn("OChartDesc", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOChartDesc);
                this.columnOChartObject = new DataColumn("OChartObject", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOChartObject);
                this.columnOChartType = new DataColumn("OChartType", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOChartType);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnFileID}, true));
                this.columnFileID.AllowDBNull = false;
                this.columnFileID.Unique = true;
                this.columnOChartDesc.AllowDBNull = false;
            }
            
            public GEN_OrgnizationChartsRow NewGEN_OrgnizationChartsRow() {
                return ((GEN_OrgnizationChartsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new GEN_OrgnizationChartsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(GEN_OrgnizationChartsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GEN_OrgnizationChartsRowChanged != null)) {
                    this.GEN_OrgnizationChartsRowChanged(this, new GEN_OrgnizationChartsRowChangeEvent(((GEN_OrgnizationChartsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GEN_OrgnizationChartsRowChanging != null)) {
                    this.GEN_OrgnizationChartsRowChanging(this, new GEN_OrgnizationChartsRowChangeEvent(((GEN_OrgnizationChartsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GEN_OrgnizationChartsRowDeleted != null)) {
                    this.GEN_OrgnizationChartsRowDeleted(this, new GEN_OrgnizationChartsRowChangeEvent(((GEN_OrgnizationChartsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GEN_OrgnizationChartsRowDeleting != null)) {
                    this.GEN_OrgnizationChartsRowDeleting(this, new GEN_OrgnizationChartsRowChangeEvent(((GEN_OrgnizationChartsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveGEN_OrgnizationChartsRow(GEN_OrgnizationChartsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GEN_OrgnizationChartsRow : DataRow {
            
            private GEN_OrgnizationChartsDataTable tableGEN_OrgnizationCharts;
            
            internal GEN_OrgnizationChartsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableGEN_OrgnizationCharts = ((GEN_OrgnizationChartsDataTable)(this.Table));
            }
            
            public int FileID {
                get {
                    return ((int)(this[this.tableGEN_OrgnizationCharts.FileIDColumn]));
                }
                set {
                    this[this.tableGEN_OrgnizationCharts.FileIDColumn] = value;
                }
            }
            
            public string OChartDesc {
                get {
                    return ((string)(this[this.tableGEN_OrgnizationCharts.OChartDescColumn]));
                }
                set {
                    this[this.tableGEN_OrgnizationCharts.OChartDescColumn] = value;
                }
            }
            
            public string OChartObject {
                get {
                    try {
                        return ((string)(this[this.tableGEN_OrgnizationCharts.OChartObjectColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEN_OrgnizationCharts.OChartObjectColumn] = value;
                }
            }
            
            public int OChartType {
                get {
                    try {
                        return ((int)(this[this.tableGEN_OrgnizationCharts.OChartTypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEN_OrgnizationCharts.OChartTypeColumn] = value;
                }
            }
            
            public bool IsOChartObjectNull() {
                return this.IsNull(this.tableGEN_OrgnizationCharts.OChartObjectColumn);
            }
            
            public void SetOChartObjectNull() {
                this[this.tableGEN_OrgnizationCharts.OChartObjectColumn] = System.Convert.DBNull;
            }
            
            public bool IsOChartTypeNull() {
                return this.IsNull(this.tableGEN_OrgnizationCharts.OChartTypeColumn);
            }
            
            public void SetOChartTypeNull() {
                this[this.tableGEN_OrgnizationCharts.OChartTypeColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GEN_OrgnizationChartsRowChangeEvent : EventArgs {
            
            private GEN_OrgnizationChartsRow eventRow;
            
            private DataRowAction eventAction;
            
            public GEN_OrgnizationChartsRowChangeEvent(GEN_OrgnizationChartsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public GEN_OrgnizationChartsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
