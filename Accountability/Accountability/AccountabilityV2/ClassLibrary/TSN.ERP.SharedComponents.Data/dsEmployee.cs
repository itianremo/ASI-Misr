//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace TSN.ERP.SharedComponents.Data {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsEmployee : DataSet {
        
        private GEN_EmployeesDataTable tableGEN_Employees;
        
        public dsEmployee() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsEmployee(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["GEN_Employees"] != null)) {
                    this.Tables.Add(new GEN_EmployeesDataTable(ds.Tables["GEN_Employees"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GEN_EmployeesDataTable GEN_Employees {
            get {
                return this.tableGEN_Employees;
            }
        }
        
        public override DataSet Clone() {
            dsEmployee cln = ((dsEmployee)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["GEN_Employees"] != null)) {
                this.Tables.Add(new GEN_EmployeesDataTable(ds.Tables["GEN_Employees"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableGEN_Employees = ((GEN_EmployeesDataTable)(this.Tables["GEN_Employees"]));
            if ((this.tableGEN_Employees != null)) {
                this.tableGEN_Employees.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "dsEmployee";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/dsEmployee.xsd";
            this.Locale = new System.Globalization.CultureInfo("ar-EG");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableGEN_Employees = new GEN_EmployeesDataTable();
            this.Tables.Add(this.tableGEN_Employees);
        }
        
        private bool ShouldSerializeGEN_Employees() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void GEN_EmployeesRowChangeEventHandler(object sender, GEN_EmployeesRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GEN_EmployeesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnContactID;
            
            private DataColumn columnJobTitleID;
            
            private DataColumn columnFileID;
            
            private DataColumn columnCompElmentID;
            
            private DataColumn columnEmployeeStatus;
            
            private DataColumn columnEmpHireDate;

            private DataColumn columnEmpTerminationDate;
            
            private DataColumn columnEmpCode;
            
            private DataColumn columnContTypeID;
            
            private DataColumn columnUserID;
            
            private DataColumn columnFirstName;
            
            private DataColumn columnMiddleName;
            
            private DataColumn columnLastName;
            
            private DataColumn columnFullname;
            private DataColumn columnFileIDHR;

            
            internal GEN_EmployeesDataTable() : 
                    base("GEN_Employees") {
                this.InitClass();
            }
            
            internal GEN_EmployeesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ContactIDColumn {
                get {
                    return this.columnContactID;
                }
            }
            
            internal DataColumn JobTitleIDColumn {
                get {
                    return this.columnJobTitleID;
                }
            }
            
            internal DataColumn FileIDColumn {
                get {
                    return this.columnFileID;
                }
            }
            
            internal DataColumn CompElmentIDColumn {
                get {
                    return this.columnCompElmentID;
                }
            }
            
            internal DataColumn EmployeeStatusColumn {
                get {
                    return this.columnEmployeeStatus;
                }
            }
            
            internal DataColumn EmpHireDateColumn {
                get {
                    return this.columnEmpHireDate;
                }
            }

            internal DataColumn EmpTerminationDateColumn
            {
                get
                {
                    return this.columnEmpTerminationDate;
                }
            }
            
            internal DataColumn EmpCodeColumn {
                get {
                    return this.columnEmpCode;
                }
            }
            
            internal DataColumn ContTypeIDColumn {
                get {
                    return this.columnContTypeID;
                }
            }
            
            internal DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            internal DataColumn FirstNameColumn {
                get {
                    return this.columnFirstName;
                }
            }
            
            internal DataColumn MiddleNameColumn {
                get {
                    return this.columnMiddleName;
                }
            }
            
            internal DataColumn LastNameColumn {
                get {
                    return this.columnLastName;
                }
            }
            
            internal DataColumn FullnameColumn {
                get {
                    return this.columnFullname;
                }
            }
            internal DataColumn FileIDHRColumn
            {
                get
                {
                    return this.columnFileIDHR;
                }
            }
            
            public GEN_EmployeesRow this[int index] {
                get {
                    return ((GEN_EmployeesRow)(this.Rows[index]));
                }
            }
            
            public event GEN_EmployeesRowChangeEventHandler GEN_EmployeesRowChanged;
            
            public event GEN_EmployeesRowChangeEventHandler GEN_EmployeesRowChanging;
            
            public event GEN_EmployeesRowChangeEventHandler GEN_EmployeesRowDeleted;
            
            public event GEN_EmployeesRowChangeEventHandler GEN_EmployeesRowDeleting;
            
            public void AddGEN_EmployeesRow(GEN_EmployeesRow row) {
                this.Rows.Add(row);
            }

            public GEN_EmployeesRow AddGEN_EmployeesRow(int ContactID, int JobTitleID, int FileID, int CompElmentID, short EmployeeStatus, System.DateTime EmpHireDate, System.DateTime EmpTerminationDate, string EmpCode, short ContTypeID, int UserID, string FirstName, string MiddleName, string LastName, string Fullname, int FileIDHR)
            {
                GEN_EmployeesRow rowGEN_EmployeesRow = ((GEN_EmployeesRow)(this.NewRow()));
                rowGEN_EmployeesRow.ItemArray = new object[] {
                        ContactID,
                        JobTitleID,
                        FileID,
                        CompElmentID,
                        EmployeeStatus,
                        EmpHireDate,
                        EmpTerminationDate,
                        EmpCode,
                        ContTypeID,
                        UserID,
                        FirstName,
                        MiddleName,
                        LastName,
                        Fullname,
                        FileIDHR};
                this.Rows.Add(rowGEN_EmployeesRow);
                return rowGEN_EmployeesRow;
            }
            
            public GEN_EmployeesRow FindByContactID(int ContactID) {
                return ((GEN_EmployeesRow)(this.Rows.Find(new object[] {
                            ContactID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                GEN_EmployeesDataTable cln = ((GEN_EmployeesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new GEN_EmployeesDataTable();
            }
            
            internal void InitVars() {
                this.columnContactID = this.Columns["ContactID"];
                this.columnJobTitleID = this.Columns["JobTitleID"];
                this.columnFileID = this.Columns["FileID"];
                this.columnCompElmentID = this.Columns["CompElmentID"];
                this.columnEmployeeStatus = this.Columns["EmployeeStatus"];
                this.columnEmpHireDate = this.Columns["EmpHireDate"];
                this.columnEmpHireDate = this.Columns["EmpTerminationDate"];
                this.columnEmpCode = this.Columns["EmpCode"];
                this.columnContTypeID = this.Columns["ContTypeID"];
                this.columnUserID = this.Columns["UserID"];
                this.columnFirstName = this.Columns["FirstName"];
                this.columnMiddleName = this.Columns["MiddleName"];
                this.columnLastName = this.Columns["LastName"];
                this.columnFullname = this.Columns["Fullname"];
                this.columnFileIDHR = this.Columns["FileIDHR"];
            }
            
            private void InitClass() {
                this.columnContactID = new DataColumn("ContactID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnContactID);
                this.columnJobTitleID = new DataColumn("JobTitleID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnJobTitleID);
                this.columnFileID = new DataColumn("FileID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFileID);
                this.columnCompElmentID = new DataColumn("CompElmentID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCompElmentID);
                this.columnEmployeeStatus = new DataColumn("EmployeeStatus", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEmployeeStatus);
                this.columnEmpHireDate = new DataColumn("EmpHireDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEmpHireDate);
                this.columnEmpTerminationDate = new DataColumn("EmpTerminationDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEmpTerminationDate);
                this.columnEmpCode = new DataColumn("EmpCode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEmpCode);
                this.columnContTypeID = new DataColumn("ContTypeID", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnContTypeID);
                this.columnUserID = new DataColumn("UserID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserID);
                this.columnFirstName = new DataColumn("FirstName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFirstName);
                this.columnMiddleName = new DataColumn("MiddleName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMiddleName);
                this.columnLastName = new DataColumn("LastName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastName);
                this.columnFullname = new DataColumn("Fullname", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFullname);
                this.columnFileIDHR = new DataColumn("FileIDHR", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFileIDHR);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnContactID}, true));
                this.columnContactID.AllowDBNull = false;
                this.columnContactID.Unique = true;
                this.columnEmployeeStatus.AllowDBNull = false;
                this.columnFullname.AllowDBNull = false;
            }
            
            public GEN_EmployeesRow NewGEN_EmployeesRow() {
                return ((GEN_EmployeesRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new GEN_EmployeesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(GEN_EmployeesRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GEN_EmployeesRowChanged != null)) {
                    this.GEN_EmployeesRowChanged(this, new GEN_EmployeesRowChangeEvent(((GEN_EmployeesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GEN_EmployeesRowChanging != null)) {
                    this.GEN_EmployeesRowChanging(this, new GEN_EmployeesRowChangeEvent(((GEN_EmployeesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GEN_EmployeesRowDeleted != null)) {
                    this.GEN_EmployeesRowDeleted(this, new GEN_EmployeesRowChangeEvent(((GEN_EmployeesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GEN_EmployeesRowDeleting != null)) {
                    this.GEN_EmployeesRowDeleting(this, new GEN_EmployeesRowChangeEvent(((GEN_EmployeesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveGEN_EmployeesRow(GEN_EmployeesRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GEN_EmployeesRow : DataRow {
            
            private GEN_EmployeesDataTable tableGEN_Employees;
            
            internal GEN_EmployeesRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableGEN_Employees = ((GEN_EmployeesDataTable)(this.Table));
            }
            
            public int ContactID {
                get {
                    return ((int)(this[this.tableGEN_Employees.ContactIDColumn]));
                }
                set {
                    this[this.tableGEN_Employees.ContactIDColumn] = value;
                }
            }
            
            public int JobTitleID {
                get {
                    try {
                        return ((int)(this[this.tableGEN_Employees.JobTitleIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEN_Employees.JobTitleIDColumn] = value;
                }
            }
            
            public int FileID {
                get {
                    try {
                        return ((int)(this[this.tableGEN_Employees.FileIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEN_Employees.FileIDColumn] = value;
                }
            }
            
            public int CompElmentID {
                get {
                    try {
                        return ((int)(this[this.tableGEN_Employees.CompElmentIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEN_Employees.CompElmentIDColumn] = value;
                }
            }
            
            public short EmployeeStatus {
                get {
                    return ((short)(this[this.tableGEN_Employees.EmployeeStatusColumn]));
                }
                set {
                    this[this.tableGEN_Employees.EmployeeStatusColumn] = value;
                }
            }
            
            public System.DateTime EmpHireDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableGEN_Employees.EmpHireDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEN_Employees.EmpHireDateColumn] = value;
                }
            }

            public System.DateTime EmpTerminationDate
            {
                get
                {
                    try
                    {
                        return ((System.DateTime)(this[this.tableGEN_Employees.EmpTerminationDateColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableGEN_Employees.EmpTerminationDateColumn] = value;
                }
            }
            
            public string EmpCode {
                get {
                    try {
                        return ((string)(this[this.tableGEN_Employees.EmpCodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEN_Employees.EmpCodeColumn] = value;
                }
            }
            
            public short ContTypeID {
                get {
                    try {
                        return ((short)(this[this.tableGEN_Employees.ContTypeIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEN_Employees.ContTypeIDColumn] = value;
                }
            }
            
            public int UserID {
                get {
                    try {
                        return ((int)(this[this.tableGEN_Employees.UserIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEN_Employees.UserIDColumn] = value;
                }
            }
            
            public string FirstName {
                get {
                    try {
                        return ((string)(this[this.tableGEN_Employees.FirstNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEN_Employees.FirstNameColumn] = value;
                }
            }
            
            public string MiddleName {
                get {
                    try {
                        return ((string)(this[this.tableGEN_Employees.MiddleNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEN_Employees.MiddleNameColumn] = value;
                }
            }
            
            public string LastName {
                get {
                    try {
                        return ((string)(this[this.tableGEN_Employees.LastNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEN_Employees.LastNameColumn] = value;
                }
            }
            
            public string Fullname {
                get {
                    return ((string)(this[this.tableGEN_Employees.FullnameColumn]));
                }
                set {
                    this[this.tableGEN_Employees.FullnameColumn] = value;
                }
            }
            public int FileIDHR
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableGEN_Employees.FileIDHRColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableGEN_Employees.FileIDHRColumn] = value;
                }
            }
            
            public bool IsJobTitleIDNull() {
                return this.IsNull(this.tableGEN_Employees.JobTitleIDColumn);
            }
            
            public void SetJobTitleIDNull() {
                this[this.tableGEN_Employees.JobTitleIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsFileIDNull() {
                return this.IsNull(this.tableGEN_Employees.FileIDColumn);
            }
            
            public void SetFileIDNull() {
                this[this.tableGEN_Employees.FileIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsCompElmentIDNull() {
                return this.IsNull(this.tableGEN_Employees.CompElmentIDColumn);
            }
            
            public void SetCompElmentIDNull() {
                this[this.tableGEN_Employees.CompElmentIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsEmpHireDateNull() {
                return this.IsNull(this.tableGEN_Employees.EmpHireDateColumn);
            }
            
            public void SetEmpHireDateNull() {
                this[this.tableGEN_Employees.EmpHireDateColumn] = System.Convert.DBNull;
            }

            public bool IsEmpTerminationDateNull()
            {
                return this.IsNull(this.tableGEN_Employees.EmpTerminationDateColumn);
            }

            public void SetEmpTerminationDateNull()
            {
                this[this.tableGEN_Employees.EmpTerminationDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsEmpCodeNull() {
                return this.IsNull(this.tableGEN_Employees.EmpCodeColumn);
            }
            
            public void SetEmpCodeNull() {
                this[this.tableGEN_Employees.EmpCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsContTypeIDNull() {
                return this.IsNull(this.tableGEN_Employees.ContTypeIDColumn);
            }
            
            public void SetContTypeIDNull() {
                this[this.tableGEN_Employees.ContTypeIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsUserIDNull() {
                return this.IsNull(this.tableGEN_Employees.UserIDColumn);
            }
            
            public void SetUserIDNull() {
                this[this.tableGEN_Employees.UserIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsFirstNameNull() {
                return this.IsNull(this.tableGEN_Employees.FirstNameColumn);
            }
            
            public void SetFirstNameNull() {
                this[this.tableGEN_Employees.FirstNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsMiddleNameNull() {
                return this.IsNull(this.tableGEN_Employees.MiddleNameColumn);
            }
            
            public void SetMiddleNameNull() {
                this[this.tableGEN_Employees.MiddleNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsLastNameNull() {
                return this.IsNull(this.tableGEN_Employees.LastNameColumn);
            }
            
            public void SetLastNameNull() {
                this[this.tableGEN_Employees.LastNameColumn] = System.Convert.DBNull;
            }
            public bool IsFileIDHRNull()
            {
                return this.IsNull(this.tableGEN_Employees.FileIDHRColumn);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GEN_EmployeesRowChangeEvent : EventArgs {
            
            private GEN_EmployeesRow eventRow;
            
            private DataRowAction eventAction;
            
            public GEN_EmployeesRowChangeEvent(GEN_EmployeesRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public GEN_EmployeesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
