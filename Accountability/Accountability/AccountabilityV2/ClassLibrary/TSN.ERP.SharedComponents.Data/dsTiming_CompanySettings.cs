//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace TSN.ERP.SharedComponents.Data {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsTiming_CompanySettings : DataSet {
        
        private Timing_CompanySettingsDataTable tableTiming_CompanySettings;
        
        public dsTiming_CompanySettings() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsTiming_CompanySettings(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Timing_CompanySettings"] != null)) {
                    this.Tables.Add(new Timing_CompanySettingsDataTable(ds.Tables["Timing_CompanySettings"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Timing_CompanySettingsDataTable Timing_CompanySettings {
            get {
                return this.tableTiming_CompanySettings;
            }
        }
        
        public override DataSet Clone() {
            dsTiming_CompanySettings cln = ((dsTiming_CompanySettings)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Timing_CompanySettings"] != null)) {
                this.Tables.Add(new Timing_CompanySettingsDataTable(ds.Tables["Timing_CompanySettings"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableTiming_CompanySettings = ((Timing_CompanySettingsDataTable)(this.Tables["Timing_CompanySettings"]));
            if ((this.tableTiming_CompanySettings != null)) {
                this.tableTiming_CompanySettings.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "dsTiming_CompanySettings";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/dsTiming_CompanySettings.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableTiming_CompanySettings = new Timing_CompanySettingsDataTable();
            this.Tables.Add(this.tableTiming_CompanySettings);
        }
        
        private bool ShouldSerializeTiming_CompanySettings() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void Timing_CompanySettingsRowChangeEventHandler(object sender, Timing_CompanySettingsRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Timing_CompanySettingsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnSerial;
            
            private DataColumn columnMailServer;
            
            private DataColumn columnMonthStart;
            
            private DataColumn columnMonthEnd;
            
            private DataColumn columnMaxHoursPerDay;
            
            private DataColumn columnMaxHoursPerWeek;
            
            internal Timing_CompanySettingsDataTable() : 
                    base("Timing_CompanySettings") {
                this.InitClass();
            }
            
            internal Timing_CompanySettingsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn SerialColumn {
                get {
                    return this.columnSerial;
                }
            }
            
            internal DataColumn MailServerColumn {
                get {
                    return this.columnMailServer;
                }
            }
            
            internal DataColumn MonthStartColumn {
                get {
                    return this.columnMonthStart;
                }
            }
            
            internal DataColumn MonthEndColumn {
                get {
                    return this.columnMonthEnd;
                }
            }
            
            internal DataColumn MaxHoursPerDayColumn {
                get {
                    return this.columnMaxHoursPerDay;
                }
            }
            
            internal DataColumn MaxHoursPerWeekColumn {
                get {
                    return this.columnMaxHoursPerWeek;
                }
            }
            
            public Timing_CompanySettingsRow this[int index] {
                get {
                    return ((Timing_CompanySettingsRow)(this.Rows[index]));
                }
            }
            
            public event Timing_CompanySettingsRowChangeEventHandler Timing_CompanySettingsRowChanged;
            
            public event Timing_CompanySettingsRowChangeEventHandler Timing_CompanySettingsRowChanging;
            
            public event Timing_CompanySettingsRowChangeEventHandler Timing_CompanySettingsRowDeleted;
            
            public event Timing_CompanySettingsRowChangeEventHandler Timing_CompanySettingsRowDeleting;
            
            public void AddTiming_CompanySettingsRow(Timing_CompanySettingsRow row) {
                this.Rows.Add(row);
            }
            
            public Timing_CompanySettingsRow AddTiming_CompanySettingsRow(int Serial, string MailServer, int MonthStart, int MonthEnd, System.Decimal MaxHoursPerDay, System.Decimal MaxHoursPerWeek) {
                Timing_CompanySettingsRow rowTiming_CompanySettingsRow = ((Timing_CompanySettingsRow)(this.NewRow()));
                rowTiming_CompanySettingsRow.ItemArray = new object[] {
                        Serial,
                        MailServer,
                        MonthStart,
                        MonthEnd,
                        MaxHoursPerDay,
                        MaxHoursPerWeek};
                this.Rows.Add(rowTiming_CompanySettingsRow);
                return rowTiming_CompanySettingsRow;
            }
            
            public Timing_CompanySettingsRow FindBySerial(int Serial) {
                return ((Timing_CompanySettingsRow)(this.Rows.Find(new object[] {
                            Serial})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                Timing_CompanySettingsDataTable cln = ((Timing_CompanySettingsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new Timing_CompanySettingsDataTable();
            }
            
            internal void InitVars() {
                this.columnSerial = this.Columns["Serial"];
                this.columnMailServer = this.Columns["MailServer"];
                this.columnMonthStart = this.Columns["MonthStart"];
                this.columnMonthEnd = this.Columns["MonthEnd"];
                this.columnMaxHoursPerDay = this.Columns["MaxHoursPerDay"];
                this.columnMaxHoursPerWeek = this.Columns["MaxHoursPerWeek"];
            }
            
            private void InitClass() {
                this.columnSerial = new DataColumn("Serial", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSerial);
                this.columnMailServer = new DataColumn("MailServer", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMailServer);
                this.columnMonthStart = new DataColumn("MonthStart", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMonthStart);
                this.columnMonthEnd = new DataColumn("MonthEnd", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMonthEnd);
                this.columnMaxHoursPerDay = new DataColumn("MaxHoursPerDay", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMaxHoursPerDay);
                this.columnMaxHoursPerWeek = new DataColumn("MaxHoursPerWeek", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMaxHoursPerWeek);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnSerial}, true));
                this.columnSerial.AllowDBNull = false;
                this.columnSerial.Unique = true;
                this.columnMonthStart.AllowDBNull = false;
                this.columnMonthEnd.AllowDBNull = false;
            }
            
            public Timing_CompanySettingsRow NewTiming_CompanySettingsRow() {
                return ((Timing_CompanySettingsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new Timing_CompanySettingsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(Timing_CompanySettingsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Timing_CompanySettingsRowChanged != null)) {
                    this.Timing_CompanySettingsRowChanged(this, new Timing_CompanySettingsRowChangeEvent(((Timing_CompanySettingsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Timing_CompanySettingsRowChanging != null)) {
                    this.Timing_CompanySettingsRowChanging(this, new Timing_CompanySettingsRowChangeEvent(((Timing_CompanySettingsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Timing_CompanySettingsRowDeleted != null)) {
                    this.Timing_CompanySettingsRowDeleted(this, new Timing_CompanySettingsRowChangeEvent(((Timing_CompanySettingsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Timing_CompanySettingsRowDeleting != null)) {
                    this.Timing_CompanySettingsRowDeleting(this, new Timing_CompanySettingsRowChangeEvent(((Timing_CompanySettingsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTiming_CompanySettingsRow(Timing_CompanySettingsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Timing_CompanySettingsRow : DataRow {
            
            private Timing_CompanySettingsDataTable tableTiming_CompanySettings;
            
            internal Timing_CompanySettingsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableTiming_CompanySettings = ((Timing_CompanySettingsDataTable)(this.Table));
            }
            
            public int Serial {
                get {
                    return ((int)(this[this.tableTiming_CompanySettings.SerialColumn]));
                }
                set {
                    this[this.tableTiming_CompanySettings.SerialColumn] = value;
                }
            }
            
            public string MailServer {
                get {
                    try {
                        return ((string)(this[this.tableTiming_CompanySettings.MailServerColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTiming_CompanySettings.MailServerColumn] = value;
                }
            }
            
            public int MonthStart {
                get {
                    return ((int)(this[this.tableTiming_CompanySettings.MonthStartColumn]));
                }
                set {
                    this[this.tableTiming_CompanySettings.MonthStartColumn] = value;
                }
            }
            
            public int MonthEnd {
                get {
                    return ((int)(this[this.tableTiming_CompanySettings.MonthEndColumn]));
                }
                set {
                    this[this.tableTiming_CompanySettings.MonthEndColumn] = value;
                }
            }
            
            public System.Decimal MaxHoursPerDay {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableTiming_CompanySettings.MaxHoursPerDayColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTiming_CompanySettings.MaxHoursPerDayColumn] = value;
                }
            }
            
            public System.Decimal MaxHoursPerWeek {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableTiming_CompanySettings.MaxHoursPerWeekColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTiming_CompanySettings.MaxHoursPerWeekColumn] = value;
                }
            }
            
            public bool IsMailServerNull() {
                return this.IsNull(this.tableTiming_CompanySettings.MailServerColumn);
            }
            
            public void SetMailServerNull() {
                this[this.tableTiming_CompanySettings.MailServerColumn] = System.Convert.DBNull;
            }
            
            public bool IsMaxHoursPerDayNull() {
                return this.IsNull(this.tableTiming_CompanySettings.MaxHoursPerDayColumn);
            }
            
            public void SetMaxHoursPerDayNull() {
                this[this.tableTiming_CompanySettings.MaxHoursPerDayColumn] = System.Convert.DBNull;
            }
            
            public bool IsMaxHoursPerWeekNull() {
                return this.IsNull(this.tableTiming_CompanySettings.MaxHoursPerWeekColumn);
            }
            
            public void SetMaxHoursPerWeekNull() {
                this[this.tableTiming_CompanySettings.MaxHoursPerWeekColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Timing_CompanySettingsRowChangeEvent : EventArgs {
            
            private Timing_CompanySettingsRow eventRow;
            
            private DataRowAction eventAction;
            
            public Timing_CompanySettingsRowChangeEvent(Timing_CompanySettingsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public Timing_CompanySettingsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
