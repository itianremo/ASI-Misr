//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace TSN.ERP.SharedComponents.Data {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsAssignments : DataSet {
        
        private GEN_AssignmentsDataTable tableGEN_Assignments;
        
        public dsAssignments() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsAssignments(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["GEN_Assignments"] != null)) {
                    this.Tables.Add(new GEN_AssignmentsDataTable(ds.Tables["GEN_Assignments"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GEN_AssignmentsDataTable GEN_Assignments {
            get {
                return this.tableGEN_Assignments;
            }
        }
        
        public override DataSet Clone() {
            dsAssignments cln = ((dsAssignments)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["GEN_Assignments"] != null)) {
                this.Tables.Add(new GEN_AssignmentsDataTable(ds.Tables["GEN_Assignments"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableGEN_Assignments = ((GEN_AssignmentsDataTable)(this.Tables["GEN_Assignments"]));
            if ((this.tableGEN_Assignments != null)) {
                this.tableGEN_Assignments.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "dsAssignments";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/dsAssignments.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableGEN_Assignments = new GEN_AssignmentsDataTable();
            this.Tables.Add(this.tableGEN_Assignments);
        }
        
        private bool ShouldSerializeGEN_Assignments() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void GEN_AssignmentsRowChangeEventHandler(object sender, GEN_AssignmentsRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GEN_AssignmentsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnAssignmentD;
            
            private DataColumn columnTaskID;
            
            private DataColumn columnResponsID;
            
            private DataColumn columnContactID;
            
            private DataColumn columnAssignmentDate;
            
            private DataColumn columnAssginedBy;
            
            private DataColumn columnAssignmentPriority;
            
            private DataColumn columnAssignmentStatus;
            
            private DataColumn columnAssignmentEvalutation;
            
            private DataColumn columnAssignmentScore;
            
            internal GEN_AssignmentsDataTable() : 
                    base("GEN_Assignments") {
                this.InitClass();
            }
            
            internal GEN_AssignmentsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn AssignmentDColumn {
                get {
                    return this.columnAssignmentD;
                }
            }
            
            internal DataColumn TaskIDColumn {
                get {
                    return this.columnTaskID;
                }
            }
            
            internal DataColumn ResponsIDColumn {
                get {
                    return this.columnResponsID;
                }
            }
            
            internal DataColumn ContactIDColumn {
                get {
                    return this.columnContactID;
                }
            }
            
            internal DataColumn AssignmentDateColumn {
                get {
                    return this.columnAssignmentDate;
                }
            }
            
            internal DataColumn AssginedByColumn {
                get {
                    return this.columnAssginedBy;
                }
            }
            
            internal DataColumn AssignmentPriorityColumn {
                get {
                    return this.columnAssignmentPriority;
                }
            }
            
            internal DataColumn AssignmentStatusColumn {
                get {
                    return this.columnAssignmentStatus;
                }
            }
            
            internal DataColumn AssignmentEvalutationColumn {
                get {
                    return this.columnAssignmentEvalutation;
                }
            }
            
            internal DataColumn AssignmentScoreColumn {
                get {
                    return this.columnAssignmentScore;
                }
            }
            
            public GEN_AssignmentsRow this[int index] {
                get {
                    return ((GEN_AssignmentsRow)(this.Rows[index]));
                }
            }
            
            public event GEN_AssignmentsRowChangeEventHandler GEN_AssignmentsRowChanged;
            
            public event GEN_AssignmentsRowChangeEventHandler GEN_AssignmentsRowChanging;
            
            public event GEN_AssignmentsRowChangeEventHandler GEN_AssignmentsRowDeleted;
            
            public event GEN_AssignmentsRowChangeEventHandler GEN_AssignmentsRowDeleting;
            
            public void AddGEN_AssignmentsRow(GEN_AssignmentsRow row) {
                this.Rows.Add(row);
            }
            
            public GEN_AssignmentsRow AddGEN_AssignmentsRow(int AssignmentD, int TaskID, int ResponsID, int ContactID, System.DateTime AssignmentDate, int AssginedBy, int AssignmentPriority, short AssignmentStatus, short AssignmentEvalutation, short AssignmentScore) {
                GEN_AssignmentsRow rowGEN_AssignmentsRow = ((GEN_AssignmentsRow)(this.NewRow()));
                rowGEN_AssignmentsRow.ItemArray = new object[] {
                        AssignmentD,
                        TaskID,
                        ResponsID,
                        ContactID,
                        AssignmentDate,
                        AssginedBy,
                        AssignmentPriority,
                        AssignmentStatus,
                        AssignmentEvalutation,
                        AssignmentScore};
                this.Rows.Add(rowGEN_AssignmentsRow);
                return rowGEN_AssignmentsRow;
            }
            
            public GEN_AssignmentsRow FindByAssignmentD(int AssignmentD) {
                return ((GEN_AssignmentsRow)(this.Rows.Find(new object[] {
                            AssignmentD})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                GEN_AssignmentsDataTable cln = ((GEN_AssignmentsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new GEN_AssignmentsDataTable();
            }
            
            internal void InitVars() {
                this.columnAssignmentD = this.Columns["AssignmentD"];
                this.columnTaskID = this.Columns["TaskID"];
                this.columnResponsID = this.Columns["ResponsID"];
                this.columnContactID = this.Columns["ContactID"];
                this.columnAssignmentDate = this.Columns["AssignmentDate"];
                this.columnAssginedBy = this.Columns["AssginedBy"];
                this.columnAssignmentPriority = this.Columns["AssignmentPriority"];
                this.columnAssignmentStatus = this.Columns["AssignmentStatus"];
                this.columnAssignmentEvalutation = this.Columns["AssignmentEvalutation"];
                this.columnAssignmentScore = this.Columns["AssignmentScore"];
            }
            
            private void InitClass() {
                this.columnAssignmentD = new DataColumn("AssignmentD", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAssignmentD);
                this.columnTaskID = new DataColumn("TaskID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTaskID);
                this.columnResponsID = new DataColumn("ResponsID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnResponsID);
                this.columnContactID = new DataColumn("ContactID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnContactID);
                this.columnAssignmentDate = new DataColumn("AssignmentDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAssignmentDate);
                this.columnAssginedBy = new DataColumn("AssginedBy", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAssginedBy);
                this.columnAssignmentPriority = new DataColumn("AssignmentPriority", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAssignmentPriority);
                this.columnAssignmentStatus = new DataColumn("AssignmentStatus", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAssignmentStatus);
                this.columnAssignmentEvalutation = new DataColumn("AssignmentEvalutation", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAssignmentEvalutation);
                this.columnAssignmentScore = new DataColumn("AssignmentScore", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAssignmentScore);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnAssignmentD}, true));
                this.columnAssignmentD.AllowDBNull = false;
                this.columnAssignmentD.Unique = true;
                this.columnAssignmentDate.AllowDBNull = false;
                this.columnAssginedBy.AllowDBNull = false;
                this.columnAssignmentStatus.AllowDBNull = false;
            }
            
            public GEN_AssignmentsRow NewGEN_AssignmentsRow() {
                return ((GEN_AssignmentsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new GEN_AssignmentsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(GEN_AssignmentsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GEN_AssignmentsRowChanged != null)) {
                    this.GEN_AssignmentsRowChanged(this, new GEN_AssignmentsRowChangeEvent(((GEN_AssignmentsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GEN_AssignmentsRowChanging != null)) {
                    this.GEN_AssignmentsRowChanging(this, new GEN_AssignmentsRowChangeEvent(((GEN_AssignmentsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GEN_AssignmentsRowDeleted != null)) {
                    this.GEN_AssignmentsRowDeleted(this, new GEN_AssignmentsRowChangeEvent(((GEN_AssignmentsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GEN_AssignmentsRowDeleting != null)) {
                    this.GEN_AssignmentsRowDeleting(this, new GEN_AssignmentsRowChangeEvent(((GEN_AssignmentsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveGEN_AssignmentsRow(GEN_AssignmentsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GEN_AssignmentsRow : DataRow {
            
            private GEN_AssignmentsDataTable tableGEN_Assignments;
            
            internal GEN_AssignmentsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableGEN_Assignments = ((GEN_AssignmentsDataTable)(this.Table));
            }
            
            public int AssignmentD {
                get {
                    return ((int)(this[this.tableGEN_Assignments.AssignmentDColumn]));
                }
                set {
                    this[this.tableGEN_Assignments.AssignmentDColumn] = value;
                }
            }
            
            public int TaskID {
                get {
                    try {
                        return ((int)(this[this.tableGEN_Assignments.TaskIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEN_Assignments.TaskIDColumn] = value;
                }
            }
            
            public int ResponsID {
                get {
                    try {
                        return ((int)(this[this.tableGEN_Assignments.ResponsIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEN_Assignments.ResponsIDColumn] = value;
                }
            }
            
            public int ContactID {
                get {
                    try {
                        return ((int)(this[this.tableGEN_Assignments.ContactIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEN_Assignments.ContactIDColumn] = value;
                }
            }
            
            public System.DateTime AssignmentDate {
                get {
                    return ((System.DateTime)(this[this.tableGEN_Assignments.AssignmentDateColumn]));
                }
                set {
                    this[this.tableGEN_Assignments.AssignmentDateColumn] = value;
                }
            }
            
            public int AssginedBy {
                get {
                    return ((int)(this[this.tableGEN_Assignments.AssginedByColumn]));
                }
                set {
                    this[this.tableGEN_Assignments.AssginedByColumn] = value;
                }
            }
            
            public int AssignmentPriority {
                get {
                    try {
                        return ((int)(this[this.tableGEN_Assignments.AssignmentPriorityColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEN_Assignments.AssignmentPriorityColumn] = value;
                }
            }
            
            public short AssignmentStatus {
                get {
                    return ((short)(this[this.tableGEN_Assignments.AssignmentStatusColumn]));
                }
                set {
                    this[this.tableGEN_Assignments.AssignmentStatusColumn] = value;
                }
            }
            
            public short AssignmentEvalutation {
                get {
                    try {
                        return ((short)(this[this.tableGEN_Assignments.AssignmentEvalutationColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEN_Assignments.AssignmentEvalutationColumn] = value;
                }
            }
            
            public short AssignmentScore {
                get {
                    try {
                        return ((short)(this[this.tableGEN_Assignments.AssignmentScoreColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEN_Assignments.AssignmentScoreColumn] = value;
                }
            }
            
            public bool IsTaskIDNull() {
                return this.IsNull(this.tableGEN_Assignments.TaskIDColumn);
            }
            
            public void SetTaskIDNull() {
                this[this.tableGEN_Assignments.TaskIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsResponsIDNull() {
                return this.IsNull(this.tableGEN_Assignments.ResponsIDColumn);
            }
            
            public void SetResponsIDNull() {
                this[this.tableGEN_Assignments.ResponsIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsContactIDNull() {
                return this.IsNull(this.tableGEN_Assignments.ContactIDColumn);
            }
            
            public void SetContactIDNull() {
                this[this.tableGEN_Assignments.ContactIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsAssignmentPriorityNull() {
                return this.IsNull(this.tableGEN_Assignments.AssignmentPriorityColumn);
            }
            
            public void SetAssignmentPriorityNull() {
                this[this.tableGEN_Assignments.AssignmentPriorityColumn] = System.Convert.DBNull;
            }
            
            public bool IsAssignmentEvalutationNull() {
                return this.IsNull(this.tableGEN_Assignments.AssignmentEvalutationColumn);
            }
            
            public void SetAssignmentEvalutationNull() {
                this[this.tableGEN_Assignments.AssignmentEvalutationColumn] = System.Convert.DBNull;
            }
            
            public bool IsAssignmentScoreNull() {
                return this.IsNull(this.tableGEN_Assignments.AssignmentScoreColumn);
            }
            
            public void SetAssignmentScoreNull() {
                this[this.tableGEN_Assignments.AssignmentScoreColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GEN_AssignmentsRowChangeEvent : EventArgs {
            
            private GEN_AssignmentsRow eventRow;
            
            private DataRowAction eventAction;
            
            public GEN_AssignmentsRowChangeEvent(GEN_AssignmentsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public GEN_AssignmentsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
