//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace TSN.ERP.SharedComponents.Data {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsAccountabilitySheet : DataSet {
        
        private EmpAccSheetDataTable tableEmpAccSheet;
        
        private EmployeeDataDataTable tableEmployeeData;
        
        private WeekDataDataTable tableWeekData;
        
        private WeekNotesDataTable tableWeekNotes;
        
        public dsAccountabilitySheet() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsAccountabilitySheet(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["EmpAccSheet"] != null)) {
                    this.Tables.Add(new EmpAccSheetDataTable(ds.Tables["EmpAccSheet"]));
                }
                if ((ds.Tables["EmployeeData"] != null)) {
                    this.Tables.Add(new EmployeeDataDataTable(ds.Tables["EmployeeData"]));
                }
                if ((ds.Tables["WeekData"] != null)) {
                    this.Tables.Add(new WeekDataDataTable(ds.Tables["WeekData"]));
                }
                if ((ds.Tables["WeekNotes"] != null)) {
                    this.Tables.Add(new WeekNotesDataTable(ds.Tables["WeekNotes"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EmpAccSheetDataTable EmpAccSheet {
            get {
                return this.tableEmpAccSheet;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EmployeeDataDataTable EmployeeData {
            get {
                return this.tableEmployeeData;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public WeekDataDataTable WeekData {
            get {
                return this.tableWeekData;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public WeekNotesDataTable WeekNotes {
            get {
                return this.tableWeekNotes;
            }
        }
        
        public override DataSet Clone() {
            dsAccountabilitySheet cln = ((dsAccountabilitySheet)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["EmpAccSheet"] != null)) {
                this.Tables.Add(new EmpAccSheetDataTable(ds.Tables["EmpAccSheet"]));
            }
            if ((ds.Tables["EmployeeData"] != null)) {
                this.Tables.Add(new EmployeeDataDataTable(ds.Tables["EmployeeData"]));
            }
            if ((ds.Tables["WeekData"] != null)) {
                this.Tables.Add(new WeekDataDataTable(ds.Tables["WeekData"]));
            }
            if ((ds.Tables["WeekNotes"] != null)) {
                this.Tables.Add(new WeekNotesDataTable(ds.Tables["WeekNotes"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableEmpAccSheet = ((EmpAccSheetDataTable)(this.Tables["EmpAccSheet"]));
            if ((this.tableEmpAccSheet != null)) {
                this.tableEmpAccSheet.InitVars();
            }
            this.tableEmployeeData = ((EmployeeDataDataTable)(this.Tables["EmployeeData"]));
            if ((this.tableEmployeeData != null)) {
                this.tableEmployeeData.InitVars();
            }
            this.tableWeekData = ((WeekDataDataTable)(this.Tables["WeekData"]));
            if ((this.tableWeekData != null)) {
                this.tableWeekData.InitVars();
            }
            this.tableWeekNotes = ((WeekNotesDataTable)(this.Tables["WeekNotes"]));
            if ((this.tableWeekNotes != null)) {
                this.tableWeekNotes.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "dsAccountabilitySheet";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/dsAccountabilitySheet.xsd";
            this.Locale = new System.Globalization.CultureInfo("ar-EG");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableEmpAccSheet = new EmpAccSheetDataTable();
            this.Tables.Add(this.tableEmpAccSheet);
            this.tableEmployeeData = new EmployeeDataDataTable();
            this.Tables.Add(this.tableEmployeeData);
            this.tableWeekData = new WeekDataDataTable();
            this.Tables.Add(this.tableWeekData);
            this.tableWeekNotes = new WeekNotesDataTable();
            this.Tables.Add(this.tableWeekNotes);
        }
        
        private bool ShouldSerializeEmpAccSheet() {
            return false;
        }
        
        private bool ShouldSerializeEmployeeData() {
            return false;
        }
        
        private bool ShouldSerializeWeekData() {
            return false;
        }
        
        private bool ShouldSerializeWeekNotes() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void EmpAccSheetRowChangeEventHandler(object sender, EmpAccSheetRowChangeEvent e);
        
        public delegate void EmployeeDataRowChangeEventHandler(object sender, EmployeeDataRowChangeEvent e);
        
        public delegate void WeekDataRowChangeEventHandler(object sender, WeekDataRowChangeEvent e);
        
        public delegate void WeekNotesRowChangeEventHandler(object sender, WeekNotesRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class EmpAccSheetDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnTaskpriority;
            
            private DataColumn columntaskname;
            
            private DataColumn columnunit;
            
            private DataColumn columnsun;
            
            private DataColumn columnmon;
            
            private DataColumn columntue;
            
            private DataColumn columnwen;
            
            private DataColumn columnthr;
            
            private DataColumn columnfri;
            
            private DataColumn columnsat;
            
            private DataColumn columnweek;
            
            private DataColumn columnStrongID;
            
            private DataColumn columnRecoredType;
            
            private DataColumn columnResponsPrioity;
            
            private DataColumn columnParentProjectID;
            
            private DataColumn columnParentResponsID;
            
            private DataColumn columnAssStatus;
            
            private DataColumn columndescProject;
            
            private DataColumn columndescReponse;
            
            private DataColumn columndescNote;
            
            internal EmpAccSheetDataTable() : 
                    base("EmpAccSheet") {
                this.InitClass();
            }
            
            internal EmpAccSheetDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn TaskpriorityColumn {
                get {
                    return this.columnTaskpriority;
                }
            }
            
            internal DataColumn tasknameColumn {
                get {
                    return this.columntaskname;
                }
            }
            
            internal DataColumn unitColumn {
                get {
                    return this.columnunit;
                }
            }
            
            internal DataColumn sunColumn {
                get {
                    return this.columnsun;
                }
            }
            
            internal DataColumn monColumn {
                get {
                    return this.columnmon;
                }
            }
            
            internal DataColumn tueColumn {
                get {
                    return this.columntue;
                }
            }
            
            internal DataColumn wenColumn {
                get {
                    return this.columnwen;
                }
            }
            
            internal DataColumn thrColumn {
                get {
                    return this.columnthr;
                }
            }
            
            internal DataColumn friColumn {
                get {
                    return this.columnfri;
                }
            }
            
            internal DataColumn satColumn {
                get {
                    return this.columnsat;
                }
            }
            
            internal DataColumn weekColumn {
                get {
                    return this.columnweek;
                }
            }
            
            internal DataColumn StrongIDColumn {
                get {
                    return this.columnStrongID;
                }
            }
            
            internal DataColumn RecoredTypeColumn {
                get {
                    return this.columnRecoredType;
                }
            }
            
            internal DataColumn ResponsPrioityColumn {
                get {
                    return this.columnResponsPrioity;
                }
            }
            
            internal DataColumn ParentProjectIDColumn {
                get {
                    return this.columnParentProjectID;
                }
            }
            
            internal DataColumn ParentResponsIDColumn {
                get {
                    return this.columnParentResponsID;
                }
            }
            
            internal DataColumn AssStatusColumn {
                get {
                    return this.columnAssStatus;
                }
            }
            
            internal DataColumn descProjectColumn {
                get {
                    return this.columndescProject;
                }
            }
            
            internal DataColumn descReponseColumn {
                get {
                    return this.columndescReponse;
                }
            }
            
            internal DataColumn descNoteColumn {
                get {
                    return this.columndescNote;
                }
            }
            
            public EmpAccSheetRow this[int index] {
                get {
                    return ((EmpAccSheetRow)(this.Rows[index]));
                }
            }
            
            public event EmpAccSheetRowChangeEventHandler EmpAccSheetRowChanged;
            
            public event EmpAccSheetRowChangeEventHandler EmpAccSheetRowChanging;
            
            public event EmpAccSheetRowChangeEventHandler EmpAccSheetRowDeleted;
            
            public event EmpAccSheetRowChangeEventHandler EmpAccSheetRowDeleting;
            
            public void AddEmpAccSheetRow(EmpAccSheetRow row) {
                this.Rows.Add(row);
            }
            
            public EmpAccSheetRow AddEmpAccSheetRow(
                        long Taskpriority, 
                        string taskname, 
                        int unit, 
                        System.Double sun, 
                        System.Double mon, 
                        System.Double tue, 
                        System.Double wen, 
                        System.Double thr, 
                        System.Double fri, 
                        System.Double sat, 
                        System.Double week, 
                        long StrongID, 
                        long RecoredType, 
                        long ResponsPrioity, 
                        long ParentProjectID, 
                        long ParentResponsID, 
                        long AssStatus, 
                        string descProject, 
                        string descReponse, 
                        string descNote) {
                EmpAccSheetRow rowEmpAccSheetRow = ((EmpAccSheetRow)(this.NewRow()));
                rowEmpAccSheetRow.ItemArray = new object[] {
                        Taskpriority,
                        taskname,
                        unit,
                        sun,
                        mon,
                        tue,
                        wen,
                        thr,
                        fri,
                        sat,
                        week,
                        StrongID,
                        RecoredType,
                        ResponsPrioity,
                        ParentProjectID,
                        ParentResponsID,
                        AssStatus,
                        descProject,
                        descReponse,
                        descNote};
                this.Rows.Add(rowEmpAccSheetRow);
                return rowEmpAccSheetRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                EmpAccSheetDataTable cln = ((EmpAccSheetDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new EmpAccSheetDataTable();
            }
            
            internal void InitVars() {
                this.columnTaskpriority = this.Columns["Taskpriority"];
                this.columntaskname = this.Columns["taskname"];
                this.columnunit = this.Columns["unit"];
                this.columnsun = this.Columns["sun"];
                this.columnmon = this.Columns["mon"];
                this.columntue = this.Columns["tue"];
                this.columnwen = this.Columns["wen"];
                this.columnthr = this.Columns["thr"];
                this.columnfri = this.Columns["fri"];
                this.columnsat = this.Columns["sat"];
                this.columnweek = this.Columns["week"];
                this.columnStrongID = this.Columns["StrongID"];
                this.columnRecoredType = this.Columns["RecoredType"];
                this.columnResponsPrioity = this.Columns["ResponsPrioity"];
                this.columnParentProjectID = this.Columns["ParentProjectID"];
                this.columnParentResponsID = this.Columns["ParentResponsID"];
                this.columnAssStatus = this.Columns["AssStatus"];
                this.columndescProject = this.Columns["descProject"];
                this.columndescReponse = this.Columns["descReponse"];
                this.columndescNote = this.Columns["descNote"];
            }
            
            private void InitClass() {
                this.columnTaskpriority = new DataColumn("Taskpriority", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTaskpriority);
                this.columntaskname = new DataColumn("taskname", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntaskname);
                this.columnunit = new DataColumn("unit", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnunit);
                this.columnsun = new DataColumn("sun", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnsun);
                this.columnmon = new DataColumn("mon", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnmon);
                this.columntue = new DataColumn("tue", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntue);
                this.columnwen = new DataColumn("wen", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnwen);
                this.columnthr = new DataColumn("thr", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnthr);
                this.columnfri = new DataColumn("fri", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnfri);
                this.columnsat = new DataColumn("sat", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnsat);
                this.columnweek = new DataColumn("week", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnweek);
                this.columnStrongID = new DataColumn("StrongID", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStrongID);
                this.columnRecoredType = new DataColumn("RecoredType", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRecoredType);
                this.columnResponsPrioity = new DataColumn("ResponsPrioity", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnResponsPrioity);
                this.columnParentProjectID = new DataColumn("ParentProjectID", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnParentProjectID);
                this.columnParentResponsID = new DataColumn("ParentResponsID", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnParentResponsID);
                this.columnAssStatus = new DataColumn("AssStatus", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAssStatus);
                this.columndescProject = new DataColumn("descProject", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndescProject);
                this.columndescReponse = new DataColumn("descReponse", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndescReponse);
                this.columndescNote = new DataColumn("descNote", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndescNote);
            }
            
            public EmpAccSheetRow NewEmpAccSheetRow() {
                return ((EmpAccSheetRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new EmpAccSheetRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(EmpAccSheetRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EmpAccSheetRowChanged != null)) {
                    this.EmpAccSheetRowChanged(this, new EmpAccSheetRowChangeEvent(((EmpAccSheetRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EmpAccSheetRowChanging != null)) {
                    this.EmpAccSheetRowChanging(this, new EmpAccSheetRowChangeEvent(((EmpAccSheetRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EmpAccSheetRowDeleted != null)) {
                    this.EmpAccSheetRowDeleted(this, new EmpAccSheetRowChangeEvent(((EmpAccSheetRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EmpAccSheetRowDeleting != null)) {
                    this.EmpAccSheetRowDeleting(this, new EmpAccSheetRowChangeEvent(((EmpAccSheetRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveEmpAccSheetRow(EmpAccSheetRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class EmpAccSheetRow : DataRow {
            
            private EmpAccSheetDataTable tableEmpAccSheet;
            
            internal EmpAccSheetRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableEmpAccSheet = ((EmpAccSheetDataTable)(this.Table));
            }
            
            public long Taskpriority {
                get {
                    try {
                        return ((long)(this[this.tableEmpAccSheet.TaskpriorityColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpAccSheet.TaskpriorityColumn] = value;
                }
            }
            
            public string taskname {
                get {
                    try {
                        return ((string)(this[this.tableEmpAccSheet.tasknameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpAccSheet.tasknameColumn] = value;
                }
            }
            
            public int unit {
                get {
                    try {
                        return ((int)(this[this.tableEmpAccSheet.unitColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpAccSheet.unitColumn] = value;
                }
            }
            
            public System.Double sun {
                get {
                    try {
                        return ((System.Double)(this[this.tableEmpAccSheet.sunColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpAccSheet.sunColumn] = value;
                }
            }
            
            public System.Double mon {
                get {
                    try {
                        return ((System.Double)(this[this.tableEmpAccSheet.monColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpAccSheet.monColumn] = value;
                }
            }
            
            public System.Double tue {
                get {
                    try {
                        return ((System.Double)(this[this.tableEmpAccSheet.tueColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpAccSheet.tueColumn] = value;
                }
            }
            
            public System.Double wen {
                get {
                    try {
                        return ((System.Double)(this[this.tableEmpAccSheet.wenColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpAccSheet.wenColumn] = value;
                }
            }
            
            public System.Double thr {
                get {
                    try {
                        return ((System.Double)(this[this.tableEmpAccSheet.thrColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpAccSheet.thrColumn] = value;
                }
            }
            
            public System.Double fri {
                get {
                    try {
                        return ((System.Double)(this[this.tableEmpAccSheet.friColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpAccSheet.friColumn] = value;
                }
            }
            
            public System.Double sat {
                get {
                    try {
                        return ((System.Double)(this[this.tableEmpAccSheet.satColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpAccSheet.satColumn] = value;
                }
            }
            
            public System.Double week {
                get {
                    try {
                        return ((System.Double)(this[this.tableEmpAccSheet.weekColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpAccSheet.weekColumn] = value;
                }
            }
            
            public long StrongID {
                get {
                    try {
                        return ((long)(this[this.tableEmpAccSheet.StrongIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpAccSheet.StrongIDColumn] = value;
                }
            }
            
            public long RecoredType {
                get {
                    try {
                        return ((long)(this[this.tableEmpAccSheet.RecoredTypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpAccSheet.RecoredTypeColumn] = value;
                }
            }
            
            public long ResponsPrioity {
                get {
                    try {
                        return ((long)(this[this.tableEmpAccSheet.ResponsPrioityColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpAccSheet.ResponsPrioityColumn] = value;
                }
            }
            
            public long ParentProjectID {
                get {
                    try {
                        return ((long)(this[this.tableEmpAccSheet.ParentProjectIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpAccSheet.ParentProjectIDColumn] = value;
                }
            }
            
            public long ParentResponsID {
                get {
                    try {
                        return ((long)(this[this.tableEmpAccSheet.ParentResponsIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpAccSheet.ParentResponsIDColumn] = value;
                }
            }
            
            public long AssStatus {
                get {
                    try {
                        return ((long)(this[this.tableEmpAccSheet.AssStatusColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpAccSheet.AssStatusColumn] = value;
                }
            }
            
            public string descProject {
                get {
                    try {
                        return ((string)(this[this.tableEmpAccSheet.descProjectColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpAccSheet.descProjectColumn] = value;
                }
            }
            
            public string descReponse {
                get {
                    try {
                        return ((string)(this[this.tableEmpAccSheet.descReponseColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpAccSheet.descReponseColumn] = value;
                }
            }
            
            public string descNote {
                get {
                    try {
                        return ((string)(this[this.tableEmpAccSheet.descNoteColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpAccSheet.descNoteColumn] = value;
                }
            }
            
            public bool IsTaskpriorityNull() {
                return this.IsNull(this.tableEmpAccSheet.TaskpriorityColumn);
            }
            
            public void SetTaskpriorityNull() {
                this[this.tableEmpAccSheet.TaskpriorityColumn] = System.Convert.DBNull;
            }
            
            public bool IstasknameNull() {
                return this.IsNull(this.tableEmpAccSheet.tasknameColumn);
            }
            
            public void SettasknameNull() {
                this[this.tableEmpAccSheet.tasknameColumn] = System.Convert.DBNull;
            }
            
            public bool IsunitNull() {
                return this.IsNull(this.tableEmpAccSheet.unitColumn);
            }
            
            public void SetunitNull() {
                this[this.tableEmpAccSheet.unitColumn] = System.Convert.DBNull;
            }
            
            public bool IssunNull() {
                return this.IsNull(this.tableEmpAccSheet.sunColumn);
            }
            
            public void SetsunNull() {
                this[this.tableEmpAccSheet.sunColumn] = System.Convert.DBNull;
            }
            
            public bool IsmonNull() {
                return this.IsNull(this.tableEmpAccSheet.monColumn);
            }
            
            public void SetmonNull() {
                this[this.tableEmpAccSheet.monColumn] = System.Convert.DBNull;
            }
            
            public bool IstueNull() {
                return this.IsNull(this.tableEmpAccSheet.tueColumn);
            }
            
            public void SettueNull() {
                this[this.tableEmpAccSheet.tueColumn] = System.Convert.DBNull;
            }
            
            public bool IswenNull() {
                return this.IsNull(this.tableEmpAccSheet.wenColumn);
            }
            
            public void SetwenNull() {
                this[this.tableEmpAccSheet.wenColumn] = System.Convert.DBNull;
            }
            
            public bool IsthrNull() {
                return this.IsNull(this.tableEmpAccSheet.thrColumn);
            }
            
            public void SetthrNull() {
                this[this.tableEmpAccSheet.thrColumn] = System.Convert.DBNull;
            }
            
            public bool IsfriNull() {
                return this.IsNull(this.tableEmpAccSheet.friColumn);
            }
            
            public void SetfriNull() {
                this[this.tableEmpAccSheet.friColumn] = System.Convert.DBNull;
            }
            
            public bool IssatNull() {
                return this.IsNull(this.tableEmpAccSheet.satColumn);
            }
            
            public void SetsatNull() {
                this[this.tableEmpAccSheet.satColumn] = System.Convert.DBNull;
            }
            
            public bool IsweekNull() {
                return this.IsNull(this.tableEmpAccSheet.weekColumn);
            }
            
            public void SetweekNull() {
                this[this.tableEmpAccSheet.weekColumn] = System.Convert.DBNull;
            }
            
            public bool IsStrongIDNull() {
                return this.IsNull(this.tableEmpAccSheet.StrongIDColumn);
            }
            
            public void SetStrongIDNull() {
                this[this.tableEmpAccSheet.StrongIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsRecoredTypeNull() {
                return this.IsNull(this.tableEmpAccSheet.RecoredTypeColumn);
            }
            
            public void SetRecoredTypeNull() {
                this[this.tableEmpAccSheet.RecoredTypeColumn] = System.Convert.DBNull;
            }
            
            public bool IsResponsPrioityNull() {
                return this.IsNull(this.tableEmpAccSheet.ResponsPrioityColumn);
            }
            
            public void SetResponsPrioityNull() {
                this[this.tableEmpAccSheet.ResponsPrioityColumn] = System.Convert.DBNull;
            }
            
            public bool IsParentProjectIDNull() {
                return this.IsNull(this.tableEmpAccSheet.ParentProjectIDColumn);
            }
            
            public void SetParentProjectIDNull() {
                this[this.tableEmpAccSheet.ParentProjectIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsParentResponsIDNull() {
                return this.IsNull(this.tableEmpAccSheet.ParentResponsIDColumn);
            }
            
            public void SetParentResponsIDNull() {
                this[this.tableEmpAccSheet.ParentResponsIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsAssStatusNull() {
                return this.IsNull(this.tableEmpAccSheet.AssStatusColumn);
            }
            
            public void SetAssStatusNull() {
                this[this.tableEmpAccSheet.AssStatusColumn] = System.Convert.DBNull;
            }
            
            public bool IsdescProjectNull() {
                return this.IsNull(this.tableEmpAccSheet.descProjectColumn);
            }
            
            public void SetdescProjectNull() {
                this[this.tableEmpAccSheet.descProjectColumn] = System.Convert.DBNull;
            }
            
            public bool IsdescReponseNull() {
                return this.IsNull(this.tableEmpAccSheet.descReponseColumn);
            }
            
            public void SetdescReponseNull() {
                this[this.tableEmpAccSheet.descReponseColumn] = System.Convert.DBNull;
            }
            
            public bool IsdescNoteNull() {
                return this.IsNull(this.tableEmpAccSheet.descNoteColumn);
            }
            
            public void SetdescNoteNull() {
                this[this.tableEmpAccSheet.descNoteColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class EmpAccSheetRowChangeEvent : EventArgs {
            
            private EmpAccSheetRow eventRow;
            
            private DataRowAction eventAction;
            
            public EmpAccSheetRowChangeEvent(EmpAccSheetRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public EmpAccSheetRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class EmployeeDataDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnEmployeeIndex;
            
            private DataColumn columnEmployeeName;
            
            private DataColumn columnDeptIndex;
            
            private DataColumn columnDeptName;
            
            private DataColumn columnJobIndex;
            
            private DataColumn columnJobName;
            
            internal EmployeeDataDataTable() : 
                    base("EmployeeData") {
                this.InitClass();
            }
            
            internal EmployeeDataDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn EmployeeIndexColumn {
                get {
                    return this.columnEmployeeIndex;
                }
            }
            
            internal DataColumn EmployeeNameColumn {
                get {
                    return this.columnEmployeeName;
                }
            }
            
            internal DataColumn DeptIndexColumn {
                get {
                    return this.columnDeptIndex;
                }
            }
            
            internal DataColumn DeptNameColumn {
                get {
                    return this.columnDeptName;
                }
            }
            
            internal DataColumn JobIndexColumn {
                get {
                    return this.columnJobIndex;
                }
            }
            
            internal DataColumn JobNameColumn {
                get {
                    return this.columnJobName;
                }
            }
            
            public EmployeeDataRow this[int index] {
                get {
                    return ((EmployeeDataRow)(this.Rows[index]));
                }
            }
            
            public event EmployeeDataRowChangeEventHandler EmployeeDataRowChanged;
            
            public event EmployeeDataRowChangeEventHandler EmployeeDataRowChanging;
            
            public event EmployeeDataRowChangeEventHandler EmployeeDataRowDeleted;
            
            public event EmployeeDataRowChangeEventHandler EmployeeDataRowDeleting;
            
            public void AddEmployeeDataRow(EmployeeDataRow row) {
                this.Rows.Add(row);
            }
            
            public EmployeeDataRow AddEmployeeDataRow(long EmployeeIndex, string EmployeeName, long DeptIndex, string DeptName, long JobIndex, string JobName) {
                EmployeeDataRow rowEmployeeDataRow = ((EmployeeDataRow)(this.NewRow()));
                rowEmployeeDataRow.ItemArray = new object[] {
                        EmployeeIndex,
                        EmployeeName,
                        DeptIndex,
                        DeptName,
                        JobIndex,
                        JobName};
                this.Rows.Add(rowEmployeeDataRow);
                return rowEmployeeDataRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                EmployeeDataDataTable cln = ((EmployeeDataDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new EmployeeDataDataTable();
            }
            
            internal void InitVars() {
                this.columnEmployeeIndex = this.Columns["EmployeeIndex"];
                this.columnEmployeeName = this.Columns["EmployeeName"];
                this.columnDeptIndex = this.Columns["DeptIndex"];
                this.columnDeptName = this.Columns["DeptName"];
                this.columnJobIndex = this.Columns["JobIndex"];
                this.columnJobName = this.Columns["JobName"];
            }
            
            private void InitClass() {
                this.columnEmployeeIndex = new DataColumn("EmployeeIndex", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEmployeeIndex);
                this.columnEmployeeName = new DataColumn("EmployeeName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEmployeeName);
                this.columnDeptIndex = new DataColumn("DeptIndex", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDeptIndex);
                this.columnDeptName = new DataColumn("DeptName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDeptName);
                this.columnJobIndex = new DataColumn("JobIndex", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnJobIndex);
                this.columnJobName = new DataColumn("JobName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnJobName);
            }
            
            public EmployeeDataRow NewEmployeeDataRow() {
                return ((EmployeeDataRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new EmployeeDataRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(EmployeeDataRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EmployeeDataRowChanged != null)) {
                    this.EmployeeDataRowChanged(this, new EmployeeDataRowChangeEvent(((EmployeeDataRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EmployeeDataRowChanging != null)) {
                    this.EmployeeDataRowChanging(this, new EmployeeDataRowChangeEvent(((EmployeeDataRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EmployeeDataRowDeleted != null)) {
                    this.EmployeeDataRowDeleted(this, new EmployeeDataRowChangeEvent(((EmployeeDataRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EmployeeDataRowDeleting != null)) {
                    this.EmployeeDataRowDeleting(this, new EmployeeDataRowChangeEvent(((EmployeeDataRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveEmployeeDataRow(EmployeeDataRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class EmployeeDataRow : DataRow {
            
            private EmployeeDataDataTable tableEmployeeData;
            
            internal EmployeeDataRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableEmployeeData = ((EmployeeDataDataTable)(this.Table));
            }
            
            public long EmployeeIndex {
                get {
                    try {
                        return ((long)(this[this.tableEmployeeData.EmployeeIndexColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeeData.EmployeeIndexColumn] = value;
                }
            }
            
            public string EmployeeName {
                get {
                    try {
                        return ((string)(this[this.tableEmployeeData.EmployeeNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeeData.EmployeeNameColumn] = value;
                }
            }
            
            public long DeptIndex {
                get {
                    try {
                        return ((long)(this[this.tableEmployeeData.DeptIndexColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeeData.DeptIndexColumn] = value;
                }
            }
            
            public string DeptName {
                get {
                    try {
                        return ((string)(this[this.tableEmployeeData.DeptNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeeData.DeptNameColumn] = value;
                }
            }
            
            public long JobIndex {
                get {
                    try {
                        return ((long)(this[this.tableEmployeeData.JobIndexColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeeData.JobIndexColumn] = value;
                }
            }
            
            public string JobName {
                get {
                    try {
                        return ((string)(this[this.tableEmployeeData.JobNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeeData.JobNameColumn] = value;
                }
            }
            
            public bool IsEmployeeIndexNull() {
                return this.IsNull(this.tableEmployeeData.EmployeeIndexColumn);
            }
            
            public void SetEmployeeIndexNull() {
                this[this.tableEmployeeData.EmployeeIndexColumn] = System.Convert.DBNull;
            }
            
            public bool IsEmployeeNameNull() {
                return this.IsNull(this.tableEmployeeData.EmployeeNameColumn);
            }
            
            public void SetEmployeeNameNull() {
                this[this.tableEmployeeData.EmployeeNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsDeptIndexNull() {
                return this.IsNull(this.tableEmployeeData.DeptIndexColumn);
            }
            
            public void SetDeptIndexNull() {
                this[this.tableEmployeeData.DeptIndexColumn] = System.Convert.DBNull;
            }
            
            public bool IsDeptNameNull() {
                return this.IsNull(this.tableEmployeeData.DeptNameColumn);
            }
            
            public void SetDeptNameNull() {
                this[this.tableEmployeeData.DeptNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsJobIndexNull() {
                return this.IsNull(this.tableEmployeeData.JobIndexColumn);
            }
            
            public void SetJobIndexNull() {
                this[this.tableEmployeeData.JobIndexColumn] = System.Convert.DBNull;
            }
            
            public bool IsJobNameNull() {
                return this.IsNull(this.tableEmployeeData.JobNameColumn);
            }
            
            public void SetJobNameNull() {
                this[this.tableEmployeeData.JobNameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class EmployeeDataRowChangeEvent : EventArgs {
            
            private EmployeeDataRow eventRow;
            
            private DataRowAction eventAction;
            
            public EmployeeDataRowChangeEvent(EmployeeDataRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public EmployeeDataRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class WeekDataDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnSunDate;
            
            private DataColumn columnMonDate;
            
            private DataColumn columnTueDate;
            
            private DataColumn columnWedDate;
            
            private DataColumn columnThurDate;
            
            private DataColumn columnFriDate;
            
            private DataColumn columnSatDate;
            
            private DataColumn columnSunTotal;
            
            private DataColumn columnMonTotal;
            
            private DataColumn columnWedTotal;
            
            private DataColumn columnFriTotal;
            
            private DataColumn columnSatTotal;
            
            private DataColumn columnWeekTotal;
            
            private DataColumn columnMonth;
            
            private DataColumn columnWeek;
            
            private DataColumn columnYear;
            
            private DataColumn columnThurTotal;
            
            private DataColumn columnTuesTotal;
            
            internal WeekDataDataTable() : 
                    base("WeekData") {
                this.InitClass();
            }
            
            internal WeekDataDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn SunDateColumn {
                get {
                    return this.columnSunDate;
                }
            }
            
            internal DataColumn MonDateColumn {
                get {
                    return this.columnMonDate;
                }
            }
            
            internal DataColumn TueDateColumn {
                get {
                    return this.columnTueDate;
                }
            }
            
            internal DataColumn WedDateColumn {
                get {
                    return this.columnWedDate;
                }
            }
            
            internal DataColumn ThurDateColumn {
                get {
                    return this.columnThurDate;
                }
            }
            
            internal DataColumn FriDateColumn {
                get {
                    return this.columnFriDate;
                }
            }
            
            internal DataColumn SatDateColumn {
                get {
                    return this.columnSatDate;
                }
            }
            
            internal DataColumn SunTotalColumn {
                get {
                    return this.columnSunTotal;
                }
            }
            
            internal DataColumn MonTotalColumn {
                get {
                    return this.columnMonTotal;
                }
            }
            
            internal DataColumn WedTotalColumn {
                get {
                    return this.columnWedTotal;
                }
            }
            
            internal DataColumn FriTotalColumn {
                get {
                    return this.columnFriTotal;
                }
            }
            
            internal DataColumn SatTotalColumn {
                get {
                    return this.columnSatTotal;
                }
            }
            
            internal DataColumn WeekTotalColumn {
                get {
                    return this.columnWeekTotal;
                }
            }
            
            internal DataColumn MonthColumn {
                get {
                    return this.columnMonth;
                }
            }
            
            internal DataColumn WeekColumn {
                get {
                    return this.columnWeek;
                }
            }
            
            internal DataColumn YearColumn {
                get {
                    return this.columnYear;
                }
            }
            
            internal DataColumn ThurTotalColumn {
                get {
                    return this.columnThurTotal;
                }
            }
            
            internal DataColumn TuesTotalColumn {
                get {
                    return this.columnTuesTotal;
                }
            }
            
            public WeekDataRow this[int index] {
                get {
                    return ((WeekDataRow)(this.Rows[index]));
                }
            }
            
            public event WeekDataRowChangeEventHandler WeekDataRowChanged;
            
            public event WeekDataRowChangeEventHandler WeekDataRowChanging;
            
            public event WeekDataRowChangeEventHandler WeekDataRowDeleted;
            
            public event WeekDataRowChangeEventHandler WeekDataRowDeleting;
            
            public void AddWeekDataRow(WeekDataRow row) {
                this.Rows.Add(row);
            }
            
            public WeekDataRow AddWeekDataRow(
                        System.DateTime SunDate, 
                        System.DateTime MonDate, 
                        System.DateTime TueDate, 
                        System.DateTime WedDate, 
                        System.DateTime ThurDate, 
                        System.DateTime FriDate, 
                        System.DateTime SatDate, 
                        System.Double SunTotal, 
                        System.Double MonTotal, 
                        System.Double WedTotal, 
                        System.Double FriTotal, 
                        System.Double SatTotal, 
                        System.Double WeekTotal, 
                        long Month, 
                        long Week, 
                        long Year, 
                        System.Double ThurTotal, 
                        System.Double TuesTotal) {
                WeekDataRow rowWeekDataRow = ((WeekDataRow)(this.NewRow()));
                rowWeekDataRow.ItemArray = new object[] {
                        SunDate,
                        MonDate,
                        TueDate,
                        WedDate,
                        ThurDate,
                        FriDate,
                        SatDate,
                        SunTotal,
                        MonTotal,
                        WedTotal,
                        FriTotal,
                        SatTotal,
                        WeekTotal,
                        Month,
                        Week,
                        Year,
                        ThurTotal,
                        TuesTotal};
                this.Rows.Add(rowWeekDataRow);
                return rowWeekDataRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                WeekDataDataTable cln = ((WeekDataDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new WeekDataDataTable();
            }
            
            internal void InitVars() {
                this.columnSunDate = this.Columns["SunDate"];
                this.columnMonDate = this.Columns["MonDate"];
                this.columnTueDate = this.Columns["TueDate"];
                this.columnWedDate = this.Columns["WedDate"];
                this.columnThurDate = this.Columns["ThurDate"];
                this.columnFriDate = this.Columns["FriDate"];
                this.columnSatDate = this.Columns["SatDate"];
                this.columnSunTotal = this.Columns["SunTotal"];
                this.columnMonTotal = this.Columns["MonTotal"];
                this.columnWedTotal = this.Columns["WedTotal"];
                this.columnFriTotal = this.Columns["FriTotal"];
                this.columnSatTotal = this.Columns["SatTotal"];
                this.columnWeekTotal = this.Columns["WeekTotal"];
                this.columnMonth = this.Columns["Month"];
                this.columnWeek = this.Columns["Week"];
                this.columnYear = this.Columns["Year"];
                this.columnThurTotal = this.Columns["ThurTotal"];
                this.columnTuesTotal = this.Columns["TuesTotal"];
            }
            
            private void InitClass() {
                this.columnSunDate = new DataColumn("SunDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSunDate);
                this.columnMonDate = new DataColumn("MonDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMonDate);
                this.columnTueDate = new DataColumn("TueDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTueDate);
                this.columnWedDate = new DataColumn("WedDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnWedDate);
                this.columnThurDate = new DataColumn("ThurDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnThurDate);
                this.columnFriDate = new DataColumn("FriDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFriDate);
                this.columnSatDate = new DataColumn("SatDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSatDate);
                this.columnSunTotal = new DataColumn("SunTotal", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSunTotal);
                this.columnMonTotal = new DataColumn("MonTotal", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMonTotal);
                this.columnWedTotal = new DataColumn("WedTotal", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnWedTotal);
                this.columnFriTotal = new DataColumn("FriTotal", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFriTotal);
                this.columnSatTotal = new DataColumn("SatTotal", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSatTotal);
                this.columnWeekTotal = new DataColumn("WeekTotal", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnWeekTotal);
                this.columnMonth = new DataColumn("Month", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMonth);
                this.columnWeek = new DataColumn("Week", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnWeek);
                this.columnYear = new DataColumn("Year", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnYear);
                this.columnThurTotal = new DataColumn("ThurTotal", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnThurTotal);
                this.columnTuesTotal = new DataColumn("TuesTotal", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTuesTotal);
            }
            
            public WeekDataRow NewWeekDataRow() {
                return ((WeekDataRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new WeekDataRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(WeekDataRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.WeekDataRowChanged != null)) {
                    this.WeekDataRowChanged(this, new WeekDataRowChangeEvent(((WeekDataRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.WeekDataRowChanging != null)) {
                    this.WeekDataRowChanging(this, new WeekDataRowChangeEvent(((WeekDataRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.WeekDataRowDeleted != null)) {
                    this.WeekDataRowDeleted(this, new WeekDataRowChangeEvent(((WeekDataRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.WeekDataRowDeleting != null)) {
                    this.WeekDataRowDeleting(this, new WeekDataRowChangeEvent(((WeekDataRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveWeekDataRow(WeekDataRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class WeekDataRow : DataRow {
            
            private WeekDataDataTable tableWeekData;
            
            internal WeekDataRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableWeekData = ((WeekDataDataTable)(this.Table));
            }
            
            public System.DateTime SunDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableWeekData.SunDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWeekData.SunDateColumn] = value;
                }
            }
            
            public System.DateTime MonDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableWeekData.MonDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWeekData.MonDateColumn] = value;
                }
            }
            
            public System.DateTime TueDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableWeekData.TueDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWeekData.TueDateColumn] = value;
                }
            }
            
            public System.DateTime WedDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableWeekData.WedDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWeekData.WedDateColumn] = value;
                }
            }
            
            public System.DateTime ThurDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableWeekData.ThurDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWeekData.ThurDateColumn] = value;
                }
            }
            
            public System.DateTime FriDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableWeekData.FriDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWeekData.FriDateColumn] = value;
                }
            }
            
            public System.DateTime SatDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableWeekData.SatDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWeekData.SatDateColumn] = value;
                }
            }
            
            public System.Double SunTotal {
                get {
                    try {
                        return ((System.Double)(this[this.tableWeekData.SunTotalColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWeekData.SunTotalColumn] = value;
                }
            }
            
            public System.Double MonTotal {
                get {
                    try {
                        return ((System.Double)(this[this.tableWeekData.MonTotalColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWeekData.MonTotalColumn] = value;
                }
            }
            
            public System.Double WedTotal {
                get {
                    try {
                        return ((System.Double)(this[this.tableWeekData.WedTotalColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWeekData.WedTotalColumn] = value;
                }
            }
            
            public System.Double FriTotal {
                get {
                    try {
                        return ((System.Double)(this[this.tableWeekData.FriTotalColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWeekData.FriTotalColumn] = value;
                }
            }
            
            public System.Double SatTotal {
                get {
                    try {
                        return ((System.Double)(this[this.tableWeekData.SatTotalColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWeekData.SatTotalColumn] = value;
                }
            }
            
            public System.Double WeekTotal {
                get {
                    try {
                        return ((System.Double)(this[this.tableWeekData.WeekTotalColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWeekData.WeekTotalColumn] = value;
                }
            }
            
            public long Month {
                get {
                    try {
                        return ((long)(this[this.tableWeekData.MonthColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWeekData.MonthColumn] = value;
                }
            }
            
            public long Week {
                get {
                    try {
                        return ((long)(this[this.tableWeekData.WeekColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWeekData.WeekColumn] = value;
                }
            }
            
            public long Year {
                get {
                    try {
                        return ((long)(this[this.tableWeekData.YearColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWeekData.YearColumn] = value;
                }
            }
            
            public System.Double ThurTotal {
                get {
                    try {
                        return ((System.Double)(this[this.tableWeekData.ThurTotalColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWeekData.ThurTotalColumn] = value;
                }
            }
            
            public System.Double TuesTotal {
                get {
                    try {
                        return ((System.Double)(this[this.tableWeekData.TuesTotalColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWeekData.TuesTotalColumn] = value;
                }
            }
            
            public bool IsSunDateNull() {
                return this.IsNull(this.tableWeekData.SunDateColumn);
            }
            
            public void SetSunDateNull() {
                this[this.tableWeekData.SunDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsMonDateNull() {
                return this.IsNull(this.tableWeekData.MonDateColumn);
            }
            
            public void SetMonDateNull() {
                this[this.tableWeekData.MonDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsTueDateNull() {
                return this.IsNull(this.tableWeekData.TueDateColumn);
            }
            
            public void SetTueDateNull() {
                this[this.tableWeekData.TueDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsWedDateNull() {
                return this.IsNull(this.tableWeekData.WedDateColumn);
            }
            
            public void SetWedDateNull() {
                this[this.tableWeekData.WedDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsThurDateNull() {
                return this.IsNull(this.tableWeekData.ThurDateColumn);
            }
            
            public void SetThurDateNull() {
                this[this.tableWeekData.ThurDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsFriDateNull() {
                return this.IsNull(this.tableWeekData.FriDateColumn);
            }
            
            public void SetFriDateNull() {
                this[this.tableWeekData.FriDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsSatDateNull() {
                return this.IsNull(this.tableWeekData.SatDateColumn);
            }
            
            public void SetSatDateNull() {
                this[this.tableWeekData.SatDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsSunTotalNull() {
                return this.IsNull(this.tableWeekData.SunTotalColumn);
            }
            
            public void SetSunTotalNull() {
                this[this.tableWeekData.SunTotalColumn] = System.Convert.DBNull;
            }
            
            public bool IsMonTotalNull() {
                return this.IsNull(this.tableWeekData.MonTotalColumn);
            }
            
            public void SetMonTotalNull() {
                this[this.tableWeekData.MonTotalColumn] = System.Convert.DBNull;
            }
            
            public bool IsWedTotalNull() {
                return this.IsNull(this.tableWeekData.WedTotalColumn);
            }
            
            public void SetWedTotalNull() {
                this[this.tableWeekData.WedTotalColumn] = System.Convert.DBNull;
            }
            
            public bool IsFriTotalNull() {
                return this.IsNull(this.tableWeekData.FriTotalColumn);
            }
            
            public void SetFriTotalNull() {
                this[this.tableWeekData.FriTotalColumn] = System.Convert.DBNull;
            }
            
            public bool IsSatTotalNull() {
                return this.IsNull(this.tableWeekData.SatTotalColumn);
            }
            
            public void SetSatTotalNull() {
                this[this.tableWeekData.SatTotalColumn] = System.Convert.DBNull;
            }
            
            public bool IsWeekTotalNull() {
                return this.IsNull(this.tableWeekData.WeekTotalColumn);
            }
            
            public void SetWeekTotalNull() {
                this[this.tableWeekData.WeekTotalColumn] = System.Convert.DBNull;
            }
            
            public bool IsMonthNull() {
                return this.IsNull(this.tableWeekData.MonthColumn);
            }
            
            public void SetMonthNull() {
                this[this.tableWeekData.MonthColumn] = System.Convert.DBNull;
            }
            
            public bool IsWeekNull() {
                return this.IsNull(this.tableWeekData.WeekColumn);
            }
            
            public void SetWeekNull() {
                this[this.tableWeekData.WeekColumn] = System.Convert.DBNull;
            }
            
            public bool IsYearNull() {
                return this.IsNull(this.tableWeekData.YearColumn);
            }
            
            public void SetYearNull() {
                this[this.tableWeekData.YearColumn] = System.Convert.DBNull;
            }
            
            public bool IsThurTotalNull() {
                return this.IsNull(this.tableWeekData.ThurTotalColumn);
            }
            
            public void SetThurTotalNull() {
                this[this.tableWeekData.ThurTotalColumn] = System.Convert.DBNull;
            }
            
            public bool IsTuesTotalNull() {
                return this.IsNull(this.tableWeekData.TuesTotalColumn);
            }
            
            public void SetTuesTotalNull() {
                this[this.tableWeekData.TuesTotalColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class WeekDataRowChangeEvent : EventArgs {
            
            private WeekDataRow eventRow;
            
            private DataRowAction eventAction;
            
            public WeekDataRowChangeEvent(WeekDataRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public WeekDataRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class WeekNotesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnNoteDate;
            
            private DataColumn columnNoteBody;
            
            private DataColumn columnHasDaysOff;
            
            internal WeekNotesDataTable() : 
                    base("WeekNotes") {
                this.InitClass();
            }
            
            internal WeekNotesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn NoteDateColumn {
                get {
                    return this.columnNoteDate;
                }
            }
            
            internal DataColumn NoteBodyColumn {
                get {
                    return this.columnNoteBody;
                }
            }
            
            internal DataColumn HasDaysOffColumn {
                get {
                    return this.columnHasDaysOff;
                }
            }
            
            public WeekNotesRow this[int index] {
                get {
                    return ((WeekNotesRow)(this.Rows[index]));
                }
            }
            
            public event WeekNotesRowChangeEventHandler WeekNotesRowChanged;
            
            public event WeekNotesRowChangeEventHandler WeekNotesRowChanging;
            
            public event WeekNotesRowChangeEventHandler WeekNotesRowDeleted;
            
            public event WeekNotesRowChangeEventHandler WeekNotesRowDeleting;
            
            public void AddWeekNotesRow(WeekNotesRow row) {
                this.Rows.Add(row);
            }
            
            public WeekNotesRow AddWeekNotesRow(System.DateTime NoteDate, string NoteBody, bool HasDaysOff) {
                WeekNotesRow rowWeekNotesRow = ((WeekNotesRow)(this.NewRow()));
                rowWeekNotesRow.ItemArray = new object[] {
                        NoteDate,
                        NoteBody,
                        HasDaysOff};
                this.Rows.Add(rowWeekNotesRow);
                return rowWeekNotesRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                WeekNotesDataTable cln = ((WeekNotesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new WeekNotesDataTable();
            }
            
            internal void InitVars() {
                this.columnNoteDate = this.Columns["NoteDate"];
                this.columnNoteBody = this.Columns["NoteBody"];
                this.columnHasDaysOff = this.Columns["HasDaysOff"];
            }
            
            private void InitClass() {
                this.columnNoteDate = new DataColumn("NoteDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNoteDate);
                this.columnNoteBody = new DataColumn("NoteBody", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNoteBody);
                this.columnHasDaysOff = new DataColumn("HasDaysOff", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHasDaysOff);
            }
            
            public WeekNotesRow NewWeekNotesRow() {
                return ((WeekNotesRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new WeekNotesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(WeekNotesRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.WeekNotesRowChanged != null)) {
                    this.WeekNotesRowChanged(this, new WeekNotesRowChangeEvent(((WeekNotesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.WeekNotesRowChanging != null)) {
                    this.WeekNotesRowChanging(this, new WeekNotesRowChangeEvent(((WeekNotesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.WeekNotesRowDeleted != null)) {
                    this.WeekNotesRowDeleted(this, new WeekNotesRowChangeEvent(((WeekNotesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.WeekNotesRowDeleting != null)) {
                    this.WeekNotesRowDeleting(this, new WeekNotesRowChangeEvent(((WeekNotesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveWeekNotesRow(WeekNotesRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class WeekNotesRow : DataRow {
            
            private WeekNotesDataTable tableWeekNotes;
            
            internal WeekNotesRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableWeekNotes = ((WeekNotesDataTable)(this.Table));
            }
            
            public System.DateTime NoteDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableWeekNotes.NoteDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWeekNotes.NoteDateColumn] = value;
                }
            }
            
            public string NoteBody {
                get {
                    try {
                        return ((string)(this[this.tableWeekNotes.NoteBodyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWeekNotes.NoteBodyColumn] = value;
                }
            }
            
            public bool HasDaysOff {
                get {
                    try {
                        return ((bool)(this[this.tableWeekNotes.HasDaysOffColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWeekNotes.HasDaysOffColumn] = value;
                }
            }
            
            public bool IsNoteDateNull() {
                return this.IsNull(this.tableWeekNotes.NoteDateColumn);
            }
            
            public void SetNoteDateNull() {
                this[this.tableWeekNotes.NoteDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsNoteBodyNull() {
                return this.IsNull(this.tableWeekNotes.NoteBodyColumn);
            }
            
            public void SetNoteBodyNull() {
                this[this.tableWeekNotes.NoteBodyColumn] = System.Convert.DBNull;
            }
            
            public bool IsHasDaysOffNull() {
                return this.IsNull(this.tableWeekNotes.HasDaysOffColumn);
            }
            
            public void SetHasDaysOffNull() {
                this[this.tableWeekNotes.HasDaysOffColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class WeekNotesRowChangeEvent : EventArgs {
            
            private WeekNotesRow eventRow;
            
            private DataRowAction eventAction;
            
            public WeekNotesRowChangeEvent(WeekNotesRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public WeekNotesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
