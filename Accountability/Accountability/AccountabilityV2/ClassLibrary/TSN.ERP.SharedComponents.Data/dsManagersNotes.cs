//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace TSN.ERP.SharedComponents.Data {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsManagersNotes : DataSet {
        
        private GEN_ManagerNotesDataTable tableGEN_ManagerNotes;
        
        public dsManagersNotes() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsManagersNotes(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["GEN_ManagerNotes"] != null)) {
                    this.Tables.Add(new GEN_ManagerNotesDataTable(ds.Tables["GEN_ManagerNotes"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GEN_ManagerNotesDataTable GEN_ManagerNotes {
            get {
                return this.tableGEN_ManagerNotes;
            }
        }
        
        public override DataSet Clone() {
            dsManagersNotes cln = ((dsManagersNotes)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["GEN_ManagerNotes"] != null)) {
                this.Tables.Add(new GEN_ManagerNotesDataTable(ds.Tables["GEN_ManagerNotes"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableGEN_ManagerNotes = ((GEN_ManagerNotesDataTable)(this.Tables["GEN_ManagerNotes"]));
            if ((this.tableGEN_ManagerNotes != null)) {
                this.tableGEN_ManagerNotes.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "dsManagersNotes";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/dsManagersNotes.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableGEN_ManagerNotes = new GEN_ManagerNotesDataTable();
            this.Tables.Add(this.tableGEN_ManagerNotes);
        }
        
        private bool ShouldSerializeGEN_ManagerNotes() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void GEN_ManagerNotesRowChangeEventHandler(object sender, GEN_ManagerNotesRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GEN_ManagerNotesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnMNoteID;
            
            private DataColumn columnUserID;
            
            private DataColumn columnNoteBody;
            
            private DataColumn columnWeekStartDate;
            
            private DataColumn columnCreatedOn;
            
            internal GEN_ManagerNotesDataTable() : 
                    base("GEN_ManagerNotes") {
                this.InitClass();
            }
            
            internal GEN_ManagerNotesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn MNoteIDColumn {
                get {
                    return this.columnMNoteID;
                }
            }
            
            internal DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            internal DataColumn NoteBodyColumn {
                get {
                    return this.columnNoteBody;
                }
            }
            
            internal DataColumn WeekStartDateColumn {
                get {
                    return this.columnWeekStartDate;
                }
            }
            
            internal DataColumn CreatedOnColumn {
                get {
                    return this.columnCreatedOn;
                }
            }
            
            public GEN_ManagerNotesRow this[int index] {
                get {
                    return ((GEN_ManagerNotesRow)(this.Rows[index]));
                }
            }
            
            public event GEN_ManagerNotesRowChangeEventHandler GEN_ManagerNotesRowChanged;
            
            public event GEN_ManagerNotesRowChangeEventHandler GEN_ManagerNotesRowChanging;
            
            public event GEN_ManagerNotesRowChangeEventHandler GEN_ManagerNotesRowDeleted;
            
            public event GEN_ManagerNotesRowChangeEventHandler GEN_ManagerNotesRowDeleting;
            
            public void AddGEN_ManagerNotesRow(GEN_ManagerNotesRow row) {
                this.Rows.Add(row);
            }
            
            public GEN_ManagerNotesRow AddGEN_ManagerNotesRow(int MNoteID, int UserID, string NoteBody, System.DateTime WeekStartDate, System.DateTime CreatedOn) {
                GEN_ManagerNotesRow rowGEN_ManagerNotesRow = ((GEN_ManagerNotesRow)(this.NewRow()));
                rowGEN_ManagerNotesRow.ItemArray = new object[] {
                        MNoteID,
                        UserID,
                        NoteBody,
                        WeekStartDate,
                        CreatedOn};
                this.Rows.Add(rowGEN_ManagerNotesRow);
                return rowGEN_ManagerNotesRow;
            }
            
            public GEN_ManagerNotesRow FindByMNoteID(int MNoteID) {
                return ((GEN_ManagerNotesRow)(this.Rows.Find(new object[] {
                            MNoteID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                GEN_ManagerNotesDataTable cln = ((GEN_ManagerNotesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new GEN_ManagerNotesDataTable();
            }
            
            internal void InitVars() {
                this.columnMNoteID = this.Columns["MNoteID"];
                this.columnUserID = this.Columns["UserID"];
                this.columnNoteBody = this.Columns["NoteBody"];
                this.columnWeekStartDate = this.Columns["WeekStartDate"];
                this.columnCreatedOn = this.Columns["CreatedOn"];
            }
            
            private void InitClass() {
                this.columnMNoteID = new DataColumn("MNoteID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMNoteID);
                this.columnUserID = new DataColumn("UserID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserID);
                this.columnNoteBody = new DataColumn("NoteBody", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNoteBody);
                this.columnWeekStartDate = new DataColumn("WeekStartDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnWeekStartDate);
                this.columnCreatedOn = new DataColumn("CreatedOn", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCreatedOn);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnMNoteID}, true));
                this.columnMNoteID.AllowDBNull = false;
                this.columnMNoteID.Unique = true;
            }
            
            public GEN_ManagerNotesRow NewGEN_ManagerNotesRow() {
                return ((GEN_ManagerNotesRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new GEN_ManagerNotesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(GEN_ManagerNotesRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GEN_ManagerNotesRowChanged != null)) {
                    this.GEN_ManagerNotesRowChanged(this, new GEN_ManagerNotesRowChangeEvent(((GEN_ManagerNotesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GEN_ManagerNotesRowChanging != null)) {
                    this.GEN_ManagerNotesRowChanging(this, new GEN_ManagerNotesRowChangeEvent(((GEN_ManagerNotesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GEN_ManagerNotesRowDeleted != null)) {
                    this.GEN_ManagerNotesRowDeleted(this, new GEN_ManagerNotesRowChangeEvent(((GEN_ManagerNotesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GEN_ManagerNotesRowDeleting != null)) {
                    this.GEN_ManagerNotesRowDeleting(this, new GEN_ManagerNotesRowChangeEvent(((GEN_ManagerNotesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveGEN_ManagerNotesRow(GEN_ManagerNotesRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GEN_ManagerNotesRow : DataRow {
            
            private GEN_ManagerNotesDataTable tableGEN_ManagerNotes;
            
            internal GEN_ManagerNotesRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableGEN_ManagerNotes = ((GEN_ManagerNotesDataTable)(this.Table));
            }
            
            public int MNoteID {
                get {
                    return ((int)(this[this.tableGEN_ManagerNotes.MNoteIDColumn]));
                }
                set {
                    this[this.tableGEN_ManagerNotes.MNoteIDColumn] = value;
                }
            }
            
            public int UserID {
                get {
                    try {
                        return ((int)(this[this.tableGEN_ManagerNotes.UserIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEN_ManagerNotes.UserIDColumn] = value;
                }
            }
            
            public string NoteBody {
                get {
                    try {
                        return ((string)(this[this.tableGEN_ManagerNotes.NoteBodyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEN_ManagerNotes.NoteBodyColumn] = value;
                }
            }
            
            public System.DateTime WeekStartDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableGEN_ManagerNotes.WeekStartDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEN_ManagerNotes.WeekStartDateColumn] = value;
                }
            }
            
            public System.DateTime CreatedOn {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableGEN_ManagerNotes.CreatedOnColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEN_ManagerNotes.CreatedOnColumn] = value;
                }
            }
            
            public bool IsUserIDNull() {
                return this.IsNull(this.tableGEN_ManagerNotes.UserIDColumn);
            }
            
            public void SetUserIDNull() {
                this[this.tableGEN_ManagerNotes.UserIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsNoteBodyNull() {
                return this.IsNull(this.tableGEN_ManagerNotes.NoteBodyColumn);
            }
            
            public void SetNoteBodyNull() {
                this[this.tableGEN_ManagerNotes.NoteBodyColumn] = System.Convert.DBNull;
            }
            
            public bool IsWeekStartDateNull() {
                return this.IsNull(this.tableGEN_ManagerNotes.WeekStartDateColumn);
            }
            
            public void SetWeekStartDateNull() {
                this[this.tableGEN_ManagerNotes.WeekStartDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsCreatedOnNull() {
                return this.IsNull(this.tableGEN_ManagerNotes.CreatedOnColumn);
            }
            
            public void SetCreatedOnNull() {
                this[this.tableGEN_ManagerNotes.CreatedOnColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GEN_ManagerNotesRowChangeEvent : EventArgs {
            
            private GEN_ManagerNotesRow eventRow;
            
            private DataRowAction eventAction;
            
            public GEN_ManagerNotesRowChangeEvent(GEN_ManagerNotesRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public GEN_ManagerNotesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
