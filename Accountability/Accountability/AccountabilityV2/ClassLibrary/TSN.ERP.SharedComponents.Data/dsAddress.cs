//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace TSN.ERP.SharedComponents.Data {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsAddress : DataSet {
        
        private GEN_AddressDataTable tableGEN_Address;
        
        public dsAddress() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsAddress(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["GEN_Address"] != null)) {
                    this.Tables.Add(new GEN_AddressDataTable(ds.Tables["GEN_Address"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GEN_AddressDataTable GEN_Address {
            get {
                return this.tableGEN_Address;
            }
        }
        
        public override DataSet Clone() {
            dsAddress cln = ((dsAddress)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["GEN_Address"] != null)) {
                this.Tables.Add(new GEN_AddressDataTable(ds.Tables["GEN_Address"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableGEN_Address = ((GEN_AddressDataTable)(this.Tables["GEN_Address"]));
            if ((this.tableGEN_Address != null)) {
                this.tableGEN_Address.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "dsAddress";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/dsAddress.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableGEN_Address = new GEN_AddressDataTable();
            this.Tables.Add(this.tableGEN_Address);
        }
        
        private bool ShouldSerializeGEN_Address() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void GEN_AddressRowChangeEventHandler(object sender, GEN_AddressRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GEN_AddressDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnAddressID;
            
            private DataColumn columnContactID;
            
            private DataColumn columnCityID;
            
            private DataColumn columnAddressLine;
            
            private DataColumn columnPostalCode;
            
            private DataColumn columnPrimaryAddress;
            
            private DataColumn columnAddressLine2;
            
            private DataColumn columnZipCode;
            
            private DataColumn columnAddressArea;
            
            internal GEN_AddressDataTable() : 
                    base("GEN_Address") {
                this.InitClass();
            }
            
            internal GEN_AddressDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn AddressIDColumn {
                get {
                    return this.columnAddressID;
                }
            }
            
            internal DataColumn ContactIDColumn {
                get {
                    return this.columnContactID;
                }
            }
            
            internal DataColumn CityIDColumn {
                get {
                    return this.columnCityID;
                }
            }
            
            internal DataColumn AddressLineColumn {
                get {
                    return this.columnAddressLine;
                }
            }
            
            internal DataColumn PostalCodeColumn {
                get {
                    return this.columnPostalCode;
                }
            }
            
            internal DataColumn PrimaryAddressColumn {
                get {
                    return this.columnPrimaryAddress;
                }
            }
            
            internal DataColumn AddressLine2Column {
                get {
                    return this.columnAddressLine2;
                }
            }
            
            internal DataColumn ZipCodeColumn {
                get {
                    return this.columnZipCode;
                }
            }
            
            internal DataColumn AddressAreaColumn {
                get {
                    return this.columnAddressArea;
                }
            }
            
            public GEN_AddressRow this[int index] {
                get {
                    return ((GEN_AddressRow)(this.Rows[index]));
                }
            }
            
            public event GEN_AddressRowChangeEventHandler GEN_AddressRowChanged;
            
            public event GEN_AddressRowChangeEventHandler GEN_AddressRowChanging;
            
            public event GEN_AddressRowChangeEventHandler GEN_AddressRowDeleted;
            
            public event GEN_AddressRowChangeEventHandler GEN_AddressRowDeleting;
            
            public void AddGEN_AddressRow(GEN_AddressRow row) {
                this.Rows.Add(row);
            }
            
            public GEN_AddressRow AddGEN_AddressRow(int AddressID, int ContactID, int CityID, string AddressLine, string PostalCode, bool PrimaryAddress, string AddressLine2, string ZipCode, string AddressArea) {
                GEN_AddressRow rowGEN_AddressRow = ((GEN_AddressRow)(this.NewRow()));
                rowGEN_AddressRow.ItemArray = new object[] {
                        AddressID,
                        ContactID,
                        CityID,
                        AddressLine,
                        PostalCode,
                        PrimaryAddress,
                        AddressLine2,
                        ZipCode,
                        AddressArea};
                this.Rows.Add(rowGEN_AddressRow);
                return rowGEN_AddressRow;
            }
            
            public GEN_AddressRow FindByAddressID(int AddressID) {
                return ((GEN_AddressRow)(this.Rows.Find(new object[] {
                            AddressID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                GEN_AddressDataTable cln = ((GEN_AddressDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new GEN_AddressDataTable();
            }
            
            internal void InitVars() {
                this.columnAddressID = this.Columns["AddressID"];
                this.columnContactID = this.Columns["ContactID"];
                this.columnCityID = this.Columns["CityID"];
                this.columnAddressLine = this.Columns["AddressLine"];
                this.columnPostalCode = this.Columns["PostalCode"];
                this.columnPrimaryAddress = this.Columns["PrimaryAddress"];
                this.columnAddressLine2 = this.Columns["AddressLine2"];
                this.columnZipCode = this.Columns["ZipCode"];
                this.columnAddressArea = this.Columns["AddressArea"];
            }
            
            private void InitClass() {
                this.columnAddressID = new DataColumn("AddressID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddressID);
                this.columnContactID = new DataColumn("ContactID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnContactID);
                this.columnCityID = new DataColumn("CityID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCityID);
                this.columnAddressLine = new DataColumn("AddressLine", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddressLine);
                this.columnPostalCode = new DataColumn("PostalCode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPostalCode);
                this.columnPrimaryAddress = new DataColumn("PrimaryAddress", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPrimaryAddress);
                this.columnAddressLine2 = new DataColumn("AddressLine2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddressLine2);
                this.columnZipCode = new DataColumn("ZipCode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnZipCode);
                this.columnAddressArea = new DataColumn("AddressArea", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddressArea);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnAddressID}, true));
                this.columnAddressID.AllowDBNull = false;
                this.columnAddressID.Unique = true;
                this.columnAddressLine.AllowDBNull = false;
                this.columnZipCode.AllowDBNull = false;
            }
            
            public GEN_AddressRow NewGEN_AddressRow() {
                return ((GEN_AddressRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new GEN_AddressRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(GEN_AddressRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GEN_AddressRowChanged != null)) {
                    this.GEN_AddressRowChanged(this, new GEN_AddressRowChangeEvent(((GEN_AddressRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GEN_AddressRowChanging != null)) {
                    this.GEN_AddressRowChanging(this, new GEN_AddressRowChangeEvent(((GEN_AddressRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GEN_AddressRowDeleted != null)) {
                    this.GEN_AddressRowDeleted(this, new GEN_AddressRowChangeEvent(((GEN_AddressRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GEN_AddressRowDeleting != null)) {
                    this.GEN_AddressRowDeleting(this, new GEN_AddressRowChangeEvent(((GEN_AddressRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveGEN_AddressRow(GEN_AddressRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GEN_AddressRow : DataRow {
            
            private GEN_AddressDataTable tableGEN_Address;
            
            internal GEN_AddressRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableGEN_Address = ((GEN_AddressDataTable)(this.Table));
            }
            
            public int AddressID {
                get {
                    return ((int)(this[this.tableGEN_Address.AddressIDColumn]));
                }
                set {
                    this[this.tableGEN_Address.AddressIDColumn] = value;
                }
            }
            
            public int ContactID {
                get {
                    try {
                        return ((int)(this[this.tableGEN_Address.ContactIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEN_Address.ContactIDColumn] = value;
                }
            }
            
            public int CityID {
                get {
                    try {
                        return ((int)(this[this.tableGEN_Address.CityIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEN_Address.CityIDColumn] = value;
                }
            }
            
            public string AddressLine {
                get {
                    return ((string)(this[this.tableGEN_Address.AddressLineColumn]));
                }
                set {
                    this[this.tableGEN_Address.AddressLineColumn] = value;
                }
            }
            
            public string PostalCode {
                get {
                    try {
                        return ((string)(this[this.tableGEN_Address.PostalCodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEN_Address.PostalCodeColumn] = value;
                }
            }
            
            public bool PrimaryAddress {
                get {
                    try {
                        return ((bool)(this[this.tableGEN_Address.PrimaryAddressColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEN_Address.PrimaryAddressColumn] = value;
                }
            }
            
            public string AddressLine2 {
                get {
                    try {
                        return ((string)(this[this.tableGEN_Address.AddressLine2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEN_Address.AddressLine2Column] = value;
                }
            }
            
            public string ZipCode {
                get {
                    return ((string)(this[this.tableGEN_Address.ZipCodeColumn]));
                }
                set {
                    this[this.tableGEN_Address.ZipCodeColumn] = value;
                }
            }
            
            public string AddressArea {
                get {
                    try {
                        return ((string)(this[this.tableGEN_Address.AddressAreaColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEN_Address.AddressAreaColumn] = value;
                }
            }
            
            public bool IsContactIDNull() {
                return this.IsNull(this.tableGEN_Address.ContactIDColumn);
            }
            
            public void SetContactIDNull() {
                this[this.tableGEN_Address.ContactIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsCityIDNull() {
                return this.IsNull(this.tableGEN_Address.CityIDColumn);
            }
            
            public void SetCityIDNull() {
                this[this.tableGEN_Address.CityIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsPostalCodeNull() {
                return this.IsNull(this.tableGEN_Address.PostalCodeColumn);
            }
            
            public void SetPostalCodeNull() {
                this[this.tableGEN_Address.PostalCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsPrimaryAddressNull() {
                return this.IsNull(this.tableGEN_Address.PrimaryAddressColumn);
            }
            
            public void SetPrimaryAddressNull() {
                this[this.tableGEN_Address.PrimaryAddressColumn] = System.Convert.DBNull;
            }
            
            public bool IsAddressLine2Null() {
                return this.IsNull(this.tableGEN_Address.AddressLine2Column);
            }
            
            public void SetAddressLine2Null() {
                this[this.tableGEN_Address.AddressLine2Column] = System.Convert.DBNull;
            }
            
            public bool IsAddressAreaNull() {
                return this.IsNull(this.tableGEN_Address.AddressAreaColumn);
            }
            
            public void SetAddressAreaNull() {
                this[this.tableGEN_Address.AddressAreaColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GEN_AddressRowChangeEvent : EventArgs {
            
            private GEN_AddressRow eventRow;
            
            private DataRowAction eventAction;
            
            public GEN_AddressRowChangeEvent(GEN_AddressRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public GEN_AddressRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
