//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace TSN.ERP.SharedComponents.Data {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsJobtitles : DataSet {
        
        private GEN_JobTitlesDataTable tableGEN_JobTitles;
        
        public dsJobtitles() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsJobtitles(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["GEN_JobTitles"] != null)) {
                    this.Tables.Add(new GEN_JobTitlesDataTable(ds.Tables["GEN_JobTitles"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GEN_JobTitlesDataTable GEN_JobTitles {
            get {
                return this.tableGEN_JobTitles;
            }
        }
        
        public override DataSet Clone() {
            dsJobtitles cln = ((dsJobtitles)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["GEN_JobTitles"] != null)) {
                this.Tables.Add(new GEN_JobTitlesDataTable(ds.Tables["GEN_JobTitles"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableGEN_JobTitles = ((GEN_JobTitlesDataTable)(this.Tables["GEN_JobTitles"]));
            if ((this.tableGEN_JobTitles != null)) {
                this.tableGEN_JobTitles.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "dsJobtitles";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/dsJobtitles.xsd";
            this.Locale = new System.Globalization.CultureInfo("ar-EG");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableGEN_JobTitles = new GEN_JobTitlesDataTable();
            this.Tables.Add(this.tableGEN_JobTitles);
        }
        
        private bool ShouldSerializeGEN_JobTitles() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void GEN_JobTitlesRowChangeEventHandler(object sender, GEN_JobTitlesRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GEN_JobTitlesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnJobTitleID;
            
            private DataColumn columnJobName;
            
            private DataColumn columnJobTitleOrder;
            
            private DataColumn columnJobDescription;
            
            private DataColumn columnIsActive;
            
            internal GEN_JobTitlesDataTable() : 
                    base("GEN_JobTitles") {
                this.InitClass();
            }
            
            internal GEN_JobTitlesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn JobTitleIDColumn {
                get {
                    return this.columnJobTitleID;
                }
            }
            
            internal DataColumn JobNameColumn {
                get {
                    return this.columnJobName;
                }
            }
            
            internal DataColumn JobTitleOrderColumn {
                get {
                    return this.columnJobTitleOrder;
                }
            }
            
            internal DataColumn JobDescriptionColumn {
                get {
                    return this.columnJobDescription;
                }
            }
            
            internal DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            public GEN_JobTitlesRow this[int index] {
                get {
                    return ((GEN_JobTitlesRow)(this.Rows[index]));
                }
            }
            
            public event GEN_JobTitlesRowChangeEventHandler GEN_JobTitlesRowChanged;
            
            public event GEN_JobTitlesRowChangeEventHandler GEN_JobTitlesRowChanging;
            
            public event GEN_JobTitlesRowChangeEventHandler GEN_JobTitlesRowDeleted;
            
            public event GEN_JobTitlesRowChangeEventHandler GEN_JobTitlesRowDeleting;
            
            public void AddGEN_JobTitlesRow(GEN_JobTitlesRow row) {
                this.Rows.Add(row);
            }
            
            public GEN_JobTitlesRow AddGEN_JobTitlesRow(int JobTitleID, string JobName, int JobTitleOrder, string JobDescription, bool IsActive) {
                GEN_JobTitlesRow rowGEN_JobTitlesRow = ((GEN_JobTitlesRow)(this.NewRow()));
                rowGEN_JobTitlesRow.ItemArray = new object[] {
                        JobTitleID,
                        JobName,
                        JobTitleOrder,
                        JobDescription,
                        IsActive};
                this.Rows.Add(rowGEN_JobTitlesRow);
                return rowGEN_JobTitlesRow;
            }
            
            public GEN_JobTitlesRow FindByJobTitleID(int JobTitleID) {
                return ((GEN_JobTitlesRow)(this.Rows.Find(new object[] {
                            JobTitleID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                GEN_JobTitlesDataTable cln = ((GEN_JobTitlesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new GEN_JobTitlesDataTable();
            }
            
            internal void InitVars() {
                this.columnJobTitleID = this.Columns["JobTitleID"];
                this.columnJobName = this.Columns["JobName"];
                this.columnJobTitleOrder = this.Columns["JobTitleOrder"];
                this.columnJobDescription = this.Columns["JobDescription"];
                this.columnIsActive = this.Columns["IsActive"];
            }
            
            private void InitClass() {
                this.columnJobTitleID = new DataColumn("JobTitleID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnJobTitleID);
                this.columnJobName = new DataColumn("JobName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnJobName);
                this.columnJobTitleOrder = new DataColumn("JobTitleOrder", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnJobTitleOrder);
                this.columnJobDescription = new DataColumn("JobDescription", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnJobDescription);
                this.columnIsActive = new DataColumn("IsActive", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsActive);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnJobTitleID}, true));
                this.columnJobTitleID.AllowDBNull = false;
                this.columnJobTitleID.Unique = true;
                this.columnJobName.AllowDBNull = false;
            }
            
            public GEN_JobTitlesRow NewGEN_JobTitlesRow() {
                return ((GEN_JobTitlesRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new GEN_JobTitlesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(GEN_JobTitlesRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GEN_JobTitlesRowChanged != null)) {
                    this.GEN_JobTitlesRowChanged(this, new GEN_JobTitlesRowChangeEvent(((GEN_JobTitlesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GEN_JobTitlesRowChanging != null)) {
                    this.GEN_JobTitlesRowChanging(this, new GEN_JobTitlesRowChangeEvent(((GEN_JobTitlesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GEN_JobTitlesRowDeleted != null)) {
                    this.GEN_JobTitlesRowDeleted(this, new GEN_JobTitlesRowChangeEvent(((GEN_JobTitlesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GEN_JobTitlesRowDeleting != null)) {
                    this.GEN_JobTitlesRowDeleting(this, new GEN_JobTitlesRowChangeEvent(((GEN_JobTitlesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveGEN_JobTitlesRow(GEN_JobTitlesRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GEN_JobTitlesRow : DataRow {
            
            private GEN_JobTitlesDataTable tableGEN_JobTitles;
            
            internal GEN_JobTitlesRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableGEN_JobTitles = ((GEN_JobTitlesDataTable)(this.Table));
            }
            
            public int JobTitleID {
                get {
                    return ((int)(this[this.tableGEN_JobTitles.JobTitleIDColumn]));
                }
                set {
                    this[this.tableGEN_JobTitles.JobTitleIDColumn] = value;
                }
            }
            
            public string JobName {
                get {
                    return ((string)(this[this.tableGEN_JobTitles.JobNameColumn]));
                }
                set {
                    this[this.tableGEN_JobTitles.JobNameColumn] = value;
                }
            }
            
            public int JobTitleOrder {
                get {
                    try {
                        return ((int)(this[this.tableGEN_JobTitles.JobTitleOrderColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEN_JobTitles.JobTitleOrderColumn] = value;
                }
            }
            
            public string JobDescription {
                get {
                    try {
                        return ((string)(this[this.tableGEN_JobTitles.JobDescriptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEN_JobTitles.JobDescriptionColumn] = value;
                }
            }
            
            public bool IsActive {
                get {
                    try {
                        return ((bool)(this[this.tableGEN_JobTitles.IsActiveColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEN_JobTitles.IsActiveColumn] = value;
                }
            }
            
            public bool IsJobTitleOrderNull() {
                return this.IsNull(this.tableGEN_JobTitles.JobTitleOrderColumn);
            }
            
            public void SetJobTitleOrderNull() {
                this[this.tableGEN_JobTitles.JobTitleOrderColumn] = System.Convert.DBNull;
            }
            
            public bool IsJobDescriptionNull() {
                return this.IsNull(this.tableGEN_JobTitles.JobDescriptionColumn);
            }
            
            public void SetJobDescriptionNull() {
                this[this.tableGEN_JobTitles.JobDescriptionColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsActiveNull() {
                return this.IsNull(this.tableGEN_JobTitles.IsActiveColumn);
            }
            
            public void SetIsActiveNull() {
                this[this.tableGEN_JobTitles.IsActiveColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GEN_JobTitlesRowChangeEvent : EventArgs {
            
            private GEN_JobTitlesRow eventRow;
            
            private DataRowAction eventAction;
            
            public GEN_JobTitlesRowChangeEvent(GEN_JobTitlesRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public GEN_JobTitlesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
