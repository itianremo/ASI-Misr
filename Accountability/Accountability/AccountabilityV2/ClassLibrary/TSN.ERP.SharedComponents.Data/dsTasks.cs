//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace TSN.ERP.SharedComponents.Data {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsTasks : DataSet {
        
        private GEN_TasksDataTable tableGEN_Tasks;
        
        public dsTasks() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsTasks(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["GEN_Tasks"] != null)) {
                    this.Tables.Add(new GEN_TasksDataTable(ds.Tables["GEN_Tasks"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GEN_TasksDataTable GEN_Tasks {
            get {
                return this.tableGEN_Tasks;
            }
        }
        
        public override DataSet Clone() {
            dsTasks cln = ((dsTasks)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["GEN_Tasks"] != null)) {
                this.Tables.Add(new GEN_TasksDataTable(ds.Tables["GEN_Tasks"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableGEN_Tasks = ((GEN_TasksDataTable)(this.Tables["GEN_Tasks"]));
            if ((this.tableGEN_Tasks != null)) {
                this.tableGEN_Tasks.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "dsTasks";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/dsTasks.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableGEN_Tasks = new GEN_TasksDataTable();
            this.Tables.Add(this.tableGEN_Tasks);
        }
        
        private bool ShouldSerializeGEN_Tasks() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void GEN_TasksRowChangeEventHandler(object sender, GEN_TasksRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GEN_TasksDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnTaskID;
            
            private DataColumn columnprojectID;
            
            private DataColumn columnTaskForumID;
            
            private DataColumn columnTaskName;
            
            private DataColumn columnTaskDesc;
            
            private DataColumn columnTaskCreatBy;
            
            private DataColumn columnTaskProgress;
            
            private DataColumn columnTaskStartDate;
            
            private DataColumn columnTaskEndDate;
            
            private DataColumn columnTaskCloseDate;
            
            private DataColumn columnTaskStatus;
            
            private DataColumn columnTaskDuration;
            
            private DataColumn columnTaskUnit;
            
            internal GEN_TasksDataTable() : 
                    base("GEN_Tasks") {
                this.InitClass();
            }
            
            internal GEN_TasksDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn TaskIDColumn {
                get {
                    return this.columnTaskID;
                }
            }
            
            internal DataColumn projectIDColumn {
                get {
                    return this.columnprojectID;
                }
            }
            
            internal DataColumn TaskForumIDColumn {
                get {
                    return this.columnTaskForumID;
                }
            }
            
            internal DataColumn TaskNameColumn {
                get {
                    return this.columnTaskName;
                }
            }
            
            internal DataColumn TaskDescColumn {
                get {
                    return this.columnTaskDesc;
                }
            }
            
            internal DataColumn TaskCreatByColumn {
                get {
                    return this.columnTaskCreatBy;
                }
            }
            
            internal DataColumn TaskProgressColumn {
                get {
                    return this.columnTaskProgress;
                }
            }
            
            internal DataColumn TaskStartDateColumn {
                get {
                    return this.columnTaskStartDate;
                }
            }
            
            internal DataColumn TaskEndDateColumn {
                get {
                    return this.columnTaskEndDate;
                }
            }
            
            internal DataColumn TaskCloseDateColumn {
                get {
                    return this.columnTaskCloseDate;
                }
            }
            
            internal DataColumn TaskStatusColumn {
                get {
                    return this.columnTaskStatus;
                }
            }
            
            internal DataColumn TaskDurationColumn {
                get {
                    return this.columnTaskDuration;
                }
            }
            
            internal DataColumn TaskUnitColumn {
                get {
                    return this.columnTaskUnit;
                }
            }
            
            public GEN_TasksRow this[int index] {
                get {
                    return ((GEN_TasksRow)(this.Rows[index]));
                }
            }
            
            public event GEN_TasksRowChangeEventHandler GEN_TasksRowChanged;
            
            public event GEN_TasksRowChangeEventHandler GEN_TasksRowChanging;
            
            public event GEN_TasksRowChangeEventHandler GEN_TasksRowDeleted;
            
            public event GEN_TasksRowChangeEventHandler GEN_TasksRowDeleting;
            
            public void AddGEN_TasksRow(GEN_TasksRow row) {
                this.Rows.Add(row);
            }
            
            public GEN_TasksRow AddGEN_TasksRow(int TaskID, int projectID, int TaskForumID, string TaskName, string TaskDesc, int TaskCreatBy, short TaskProgress, System.DateTime TaskStartDate, System.DateTime TaskEndDate, System.DateTime TaskCloseDate, short TaskStatus, System.Decimal TaskDuration, int TaskUnit) {
                GEN_TasksRow rowGEN_TasksRow = ((GEN_TasksRow)(this.NewRow()));
                rowGEN_TasksRow.ItemArray = new object[] {
                        TaskID,
                        projectID,
                        TaskForumID,
                        TaskName,
                        TaskDesc,
                        TaskCreatBy,
                        TaskProgress,
                        TaskStartDate,
                        TaskEndDate,
                        TaskCloseDate,
                        TaskStatus,
                        TaskDuration,
                        TaskUnit};
                this.Rows.Add(rowGEN_TasksRow);
                return rowGEN_TasksRow;
            }
            
            public GEN_TasksRow FindByTaskID(int TaskID) {
                return ((GEN_TasksRow)(this.Rows.Find(new object[] {
                            TaskID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                GEN_TasksDataTable cln = ((GEN_TasksDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new GEN_TasksDataTable();
            }
            
            internal void InitVars() {
                this.columnTaskID = this.Columns["TaskID"];
                this.columnprojectID = this.Columns["projectID"];
                this.columnTaskForumID = this.Columns["TaskForumID"];
                this.columnTaskName = this.Columns["TaskName"];
                this.columnTaskDesc = this.Columns["TaskDesc"];
                this.columnTaskCreatBy = this.Columns["TaskCreatBy"];
                this.columnTaskProgress = this.Columns["TaskProgress"];
                this.columnTaskStartDate = this.Columns["TaskStartDate"];
                this.columnTaskEndDate = this.Columns["TaskEndDate"];
                this.columnTaskCloseDate = this.Columns["TaskCloseDate"];
                this.columnTaskStatus = this.Columns["TaskStatus"];
                this.columnTaskDuration = this.Columns["TaskDuration"];
                this.columnTaskUnit = this.Columns["TaskUnit"];
            }
            
            private void InitClass() {
                this.columnTaskID = new DataColumn("TaskID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTaskID);
                this.columnprojectID = new DataColumn("projectID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnprojectID);
                this.columnTaskForumID = new DataColumn("TaskForumID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTaskForumID);
                this.columnTaskName = new DataColumn("TaskName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTaskName);
                this.columnTaskDesc = new DataColumn("TaskDesc", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTaskDesc);
                this.columnTaskCreatBy = new DataColumn("TaskCreatBy", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTaskCreatBy);
                this.columnTaskProgress = new DataColumn("TaskProgress", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTaskProgress);
                this.columnTaskStartDate = new DataColumn("TaskStartDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTaskStartDate);
                this.columnTaskEndDate = new DataColumn("TaskEndDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTaskEndDate);
                this.columnTaskCloseDate = new DataColumn("TaskCloseDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTaskCloseDate);
                this.columnTaskStatus = new DataColumn("TaskStatus", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTaskStatus);
                this.columnTaskDuration = new DataColumn("TaskDuration", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTaskDuration);
                this.columnTaskUnit = new DataColumn("TaskUnit", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTaskUnit);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnTaskID}, true));
                this.columnTaskID.AllowDBNull = false;
                this.columnTaskID.Unique = true;
                this.columnTaskName.AllowDBNull = false;
                this.columnTaskDesc.AllowDBNull = false;
            }
            
            public GEN_TasksRow NewGEN_TasksRow() {
                return ((GEN_TasksRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new GEN_TasksRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(GEN_TasksRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GEN_TasksRowChanged != null)) {
                    this.GEN_TasksRowChanged(this, new GEN_TasksRowChangeEvent(((GEN_TasksRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GEN_TasksRowChanging != null)) {
                    this.GEN_TasksRowChanging(this, new GEN_TasksRowChangeEvent(((GEN_TasksRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GEN_TasksRowDeleted != null)) {
                    this.GEN_TasksRowDeleted(this, new GEN_TasksRowChangeEvent(((GEN_TasksRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GEN_TasksRowDeleting != null)) {
                    this.GEN_TasksRowDeleting(this, new GEN_TasksRowChangeEvent(((GEN_TasksRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveGEN_TasksRow(GEN_TasksRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GEN_TasksRow : DataRow {
            
            private GEN_TasksDataTable tableGEN_Tasks;
            
            internal GEN_TasksRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableGEN_Tasks = ((GEN_TasksDataTable)(this.Table));
            }
            
            public int TaskID {
                get {
                    return ((int)(this[this.tableGEN_Tasks.TaskIDColumn]));
                }
                set {
                    this[this.tableGEN_Tasks.TaskIDColumn] = value;
                }
            }
            
            public int projectID {
                get {
                    try {
                        return ((int)(this[this.tableGEN_Tasks.projectIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEN_Tasks.projectIDColumn] = value;
                }
            }
            
            public int TaskForumID {
                get {
                    try {
                        return ((int)(this[this.tableGEN_Tasks.TaskForumIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEN_Tasks.TaskForumIDColumn] = value;
                }
            }
            
            public string TaskName {
                get {
                    return ((string)(this[this.tableGEN_Tasks.TaskNameColumn]));
                }
                set {
                    this[this.tableGEN_Tasks.TaskNameColumn] = value;
                }
            }
            
            public string TaskDesc {
                get {
                    return ((string)(this[this.tableGEN_Tasks.TaskDescColumn]));
                }
                set {
                    this[this.tableGEN_Tasks.TaskDescColumn] = value;
                }
            }
            
            public int TaskCreatBy {
                get {
                    try {
                        return ((int)(this[this.tableGEN_Tasks.TaskCreatByColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEN_Tasks.TaskCreatByColumn] = value;
                }
            }
            
            public short TaskProgress {
                get {
                    try {
                        return ((short)(this[this.tableGEN_Tasks.TaskProgressColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEN_Tasks.TaskProgressColumn] = value;
                }
            }
            
            public System.DateTime TaskStartDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableGEN_Tasks.TaskStartDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEN_Tasks.TaskStartDateColumn] = value;
                }
            }
            
            public System.DateTime TaskEndDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableGEN_Tasks.TaskEndDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEN_Tasks.TaskEndDateColumn] = value;
                }
            }
            
            public System.DateTime TaskCloseDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableGEN_Tasks.TaskCloseDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEN_Tasks.TaskCloseDateColumn] = value;
                }
            }
            
            public short TaskStatus {
                get {
                    try {
                        return ((short)(this[this.tableGEN_Tasks.TaskStatusColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEN_Tasks.TaskStatusColumn] = value;
                }
            }
            
            public System.Decimal TaskDuration {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableGEN_Tasks.TaskDurationColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEN_Tasks.TaskDurationColumn] = value;
                }
            }
            
            public int TaskUnit {
                get {
                    try {
                        return ((int)(this[this.tableGEN_Tasks.TaskUnitColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEN_Tasks.TaskUnitColumn] = value;
                }
            }
            
            public bool IsprojectIDNull() {
                return this.IsNull(this.tableGEN_Tasks.projectIDColumn);
            }
            
            public void SetprojectIDNull() {
                this[this.tableGEN_Tasks.projectIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsTaskForumIDNull() {
                return this.IsNull(this.tableGEN_Tasks.TaskForumIDColumn);
            }
            
            public void SetTaskForumIDNull() {
                this[this.tableGEN_Tasks.TaskForumIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsTaskCreatByNull() {
                return this.IsNull(this.tableGEN_Tasks.TaskCreatByColumn);
            }
            
            public void SetTaskCreatByNull() {
                this[this.tableGEN_Tasks.TaskCreatByColumn] = System.Convert.DBNull;
            }
            
            public bool IsTaskProgressNull() {
                return this.IsNull(this.tableGEN_Tasks.TaskProgressColumn);
            }
            
            public void SetTaskProgressNull() {
                this[this.tableGEN_Tasks.TaskProgressColumn] = System.Convert.DBNull;
            }
            
            public bool IsTaskStartDateNull() {
                return this.IsNull(this.tableGEN_Tasks.TaskStartDateColumn);
            }
            
            public void SetTaskStartDateNull() {
                this[this.tableGEN_Tasks.TaskStartDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsTaskEndDateNull() {
                return this.IsNull(this.tableGEN_Tasks.TaskEndDateColumn);
            }
            
            public void SetTaskEndDateNull() {
                this[this.tableGEN_Tasks.TaskEndDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsTaskCloseDateNull() {
                return this.IsNull(this.tableGEN_Tasks.TaskCloseDateColumn);
            }
            
            public void SetTaskCloseDateNull() {
                this[this.tableGEN_Tasks.TaskCloseDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsTaskStatusNull() {
                return this.IsNull(this.tableGEN_Tasks.TaskStatusColumn);
            }
            
            public void SetTaskStatusNull() {
                this[this.tableGEN_Tasks.TaskStatusColumn] = System.Convert.DBNull;
            }
            
            public bool IsTaskDurationNull() {
                return this.IsNull(this.tableGEN_Tasks.TaskDurationColumn);
            }
            
            public void SetTaskDurationNull() {
                this[this.tableGEN_Tasks.TaskDurationColumn] = System.Convert.DBNull;
            }
            
            public bool IsTaskUnitNull() {
                return this.IsNull(this.tableGEN_Tasks.TaskUnitColumn);
            }
            
            public void SetTaskUnitNull() {
                this[this.tableGEN_Tasks.TaskUnitColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GEN_TasksRowChangeEvent : EventArgs {
            
            private GEN_TasksRow eventRow;
            
            private DataRowAction eventAction;
            
            public GEN_TasksRowChangeEvent(GEN_TasksRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public GEN_TasksRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
