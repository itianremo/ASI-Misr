//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace TSN.ERP.SharedComponents.Data {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsCompanyElements : DataSet {
        
        private GEN_CompanyElmentsDataTable tableGEN_CompanyElments;
        
        public dsCompanyElements() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsCompanyElements(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["GEN_CompanyElments"] != null)) {
                    this.Tables.Add(new GEN_CompanyElmentsDataTable(ds.Tables["GEN_CompanyElments"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GEN_CompanyElmentsDataTable GEN_CompanyElments {
            get {
                return this.tableGEN_CompanyElments;
            }
        }
        
        public override DataSet Clone() {
            dsCompanyElements cln = ((dsCompanyElements)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["GEN_CompanyElments"] != null)) {
                this.Tables.Add(new GEN_CompanyElmentsDataTable(ds.Tables["GEN_CompanyElments"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableGEN_CompanyElments = ((GEN_CompanyElmentsDataTable)(this.Tables["GEN_CompanyElments"]));
            if ((this.tableGEN_CompanyElments != null)) {
                this.tableGEN_CompanyElments.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "dsCompanyElements";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/dsCompanyElements.xsd";
            this.Locale = new System.Globalization.CultureInfo("ar-EG");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableGEN_CompanyElments = new GEN_CompanyElmentsDataTable();
            this.Tables.Add(this.tableGEN_CompanyElments);
        }
        
        private bool ShouldSerializeGEN_CompanyElments() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void GEN_CompanyElmentsRowChangeEventHandler(object sender, GEN_CompanyElmentsRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GEN_CompanyElmentsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnCompElmentID;
            
            private DataColumn columnCEL_ID;
            
            private DataColumn columnCompID;
            
            private DataColumn columnCEParent;
            
            private DataColumn columnCEName;
            
            private DataColumn columnCEDescription;
            
            private DataColumn columnContactID;
            
            internal GEN_CompanyElmentsDataTable() : 
                    base("GEN_CompanyElments") {
                this.InitClass();
            }
            
            internal GEN_CompanyElmentsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn CompElmentIDColumn {
                get {
                    return this.columnCompElmentID;
                }
            }
            
            internal DataColumn CEL_IDColumn {
                get {
                    return this.columnCEL_ID;
                }
            }
            
            internal DataColumn CompIDColumn {
                get {
                    return this.columnCompID;
                }
            }
            
            internal DataColumn CEParentColumn {
                get {
                    return this.columnCEParent;
                }
            }
            
            internal DataColumn CENameColumn {
                get {
                    return this.columnCEName;
                }
            }
            
            internal DataColumn CEDescriptionColumn {
                get {
                    return this.columnCEDescription;
                }
            }
            
            internal DataColumn ContactIDColumn {
                get {
                    return this.columnContactID;
                }
            }
            
            public GEN_CompanyElmentsRow this[int index] {
                get {
                    return ((GEN_CompanyElmentsRow)(this.Rows[index]));
                }
            }
            
            public event GEN_CompanyElmentsRowChangeEventHandler GEN_CompanyElmentsRowChanged;
            
            public event GEN_CompanyElmentsRowChangeEventHandler GEN_CompanyElmentsRowChanging;
            
            public event GEN_CompanyElmentsRowChangeEventHandler GEN_CompanyElmentsRowDeleted;
            
            public event GEN_CompanyElmentsRowChangeEventHandler GEN_CompanyElmentsRowDeleting;
            
            public void AddGEN_CompanyElmentsRow(GEN_CompanyElmentsRow row) {
                this.Rows.Add(row);
            }
            
            public GEN_CompanyElmentsRow AddGEN_CompanyElmentsRow(int CompElmentID, int CEL_ID, int CompID, int CEParent, string CEName, string CEDescription, int ContactID) {
                GEN_CompanyElmentsRow rowGEN_CompanyElmentsRow = ((GEN_CompanyElmentsRow)(this.NewRow()));
                rowGEN_CompanyElmentsRow.ItemArray = new object[] {
                        CompElmentID,
                        CEL_ID,
                        CompID,
                        CEParent,
                        CEName,
                        CEDescription,
                        ContactID};
                this.Rows.Add(rowGEN_CompanyElmentsRow);
                return rowGEN_CompanyElmentsRow;
            }
            
            public GEN_CompanyElmentsRow FindByCompElmentID(int CompElmentID) {
                return ((GEN_CompanyElmentsRow)(this.Rows.Find(new object[] {
                            CompElmentID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                GEN_CompanyElmentsDataTable cln = ((GEN_CompanyElmentsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new GEN_CompanyElmentsDataTable();
            }
            
            internal void InitVars() {
                this.columnCompElmentID = this.Columns["CompElmentID"];
                this.columnCEL_ID = this.Columns["CEL_ID"];
                this.columnCompID = this.Columns["CompID"];
                this.columnCEParent = this.Columns["CEParent"];
                this.columnCEName = this.Columns["CEName"];
                this.columnCEDescription = this.Columns["CEDescription"];
                this.columnContactID = this.Columns["ContactID"];
            }
            
            private void InitClass() {
                this.columnCompElmentID = new DataColumn("CompElmentID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCompElmentID);
                this.columnCEL_ID = new DataColumn("CEL_ID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCEL_ID);
                this.columnCompID = new DataColumn("CompID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCompID);
                this.columnCEParent = new DataColumn("CEParent", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCEParent);
                this.columnCEName = new DataColumn("CEName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCEName);
                this.columnCEDescription = new DataColumn("CEDescription", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCEDescription);
                this.columnContactID = new DataColumn("ContactID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnContactID);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnCompElmentID}, true));
                this.columnCompElmentID.AllowDBNull = false;
                this.columnCompElmentID.Unique = true;
                this.columnCEName.AllowDBNull = false;
            }
            
            public GEN_CompanyElmentsRow NewGEN_CompanyElmentsRow() {
                return ((GEN_CompanyElmentsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new GEN_CompanyElmentsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(GEN_CompanyElmentsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GEN_CompanyElmentsRowChanged != null)) {
                    this.GEN_CompanyElmentsRowChanged(this, new GEN_CompanyElmentsRowChangeEvent(((GEN_CompanyElmentsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GEN_CompanyElmentsRowChanging != null)) {
                    this.GEN_CompanyElmentsRowChanging(this, new GEN_CompanyElmentsRowChangeEvent(((GEN_CompanyElmentsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GEN_CompanyElmentsRowDeleted != null)) {
                    this.GEN_CompanyElmentsRowDeleted(this, new GEN_CompanyElmentsRowChangeEvent(((GEN_CompanyElmentsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GEN_CompanyElmentsRowDeleting != null)) {
                    this.GEN_CompanyElmentsRowDeleting(this, new GEN_CompanyElmentsRowChangeEvent(((GEN_CompanyElmentsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveGEN_CompanyElmentsRow(GEN_CompanyElmentsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GEN_CompanyElmentsRow : DataRow {
            
            private GEN_CompanyElmentsDataTable tableGEN_CompanyElments;
            
            internal GEN_CompanyElmentsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableGEN_CompanyElments = ((GEN_CompanyElmentsDataTable)(this.Table));
            }
            
            public int CompElmentID {
                get {
                    return ((int)(this[this.tableGEN_CompanyElments.CompElmentIDColumn]));
                }
                set {
                    this[this.tableGEN_CompanyElments.CompElmentIDColumn] = value;
                }
            }
            
            public int CEL_ID {
                get {
                    try {
                        return ((int)(this[this.tableGEN_CompanyElments.CEL_IDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEN_CompanyElments.CEL_IDColumn] = value;
                }
            }
            
            public int CompID {
                get {
                    try {
                        return ((int)(this[this.tableGEN_CompanyElments.CompIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEN_CompanyElments.CompIDColumn] = value;
                }
            }
            
            public int CEParent {
                get {
                    try {
                        return ((int)(this[this.tableGEN_CompanyElments.CEParentColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEN_CompanyElments.CEParentColumn] = value;
                }
            }
            
            public string CEName {
                get {
                    return ((string)(this[this.tableGEN_CompanyElments.CENameColumn]));
                }
                set {
                    this[this.tableGEN_CompanyElments.CENameColumn] = value;
                }
            }
            
            public string CEDescription {
                get {
                    try {
                        return ((string)(this[this.tableGEN_CompanyElments.CEDescriptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEN_CompanyElments.CEDescriptionColumn] = value;
                }
            }
            
            public int ContactID {
                get {
                    try {
                        return ((int)(this[this.tableGEN_CompanyElments.ContactIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEN_CompanyElments.ContactIDColumn] = value;
                }
            }
            
            public bool IsCEL_IDNull() {
                return this.IsNull(this.tableGEN_CompanyElments.CEL_IDColumn);
            }
            
            public void SetCEL_IDNull() {
                this[this.tableGEN_CompanyElments.CEL_IDColumn] = System.Convert.DBNull;
            }
            
            public bool IsCompIDNull() {
                return this.IsNull(this.tableGEN_CompanyElments.CompIDColumn);
            }
            
            public void SetCompIDNull() {
                this[this.tableGEN_CompanyElments.CompIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsCEParentNull() {
                return this.IsNull(this.tableGEN_CompanyElments.CEParentColumn);
            }
            
            public void SetCEParentNull() {
                this[this.tableGEN_CompanyElments.CEParentColumn] = System.Convert.DBNull;
            }
            
            public bool IsCEDescriptionNull() {
                return this.IsNull(this.tableGEN_CompanyElments.CEDescriptionColumn);
            }
            
            public void SetCEDescriptionNull() {
                this[this.tableGEN_CompanyElments.CEDescriptionColumn] = System.Convert.DBNull;
            }
            
            public bool IsContactIDNull() {
                return this.IsNull(this.tableGEN_CompanyElments.ContactIDColumn);
            }
            
            public void SetContactIDNull() {
                this[this.tableGEN_CompanyElments.ContactIDColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GEN_CompanyElmentsRowChangeEvent : EventArgs {
            
            private GEN_CompanyElmentsRow eventRow;
            
            private DataRowAction eventAction;
            
            public GEN_CompanyElmentsRowChangeEvent(GEN_CompanyElmentsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public GEN_CompanyElmentsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
