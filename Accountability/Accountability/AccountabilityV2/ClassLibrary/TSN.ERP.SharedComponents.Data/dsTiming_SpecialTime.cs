//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace TSN.ERP.SharedComponents.Data {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsTiming_SpecialTime : DataSet {
        
        private Timing_SpecialTimeDataTable tableTiming_SpecialTime;
        
        public dsTiming_SpecialTime() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsTiming_SpecialTime(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Timing_SpecialTime"] != null)) {
                    this.Tables.Add(new Timing_SpecialTimeDataTable(ds.Tables["Timing_SpecialTime"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Timing_SpecialTimeDataTable Timing_SpecialTime {
            get {
                return this.tableTiming_SpecialTime;
            }
        }
        
        public override DataSet Clone() {
            dsTiming_SpecialTime cln = ((dsTiming_SpecialTime)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Timing_SpecialTime"] != null)) {
                this.Tables.Add(new Timing_SpecialTimeDataTable(ds.Tables["Timing_SpecialTime"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableTiming_SpecialTime = ((Timing_SpecialTimeDataTable)(this.Tables["Timing_SpecialTime"]));
            if ((this.tableTiming_SpecialTime != null)) {
                this.tableTiming_SpecialTime.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "dsTiming_SpecialTime";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/dsTiming_SpecialTime.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableTiming_SpecialTime = new Timing_SpecialTimeDataTable();
            this.Tables.Add(this.tableTiming_SpecialTime);
        }
        
        private bool ShouldSerializeTiming_SpecialTime() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void Timing_SpecialTimeRowChangeEventHandler(object sender, Timing_SpecialTimeRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Timing_SpecialTimeDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnSerial;
            
            private DataColumn columnStartDate;
            
            private DataColumn columnEndDate;
            
            private DataColumn columnHourEqual;
            
            internal Timing_SpecialTimeDataTable() : 
                    base("Timing_SpecialTime") {
                this.InitClass();
            }
            
            internal Timing_SpecialTimeDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn SerialColumn {
                get {
                    return this.columnSerial;
                }
            }
            
            internal DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            internal DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            internal DataColumn HourEqualColumn {
                get {
                    return this.columnHourEqual;
                }
            }
            
            public Timing_SpecialTimeRow this[int index] {
                get {
                    return ((Timing_SpecialTimeRow)(this.Rows[index]));
                }
            }
            
            public event Timing_SpecialTimeRowChangeEventHandler Timing_SpecialTimeRowChanged;
            
            public event Timing_SpecialTimeRowChangeEventHandler Timing_SpecialTimeRowChanging;
            
            public event Timing_SpecialTimeRowChangeEventHandler Timing_SpecialTimeRowDeleted;
            
            public event Timing_SpecialTimeRowChangeEventHandler Timing_SpecialTimeRowDeleting;
            
            public void AddTiming_SpecialTimeRow(Timing_SpecialTimeRow row) {
                this.Rows.Add(row);
            }
            
            public Timing_SpecialTimeRow AddTiming_SpecialTimeRow(int Serial, System.DateTime StartDate, System.DateTime EndDate, System.Decimal HourEqual) {
                Timing_SpecialTimeRow rowTiming_SpecialTimeRow = ((Timing_SpecialTimeRow)(this.NewRow()));
                rowTiming_SpecialTimeRow.ItemArray = new object[] {
                        Serial,
                        StartDate,
                        EndDate,
                        HourEqual};
                this.Rows.Add(rowTiming_SpecialTimeRow);
                return rowTiming_SpecialTimeRow;
            }
            
            public Timing_SpecialTimeRow FindBySerial(int Serial) {
                return ((Timing_SpecialTimeRow)(this.Rows.Find(new object[] {
                            Serial})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                Timing_SpecialTimeDataTable cln = ((Timing_SpecialTimeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new Timing_SpecialTimeDataTable();
            }
            
            internal void InitVars() {
                this.columnSerial = this.Columns["Serial"];
                this.columnStartDate = this.Columns["StartDate"];
                this.columnEndDate = this.Columns["EndDate"];
                this.columnHourEqual = this.Columns["HourEqual"];
            }
            
            private void InitClass() {
                this.columnSerial = new DataColumn("Serial", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSerial);
                this.columnStartDate = new DataColumn("StartDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStartDate);
                this.columnEndDate = new DataColumn("EndDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEndDate);
                this.columnHourEqual = new DataColumn("HourEqual", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHourEqual);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnSerial}, true));
                this.columnSerial.AllowDBNull = false;
                this.columnSerial.Unique = true;
                this.columnStartDate.AllowDBNull = false;
                this.columnEndDate.AllowDBNull = false;
                this.columnHourEqual.AllowDBNull = false;
            }
            
            public Timing_SpecialTimeRow NewTiming_SpecialTimeRow() {
                return ((Timing_SpecialTimeRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new Timing_SpecialTimeRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(Timing_SpecialTimeRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Timing_SpecialTimeRowChanged != null)) {
                    this.Timing_SpecialTimeRowChanged(this, new Timing_SpecialTimeRowChangeEvent(((Timing_SpecialTimeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Timing_SpecialTimeRowChanging != null)) {
                    this.Timing_SpecialTimeRowChanging(this, new Timing_SpecialTimeRowChangeEvent(((Timing_SpecialTimeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Timing_SpecialTimeRowDeleted != null)) {
                    this.Timing_SpecialTimeRowDeleted(this, new Timing_SpecialTimeRowChangeEvent(((Timing_SpecialTimeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Timing_SpecialTimeRowDeleting != null)) {
                    this.Timing_SpecialTimeRowDeleting(this, new Timing_SpecialTimeRowChangeEvent(((Timing_SpecialTimeRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTiming_SpecialTimeRow(Timing_SpecialTimeRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Timing_SpecialTimeRow : DataRow {
            
            private Timing_SpecialTimeDataTable tableTiming_SpecialTime;
            
            internal Timing_SpecialTimeRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableTiming_SpecialTime = ((Timing_SpecialTimeDataTable)(this.Table));
            }
            
            public int Serial {
                get {
                    return ((int)(this[this.tableTiming_SpecialTime.SerialColumn]));
                }
                set {
                    this[this.tableTiming_SpecialTime.SerialColumn] = value;
                }
            }
            
            public System.DateTime StartDate {
                get {
                    return ((System.DateTime)(this[this.tableTiming_SpecialTime.StartDateColumn]));
                }
                set {
                    this[this.tableTiming_SpecialTime.StartDateColumn] = value;
                }
            }
            
            public System.DateTime EndDate {
                get {
                    return ((System.DateTime)(this[this.tableTiming_SpecialTime.EndDateColumn]));
                }
                set {
                    this[this.tableTiming_SpecialTime.EndDateColumn] = value;
                }
            }
            
            public System.Decimal HourEqual {
                get {
                    return ((System.Decimal)(this[this.tableTiming_SpecialTime.HourEqualColumn]));
                }
                set {
                    this[this.tableTiming_SpecialTime.HourEqualColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Timing_SpecialTimeRowChangeEvent : EventArgs {
            
            private Timing_SpecialTimeRow eventRow;
            
            private DataRowAction eventAction;
            
            public Timing_SpecialTimeRowChangeEvent(Timing_SpecialTimeRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public Timing_SpecialTimeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
