//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace TSN.ERP.SharedComponents.Data {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsProjectsLevels : DataSet {
        
        private GEN_ProjectsHierarchyDataTable tableGEN_ProjectsHierarchy;
        
        public dsProjectsLevels() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsProjectsLevels(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["GEN_ProjectsHierarchy"] != null)) {
                    this.Tables.Add(new GEN_ProjectsHierarchyDataTable(ds.Tables["GEN_ProjectsHierarchy"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GEN_ProjectsHierarchyDataTable GEN_ProjectsHierarchy {
            get {
                return this.tableGEN_ProjectsHierarchy;
            }
        }
        
        public override DataSet Clone() {
            dsProjectsLevels cln = ((dsProjectsLevels)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["GEN_ProjectsHierarchy"] != null)) {
                this.Tables.Add(new GEN_ProjectsHierarchyDataTable(ds.Tables["GEN_ProjectsHierarchy"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableGEN_ProjectsHierarchy = ((GEN_ProjectsHierarchyDataTable)(this.Tables["GEN_ProjectsHierarchy"]));
            if ((this.tableGEN_ProjectsHierarchy != null)) {
                this.tableGEN_ProjectsHierarchy.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "dsProjectsLevels";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/dsProjectsLevels.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableGEN_ProjectsHierarchy = new GEN_ProjectsHierarchyDataTable();
            this.Tables.Add(this.tableGEN_ProjectsHierarchy);
        }
        
        private bool ShouldSerializeGEN_ProjectsHierarchy() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void GEN_ProjectsHierarchyRowChangeEventHandler(object sender, GEN_ProjectsHierarchyRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GEN_ProjectsHierarchyDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnProjectElementID;
            
            private DataColumn columnProjectElementName;
            
            private DataColumn columnProjectElementDesc;
            
            private DataColumn columnProjectElementParent;
            
            internal GEN_ProjectsHierarchyDataTable() : 
                    base("GEN_ProjectsHierarchy") {
                this.InitClass();
            }
            
            internal GEN_ProjectsHierarchyDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ProjectElementIDColumn {
                get {
                    return this.columnProjectElementID;
                }
            }
            
            internal DataColumn ProjectElementNameColumn {
                get {
                    return this.columnProjectElementName;
                }
            }
            
            internal DataColumn ProjectElementDescColumn {
                get {
                    return this.columnProjectElementDesc;
                }
            }
            
            internal DataColumn ProjectElementParentColumn {
                get {
                    return this.columnProjectElementParent;
                }
            }
            
            public GEN_ProjectsHierarchyRow this[int index] {
                get {
                    return ((GEN_ProjectsHierarchyRow)(this.Rows[index]));
                }
            }
            
            public event GEN_ProjectsHierarchyRowChangeEventHandler GEN_ProjectsHierarchyRowChanged;
            
            public event GEN_ProjectsHierarchyRowChangeEventHandler GEN_ProjectsHierarchyRowChanging;
            
            public event GEN_ProjectsHierarchyRowChangeEventHandler GEN_ProjectsHierarchyRowDeleted;
            
            public event GEN_ProjectsHierarchyRowChangeEventHandler GEN_ProjectsHierarchyRowDeleting;
            
            public void AddGEN_ProjectsHierarchyRow(GEN_ProjectsHierarchyRow row) {
                this.Rows.Add(row);
            }
            
            public GEN_ProjectsHierarchyRow AddGEN_ProjectsHierarchyRow(int ProjectElementID, string ProjectElementName, string ProjectElementDesc, int ProjectElementParent) {
                GEN_ProjectsHierarchyRow rowGEN_ProjectsHierarchyRow = ((GEN_ProjectsHierarchyRow)(this.NewRow()));
                rowGEN_ProjectsHierarchyRow.ItemArray = new object[] {
                        ProjectElementID,
                        ProjectElementName,
                        ProjectElementDesc,
                        ProjectElementParent};
                this.Rows.Add(rowGEN_ProjectsHierarchyRow);
                return rowGEN_ProjectsHierarchyRow;
            }
            
            public GEN_ProjectsHierarchyRow FindByProjectElementID(int ProjectElementID) {
                return ((GEN_ProjectsHierarchyRow)(this.Rows.Find(new object[] {
                            ProjectElementID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                GEN_ProjectsHierarchyDataTable cln = ((GEN_ProjectsHierarchyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new GEN_ProjectsHierarchyDataTable();
            }
            
            internal void InitVars() {
                this.columnProjectElementID = this.Columns["ProjectElementID"];
                this.columnProjectElementName = this.Columns["ProjectElementName"];
                this.columnProjectElementDesc = this.Columns["ProjectElementDesc"];
                this.columnProjectElementParent = this.Columns["ProjectElementParent"];
            }
            
            private void InitClass() {
                this.columnProjectElementID = new DataColumn("ProjectElementID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnProjectElementID);
                this.columnProjectElementName = new DataColumn("ProjectElementName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnProjectElementName);
                this.columnProjectElementDesc = new DataColumn("ProjectElementDesc", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnProjectElementDesc);
                this.columnProjectElementParent = new DataColumn("ProjectElementParent", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnProjectElementParent);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnProjectElementID}, true));
                this.columnProjectElementID.AllowDBNull = false;
                this.columnProjectElementID.Unique = true;
            }
            
            public GEN_ProjectsHierarchyRow NewGEN_ProjectsHierarchyRow() {
                return ((GEN_ProjectsHierarchyRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new GEN_ProjectsHierarchyRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(GEN_ProjectsHierarchyRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GEN_ProjectsHierarchyRowChanged != null)) {
                    this.GEN_ProjectsHierarchyRowChanged(this, new GEN_ProjectsHierarchyRowChangeEvent(((GEN_ProjectsHierarchyRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GEN_ProjectsHierarchyRowChanging != null)) {
                    this.GEN_ProjectsHierarchyRowChanging(this, new GEN_ProjectsHierarchyRowChangeEvent(((GEN_ProjectsHierarchyRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GEN_ProjectsHierarchyRowDeleted != null)) {
                    this.GEN_ProjectsHierarchyRowDeleted(this, new GEN_ProjectsHierarchyRowChangeEvent(((GEN_ProjectsHierarchyRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GEN_ProjectsHierarchyRowDeleting != null)) {
                    this.GEN_ProjectsHierarchyRowDeleting(this, new GEN_ProjectsHierarchyRowChangeEvent(((GEN_ProjectsHierarchyRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveGEN_ProjectsHierarchyRow(GEN_ProjectsHierarchyRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GEN_ProjectsHierarchyRow : DataRow {
            
            private GEN_ProjectsHierarchyDataTable tableGEN_ProjectsHierarchy;
            
            internal GEN_ProjectsHierarchyRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableGEN_ProjectsHierarchy = ((GEN_ProjectsHierarchyDataTable)(this.Table));
            }
            
            public int ProjectElementID {
                get {
                    return ((int)(this[this.tableGEN_ProjectsHierarchy.ProjectElementIDColumn]));
                }
                set {
                    this[this.tableGEN_ProjectsHierarchy.ProjectElementIDColumn] = value;
                }
            }
            
            public string ProjectElementName {
                get {
                    try {
                        return ((string)(this[this.tableGEN_ProjectsHierarchy.ProjectElementNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEN_ProjectsHierarchy.ProjectElementNameColumn] = value;
                }
            }
            
            public string ProjectElementDesc {
                get {
                    try {
                        return ((string)(this[this.tableGEN_ProjectsHierarchy.ProjectElementDescColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEN_ProjectsHierarchy.ProjectElementDescColumn] = value;
                }
            }
            
            public int ProjectElementParent {
                get {
                    try {
                        return ((int)(this[this.tableGEN_ProjectsHierarchy.ProjectElementParentColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEN_ProjectsHierarchy.ProjectElementParentColumn] = value;
                }
            }
            
            public bool IsProjectElementNameNull() {
                return this.IsNull(this.tableGEN_ProjectsHierarchy.ProjectElementNameColumn);
            }
            
            public void SetProjectElementNameNull() {
                this[this.tableGEN_ProjectsHierarchy.ProjectElementNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsProjectElementDescNull() {
                return this.IsNull(this.tableGEN_ProjectsHierarchy.ProjectElementDescColumn);
            }
            
            public void SetProjectElementDescNull() {
                this[this.tableGEN_ProjectsHierarchy.ProjectElementDescColumn] = System.Convert.DBNull;
            }
            
            public bool IsProjectElementParentNull() {
                return this.IsNull(this.tableGEN_ProjectsHierarchy.ProjectElementParentColumn);
            }
            
            public void SetProjectElementParentNull() {
                this[this.tableGEN_ProjectsHierarchy.ProjectElementParentColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GEN_ProjectsHierarchyRowChangeEvent : EventArgs {
            
            private GEN_ProjectsHierarchyRow eventRow;
            
            private DataRowAction eventAction;
            
            public GEN_ProjectsHierarchyRowChangeEvent(GEN_ProjectsHierarchyRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public GEN_ProjectsHierarchyRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
