//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace TSN.ERP.SharedComponents.Data {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsTiming_Employee : DataSet {
        
        private Timing_EmployeeDataTable tableTiming_Employee;
        
        public dsTiming_Employee() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsTiming_Employee(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Timing_Employee"] != null)) {
                    this.Tables.Add(new Timing_EmployeeDataTable(ds.Tables["Timing_Employee"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Timing_EmployeeDataTable Timing_Employee {
            get {
                return this.tableTiming_Employee;
            }
        }
        
        public override DataSet Clone() {
            dsTiming_Employee cln = ((dsTiming_Employee)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Timing_Employee"] != null)) {
                this.Tables.Add(new Timing_EmployeeDataTable(ds.Tables["Timing_Employee"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableTiming_Employee = ((Timing_EmployeeDataTable)(this.Tables["Timing_Employee"]));
            if ((this.tableTiming_Employee != null)) {
                this.tableTiming_Employee.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "dsTiming_Employee";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/dsTiming_Employee.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableTiming_Employee = new Timing_EmployeeDataTable();
            this.Tables.Add(this.tableTiming_Employee);
        }
        
        private bool ShouldSerializeTiming_Employee() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void Timing_EmployeeRowChangeEventHandler(object sender, Timing_EmployeeRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Timing_EmployeeDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnContactID;
            
            private DataColumn columnEmploymentType;
            
            private DataColumn columnTargetTime;
            
            private DataColumn columnQT_Balance;
            
            private DataColumn columnWorkPeriod;
            
            private DataColumn columnStartTime;
            
            private DataColumn columnEndTime;
            
            private DataColumn columnTimeRule;
            
            private DataColumn columnPC_Name;
            
            internal Timing_EmployeeDataTable() : 
                    base("Timing_Employee") {
                this.InitClass();
            }
            
            internal Timing_EmployeeDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ContactIDColumn {
                get {
                    return this.columnContactID;
                }
            }
            
            internal DataColumn EmploymentTypeColumn {
                get {
                    return this.columnEmploymentType;
                }
            }
            
            internal DataColumn TargetTimeColumn {
                get {
                    return this.columnTargetTime;
                }
            }
            
            internal DataColumn QT_BalanceColumn {
                get {
                    return this.columnQT_Balance;
                }
            }
            
            internal DataColumn WorkPeriodColumn {
                get {
                    return this.columnWorkPeriod;
                }
            }
            
            internal DataColumn StartTimeColumn {
                get {
                    return this.columnStartTime;
                }
            }
            
            internal DataColumn EndTimeColumn {
                get {
                    return this.columnEndTime;
                }
            }
            
            internal DataColumn TimeRuleColumn {
                get {
                    return this.columnTimeRule;
                }
            }
            
            internal DataColumn PC_NameColumn {
                get {
                    return this.columnPC_Name;
                }
            }
            
            public Timing_EmployeeRow this[int index] {
                get {
                    return ((Timing_EmployeeRow)(this.Rows[index]));
                }
            }
            
            public event Timing_EmployeeRowChangeEventHandler Timing_EmployeeRowChanged;
            
            public event Timing_EmployeeRowChangeEventHandler Timing_EmployeeRowChanging;
            
            public event Timing_EmployeeRowChangeEventHandler Timing_EmployeeRowDeleted;
            
            public event Timing_EmployeeRowChangeEventHandler Timing_EmployeeRowDeleting;
            
            public void AddTiming_EmployeeRow(Timing_EmployeeRow row) {
                this.Rows.Add(row);
            }
            
            public Timing_EmployeeRow AddTiming_EmployeeRow(int ContactID, bool EmploymentType, System.Decimal TargetTime, System.Decimal QT_Balance, int WorkPeriod, System.DateTime StartTime, System.DateTime EndTime, int TimeRule, string PC_Name) {
                Timing_EmployeeRow rowTiming_EmployeeRow = ((Timing_EmployeeRow)(this.NewRow()));
                rowTiming_EmployeeRow.ItemArray = new object[] {
                        ContactID,
                        EmploymentType,
                        TargetTime,
                        QT_Balance,
                        WorkPeriod,
                        StartTime,
                        EndTime,
                        TimeRule,
                        PC_Name};
                this.Rows.Add(rowTiming_EmployeeRow);
                return rowTiming_EmployeeRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                Timing_EmployeeDataTable cln = ((Timing_EmployeeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new Timing_EmployeeDataTable();
            }
            
            internal void InitVars() {
                this.columnContactID = this.Columns["ContactID"];
                this.columnEmploymentType = this.Columns["EmploymentType"];
                this.columnTargetTime = this.Columns["TargetTime"];
                this.columnQT_Balance = this.Columns["QT_Balance"];
                this.columnWorkPeriod = this.Columns["WorkPeriod"];
                this.columnStartTime = this.Columns["StartTime"];
                this.columnEndTime = this.Columns["EndTime"];
                this.columnTimeRule = this.Columns["TimeRule"];
                this.columnPC_Name = this.Columns["PC_Name"];
            }
            
            private void InitClass() {
                this.columnContactID = new DataColumn("ContactID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnContactID);
                this.columnEmploymentType = new DataColumn("EmploymentType", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEmploymentType);
                this.columnTargetTime = new DataColumn("TargetTime", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTargetTime);
                this.columnQT_Balance = new DataColumn("QT_Balance", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnQT_Balance);
                this.columnWorkPeriod = new DataColumn("WorkPeriod", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnWorkPeriod);
                this.columnStartTime = new DataColumn("StartTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStartTime);
                this.columnEndTime = new DataColumn("EndTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEndTime);
                this.columnTimeRule = new DataColumn("TimeRule", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTimeRule);
                this.columnPC_Name = new DataColumn("PC_Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPC_Name);
                this.columnContactID.AllowDBNull = false;
                this.columnEmploymentType.AllowDBNull = false;
                this.columnWorkPeriod.AllowDBNull = false;
            }
            
            public Timing_EmployeeRow NewTiming_EmployeeRow() {
                return ((Timing_EmployeeRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new Timing_EmployeeRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(Timing_EmployeeRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Timing_EmployeeRowChanged != null)) {
                    this.Timing_EmployeeRowChanged(this, new Timing_EmployeeRowChangeEvent(((Timing_EmployeeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Timing_EmployeeRowChanging != null)) {
                    this.Timing_EmployeeRowChanging(this, new Timing_EmployeeRowChangeEvent(((Timing_EmployeeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Timing_EmployeeRowDeleted != null)) {
                    this.Timing_EmployeeRowDeleted(this, new Timing_EmployeeRowChangeEvent(((Timing_EmployeeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Timing_EmployeeRowDeleting != null)) {
                    this.Timing_EmployeeRowDeleting(this, new Timing_EmployeeRowChangeEvent(((Timing_EmployeeRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTiming_EmployeeRow(Timing_EmployeeRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Timing_EmployeeRow : DataRow {
            
            private Timing_EmployeeDataTable tableTiming_Employee;
            
            internal Timing_EmployeeRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableTiming_Employee = ((Timing_EmployeeDataTable)(this.Table));
            }
            
            public int ContactID {
                get {
                    return ((int)(this[this.tableTiming_Employee.ContactIDColumn]));
                }
                set {
                    this[this.tableTiming_Employee.ContactIDColumn] = value;
                }
            }
            
            public bool EmploymentType {
                get {
                    return ((bool)(this[this.tableTiming_Employee.EmploymentTypeColumn]));
                }
                set {
                    this[this.tableTiming_Employee.EmploymentTypeColumn] = value;
                }
            }
            
            public System.Decimal TargetTime {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableTiming_Employee.TargetTimeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTiming_Employee.TargetTimeColumn] = value;
                }
            }
            
            public System.Decimal QT_Balance {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableTiming_Employee.QT_BalanceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTiming_Employee.QT_BalanceColumn] = value;
                }
            }
            
            public int WorkPeriod {
                get {
                    return ((int)(this[this.tableTiming_Employee.WorkPeriodColumn]));
                }
                set {
                    this[this.tableTiming_Employee.WorkPeriodColumn] = value;
                }
            }
            
            public System.DateTime StartTime {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableTiming_Employee.StartTimeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTiming_Employee.StartTimeColumn] = value;
                }
            }
            
            public System.DateTime EndTime {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableTiming_Employee.EndTimeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTiming_Employee.EndTimeColumn] = value;
                }
            }
            
            public int TimeRule {
                get {
                    try {
                        return ((int)(this[this.tableTiming_Employee.TimeRuleColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTiming_Employee.TimeRuleColumn] = value;
                }
            }
            
            public string PC_Name {
                get {
                    try {
                        return ((string)(this[this.tableTiming_Employee.PC_NameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTiming_Employee.PC_NameColumn] = value;
                }
            }
            
            public bool IsTargetTimeNull() {
                return this.IsNull(this.tableTiming_Employee.TargetTimeColumn);
            }
            
            public void SetTargetTimeNull() {
                this[this.tableTiming_Employee.TargetTimeColumn] = System.Convert.DBNull;
            }
            
            public bool IsQT_BalanceNull() {
                return this.IsNull(this.tableTiming_Employee.QT_BalanceColumn);
            }
            
            public void SetQT_BalanceNull() {
                this[this.tableTiming_Employee.QT_BalanceColumn] = System.Convert.DBNull;
            }
            
            public bool IsStartTimeNull() {
                return this.IsNull(this.tableTiming_Employee.StartTimeColumn);
            }
            
            public void SetStartTimeNull() {
                this[this.tableTiming_Employee.StartTimeColumn] = System.Convert.DBNull;
            }
            
            public bool IsEndTimeNull() {
                return this.IsNull(this.tableTiming_Employee.EndTimeColumn);
            }
            
            public void SetEndTimeNull() {
                this[this.tableTiming_Employee.EndTimeColumn] = System.Convert.DBNull;
            }
            
            public bool IsTimeRuleNull() {
                return this.IsNull(this.tableTiming_Employee.TimeRuleColumn);
            }
            
            public void SetTimeRuleNull() {
                this[this.tableTiming_Employee.TimeRuleColumn] = System.Convert.DBNull;
            }
            
            public bool IsPC_NameNull() {
                return this.IsNull(this.tableTiming_Employee.PC_NameColumn);
            }
            
            public void SetPC_NameNull() {
                this[this.tableTiming_Employee.PC_NameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Timing_EmployeeRowChangeEvent : EventArgs {
            
            private Timing_EmployeeRow eventRow;
            
            private DataRowAction eventAction;
            
            public Timing_EmployeeRowChangeEvent(Timing_EmployeeRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public Timing_EmployeeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
