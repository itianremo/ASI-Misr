//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace TSN.ERP.SharedComponents.Data {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsCountry : DataSet {
        
        private GEN_CountryDataTable tableGEN_Country;
        
        public dsCountry() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsCountry(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["GEN_Country"] != null)) {
                    this.Tables.Add(new GEN_CountryDataTable(ds.Tables["GEN_Country"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GEN_CountryDataTable GEN_Country {
            get {
                return this.tableGEN_Country;
            }
        }
        
        public override DataSet Clone() {
            dsCountry cln = ((dsCountry)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["GEN_Country"] != null)) {
                this.Tables.Add(new GEN_CountryDataTable(ds.Tables["GEN_Country"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableGEN_Country = ((GEN_CountryDataTable)(this.Tables["GEN_Country"]));
            if ((this.tableGEN_Country != null)) {
                this.tableGEN_Country.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "dsCountry";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/dsCountry.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableGEN_Country = new GEN_CountryDataTable();
            this.Tables.Add(this.tableGEN_Country);
        }
        
        private bool ShouldSerializeGEN_Country() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void GEN_CountryRowChangeEventHandler(object sender, GEN_CountryRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GEN_CountryDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnCountryID;
            
            private DataColumn columnCountryName;
            
            internal GEN_CountryDataTable() : 
                    base("GEN_Country") {
                this.InitClass();
            }
            
            internal GEN_CountryDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn CountryIDColumn {
                get {
                    return this.columnCountryID;
                }
            }
            
            internal DataColumn CountryNameColumn {
                get {
                    return this.columnCountryName;
                }
            }
            
            public GEN_CountryRow this[int index] {
                get {
                    return ((GEN_CountryRow)(this.Rows[index]));
                }
            }
            
            public event GEN_CountryRowChangeEventHandler GEN_CountryRowChanged;
            
            public event GEN_CountryRowChangeEventHandler GEN_CountryRowChanging;
            
            public event GEN_CountryRowChangeEventHandler GEN_CountryRowDeleted;
            
            public event GEN_CountryRowChangeEventHandler GEN_CountryRowDeleting;
            
            public void AddGEN_CountryRow(GEN_CountryRow row) {
                this.Rows.Add(row);
            }
            
            public GEN_CountryRow AddGEN_CountryRow(short CountryID, string CountryName) {
                GEN_CountryRow rowGEN_CountryRow = ((GEN_CountryRow)(this.NewRow()));
                rowGEN_CountryRow.ItemArray = new object[] {
                        CountryID,
                        CountryName};
                this.Rows.Add(rowGEN_CountryRow);
                return rowGEN_CountryRow;
            }
            
            public GEN_CountryRow FindByCountryID(short CountryID) {
                return ((GEN_CountryRow)(this.Rows.Find(new object[] {
                            CountryID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                GEN_CountryDataTable cln = ((GEN_CountryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new GEN_CountryDataTable();
            }
            
            internal void InitVars() {
                this.columnCountryID = this.Columns["CountryID"];
                this.columnCountryName = this.Columns["CountryName"];
            }
            
            private void InitClass() {
                this.columnCountryID = new DataColumn("CountryID", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCountryID);
                this.columnCountryName = new DataColumn("CountryName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCountryName);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnCountryID}, true));
                this.columnCountryID.AllowDBNull = false;
                this.columnCountryID.Unique = true;
            }
            
            public GEN_CountryRow NewGEN_CountryRow() {
                return ((GEN_CountryRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new GEN_CountryRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(GEN_CountryRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GEN_CountryRowChanged != null)) {
                    this.GEN_CountryRowChanged(this, new GEN_CountryRowChangeEvent(((GEN_CountryRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GEN_CountryRowChanging != null)) {
                    this.GEN_CountryRowChanging(this, new GEN_CountryRowChangeEvent(((GEN_CountryRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GEN_CountryRowDeleted != null)) {
                    this.GEN_CountryRowDeleted(this, new GEN_CountryRowChangeEvent(((GEN_CountryRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GEN_CountryRowDeleting != null)) {
                    this.GEN_CountryRowDeleting(this, new GEN_CountryRowChangeEvent(((GEN_CountryRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveGEN_CountryRow(GEN_CountryRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GEN_CountryRow : DataRow {
            
            private GEN_CountryDataTable tableGEN_Country;
            
            internal GEN_CountryRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableGEN_Country = ((GEN_CountryDataTable)(this.Table));
            }
            
            public short CountryID {
                get {
                    return ((short)(this[this.tableGEN_Country.CountryIDColumn]));
                }
                set {
                    this[this.tableGEN_Country.CountryIDColumn] = value;
                }
            }
            
            public string CountryName {
                get {
                    try {
                        return ((string)(this[this.tableGEN_Country.CountryNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEN_Country.CountryNameColumn] = value;
                }
            }
            
            public bool IsCountryNameNull() {
                return this.IsNull(this.tableGEN_Country.CountryNameColumn);
            }
            
            public void SetCountryNameNull() {
                this[this.tableGEN_Country.CountryNameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GEN_CountryRowChangeEvent : EventArgs {
            
            private GEN_CountryRow eventRow;
            
            private DataRowAction eventAction;
            
            public GEN_CountryRowChangeEvent(GEN_CountryRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public GEN_CountryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
