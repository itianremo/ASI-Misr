//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace TSN.ERP.SharedComponents.Data {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsTeams : DataSet {
        
        private GEN_TeamsDataTable tableGEN_Teams;
        
        public dsTeams() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsTeams(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["GEN_Teams"] != null)) {
                    this.Tables.Add(new GEN_TeamsDataTable(ds.Tables["GEN_Teams"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GEN_TeamsDataTable GEN_Teams {
            get {
                return this.tableGEN_Teams;
            }
        }
        
        public override DataSet Clone() {
            dsTeams cln = ((dsTeams)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["GEN_Teams"] != null)) {
                this.Tables.Add(new GEN_TeamsDataTable(ds.Tables["GEN_Teams"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableGEN_Teams = ((GEN_TeamsDataTable)(this.Tables["GEN_Teams"]));
            if ((this.tableGEN_Teams != null)) {
                this.tableGEN_Teams.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "dsTeams";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/dsTeams.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableGEN_Teams = new GEN_TeamsDataTable();
            this.Tables.Add(this.tableGEN_Teams);
        }
        
        private bool ShouldSerializeGEN_Teams() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void GEN_TeamsRowChangeEventHandler(object sender, GEN_TeamsRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GEN_TeamsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnTeamID;
            
            private DataColumn columnprojectID;
            
            private DataColumn columnTeamName;
            
            private DataColumn columnTeamLeader;
            
            private DataColumn columnTeamDesc;
            
            internal GEN_TeamsDataTable() : 
                    base("GEN_Teams") {
                this.InitClass();
            }
            
            internal GEN_TeamsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn TeamIDColumn {
                get {
                    return this.columnTeamID;
                }
            }
            
            internal DataColumn projectIDColumn {
                get {
                    return this.columnprojectID;
                }
            }
            
            internal DataColumn TeamNameColumn {
                get {
                    return this.columnTeamName;
                }
            }
            
            internal DataColumn TeamLeaderColumn {
                get {
                    return this.columnTeamLeader;
                }
            }
            
            internal DataColumn TeamDescColumn {
                get {
                    return this.columnTeamDesc;
                }
            }
            
            public GEN_TeamsRow this[int index] {
                get {
                    return ((GEN_TeamsRow)(this.Rows[index]));
                }
            }
            
            public event GEN_TeamsRowChangeEventHandler GEN_TeamsRowChanged;
            
            public event GEN_TeamsRowChangeEventHandler GEN_TeamsRowChanging;
            
            public event GEN_TeamsRowChangeEventHandler GEN_TeamsRowDeleted;
            
            public event GEN_TeamsRowChangeEventHandler GEN_TeamsRowDeleting;
            
            public void AddGEN_TeamsRow(GEN_TeamsRow row) {
                this.Rows.Add(row);
            }
            
            public GEN_TeamsRow AddGEN_TeamsRow(int TeamID, int projectID, string TeamName, int TeamLeader, string TeamDesc) {
                GEN_TeamsRow rowGEN_TeamsRow = ((GEN_TeamsRow)(this.NewRow()));
                rowGEN_TeamsRow.ItemArray = new object[] {
                        TeamID,
                        projectID,
                        TeamName,
                        TeamLeader,
                        TeamDesc};
                this.Rows.Add(rowGEN_TeamsRow);
                return rowGEN_TeamsRow;
            }
            
            public GEN_TeamsRow FindByTeamID(int TeamID) {
                return ((GEN_TeamsRow)(this.Rows.Find(new object[] {
                            TeamID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                GEN_TeamsDataTable cln = ((GEN_TeamsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new GEN_TeamsDataTable();
            }
            
            internal void InitVars() {
                this.columnTeamID = this.Columns["TeamID"];
                this.columnprojectID = this.Columns["projectID"];
                this.columnTeamName = this.Columns["TeamName"];
                this.columnTeamLeader = this.Columns["TeamLeader"];
                this.columnTeamDesc = this.Columns["TeamDesc"];
            }
            
            private void InitClass() {
                this.columnTeamID = new DataColumn("TeamID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTeamID);
                this.columnprojectID = new DataColumn("projectID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnprojectID);
                this.columnTeamName = new DataColumn("TeamName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTeamName);
                this.columnTeamLeader = new DataColumn("TeamLeader", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTeamLeader);
                this.columnTeamDesc = new DataColumn("TeamDesc", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTeamDesc);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnTeamID}, true));
                this.columnTeamID.AllowDBNull = false;
                this.columnTeamID.Unique = true;
                this.columnTeamName.AllowDBNull = false;
            }
            
            public GEN_TeamsRow NewGEN_TeamsRow() {
                return ((GEN_TeamsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new GEN_TeamsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(GEN_TeamsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GEN_TeamsRowChanged != null)) {
                    this.GEN_TeamsRowChanged(this, new GEN_TeamsRowChangeEvent(((GEN_TeamsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GEN_TeamsRowChanging != null)) {
                    this.GEN_TeamsRowChanging(this, new GEN_TeamsRowChangeEvent(((GEN_TeamsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GEN_TeamsRowDeleted != null)) {
                    this.GEN_TeamsRowDeleted(this, new GEN_TeamsRowChangeEvent(((GEN_TeamsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GEN_TeamsRowDeleting != null)) {
                    this.GEN_TeamsRowDeleting(this, new GEN_TeamsRowChangeEvent(((GEN_TeamsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveGEN_TeamsRow(GEN_TeamsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GEN_TeamsRow : DataRow {
            
            private GEN_TeamsDataTable tableGEN_Teams;
            
            internal GEN_TeamsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableGEN_Teams = ((GEN_TeamsDataTable)(this.Table));
            }
            
            public int TeamID {
                get {
                    return ((int)(this[this.tableGEN_Teams.TeamIDColumn]));
                }
                set {
                    this[this.tableGEN_Teams.TeamIDColumn] = value;
                }
            }
            
            public int projectID {
                get {
                    try {
                        return ((int)(this[this.tableGEN_Teams.projectIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEN_Teams.projectIDColumn] = value;
                }
            }
            
            public string TeamName {
                get {
                    return ((string)(this[this.tableGEN_Teams.TeamNameColumn]));
                }
                set {
                    this[this.tableGEN_Teams.TeamNameColumn] = value;
                }
            }
            
            public int TeamLeader {
                get {
                    try {
                        return ((int)(this[this.tableGEN_Teams.TeamLeaderColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEN_Teams.TeamLeaderColumn] = value;
                }
            }
            
            public string TeamDesc {
                get {
                    try {
                        return ((string)(this[this.tableGEN_Teams.TeamDescColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEN_Teams.TeamDescColumn] = value;
                }
            }
            
            public bool IsprojectIDNull() {
                return this.IsNull(this.tableGEN_Teams.projectIDColumn);
            }
            
            public void SetprojectIDNull() {
                this[this.tableGEN_Teams.projectIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsTeamLeaderNull() {
                return this.IsNull(this.tableGEN_Teams.TeamLeaderColumn);
            }
            
            public void SetTeamLeaderNull() {
                this[this.tableGEN_Teams.TeamLeaderColumn] = System.Convert.DBNull;
            }
            
            public bool IsTeamDescNull() {
                return this.IsNull(this.tableGEN_Teams.TeamDescColumn);
            }
            
            public void SetTeamDescNull() {
                this[this.tableGEN_Teams.TeamDescColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GEN_TeamsRowChangeEvent : EventArgs {
            
            private GEN_TeamsRow eventRow;
            
            private DataRowAction eventAction;
            
            public GEN_TeamsRowChangeEvent(GEN_TeamsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public GEN_TeamsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
