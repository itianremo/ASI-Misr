//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1873
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TSN.ERP.SharedComponents.Data {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("dsAccountabilitySheet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class dsAccountabilitySheet : global::System.Data.DataSet {
        
        private EmpAccSheetDataTable tableEmpAccSheet;
        
        private EmployeeDataDataTable tableEmployeeData;
        
        private WeekDataDataTable tableWeekData;
        
        private WeekNotesDataTable tableWeekNotes;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public dsAccountabilitySheet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected dsAccountabilitySheet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["EmpAccSheet"] != null)) {
                    base.Tables.Add(new EmpAccSheetDataTable(ds.Tables["EmpAccSheet"]));
                }
                if ((ds.Tables["EmployeeData"] != null)) {
                    base.Tables.Add(new EmployeeDataDataTable(ds.Tables["EmployeeData"]));
                }
                if ((ds.Tables["WeekData"] != null)) {
                    base.Tables.Add(new WeekDataDataTable(ds.Tables["WeekData"]));
                }
                if ((ds.Tables["WeekNotes"] != null)) {
                    base.Tables.Add(new WeekNotesDataTable(ds.Tables["WeekNotes"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EmpAccSheetDataTable EmpAccSheet {
            get {
                return this.tableEmpAccSheet;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EmployeeDataDataTable EmployeeData {
            get {
                return this.tableEmployeeData;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public WeekDataDataTable WeekData {
            get {
                return this.tableWeekData;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public WeekNotesDataTable WeekNotes {
            get {
                return this.tableWeekNotes;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            dsAccountabilitySheet cln = ((dsAccountabilitySheet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["EmpAccSheet"] != null)) {
                    base.Tables.Add(new EmpAccSheetDataTable(ds.Tables["EmpAccSheet"]));
                }
                if ((ds.Tables["EmployeeData"] != null)) {
                    base.Tables.Add(new EmployeeDataDataTable(ds.Tables["EmployeeData"]));
                }
                if ((ds.Tables["WeekData"] != null)) {
                    base.Tables.Add(new WeekDataDataTable(ds.Tables["WeekData"]));
                }
                if ((ds.Tables["WeekNotes"] != null)) {
                    base.Tables.Add(new WeekNotesDataTable(ds.Tables["WeekNotes"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableEmpAccSheet = ((EmpAccSheetDataTable)(base.Tables["EmpAccSheet"]));
            if ((initTable == true)) {
                if ((this.tableEmpAccSheet != null)) {
                    this.tableEmpAccSheet.InitVars();
                }
            }
            this.tableEmployeeData = ((EmployeeDataDataTable)(base.Tables["EmployeeData"]));
            if ((initTable == true)) {
                if ((this.tableEmployeeData != null)) {
                    this.tableEmployeeData.InitVars();
                }
            }
            this.tableWeekData = ((WeekDataDataTable)(base.Tables["WeekData"]));
            if ((initTable == true)) {
                if ((this.tableWeekData != null)) {
                    this.tableWeekData.InitVars();
                }
            }
            this.tableWeekNotes = ((WeekNotesDataTable)(base.Tables["WeekNotes"]));
            if ((initTable == true)) {
                if ((this.tableWeekNotes != null)) {
                    this.tableWeekNotes.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "dsAccountabilitySheet";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/dsAccountabilitySheet.xsd";
            this.Locale = new global::System.Globalization.CultureInfo("ar-EG");
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableEmpAccSheet = new EmpAccSheetDataTable();
            base.Tables.Add(this.tableEmpAccSheet);
            this.tableEmployeeData = new EmployeeDataDataTable();
            base.Tables.Add(this.tableEmployeeData);
            this.tableWeekData = new WeekDataDataTable();
            base.Tables.Add(this.tableWeekData);
            this.tableWeekNotes = new WeekNotesDataTable();
            base.Tables.Add(this.tableWeekNotes);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEmpAccSheet() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEmployeeData() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeWeekData() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeWeekNotes() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            dsAccountabilitySheet ds = new dsAccountabilitySheet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void EmpAccSheetRowChangeEventHandler(object sender, EmpAccSheetRowChangeEvent e);
        
        public delegate void EmployeeDataRowChangeEventHandler(object sender, EmployeeDataRowChangeEvent e);
        
        public delegate void WeekDataRowChangeEventHandler(object sender, WeekDataRowChangeEvent e);
        
        public delegate void WeekNotesRowChangeEventHandler(object sender, WeekNotesRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EmpAccSheetDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnTaskpriority;
            
            private global::System.Data.DataColumn columntaskname;
            
            private global::System.Data.DataColumn columnunit;
            
            private global::System.Data.DataColumn columnsun;
            
            private global::System.Data.DataColumn columnmon;
            
            private global::System.Data.DataColumn columntue;
            
            private global::System.Data.DataColumn columnwen;
            
            private global::System.Data.DataColumn columnthr;
            
            private global::System.Data.DataColumn columnfri;
            
            private global::System.Data.DataColumn columnsat;
            
            private global::System.Data.DataColumn columnweek;
            
            private global::System.Data.DataColumn columnStrongID;
            
            private global::System.Data.DataColumn columnRecoredType;
            
            private global::System.Data.DataColumn columnResponsPrioity;
            
            private global::System.Data.DataColumn columnParentProjectID;
            
            private global::System.Data.DataColumn columnParentResponsID;
            
            private global::System.Data.DataColumn columnAssStatus;
            
            private global::System.Data.DataColumn columndescProject;
            
            private global::System.Data.DataColumn columndescReponse;
            
            private global::System.Data.DataColumn columndescNote;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpAccSheetDataTable() {
                this.TableName = "EmpAccSheet";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmpAccSheetDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EmpAccSheetDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaskpriorityColumn {
                get {
                    return this.columnTaskpriority;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tasknameColumn {
                get {
                    return this.columntaskname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn unitColumn {
                get {
                    return this.columnunit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sunColumn {
                get {
                    return this.columnsun;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn monColumn {
                get {
                    return this.columnmon;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tueColumn {
                get {
                    return this.columntue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn wenColumn {
                get {
                    return this.columnwen;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn thrColumn {
                get {
                    return this.columnthr;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn friColumn {
                get {
                    return this.columnfri;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn satColumn {
                get {
                    return this.columnsat;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn weekColumn {
                get {
                    return this.columnweek;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StrongIDColumn {
                get {
                    return this.columnStrongID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RecoredTypeColumn {
                get {
                    return this.columnRecoredType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ResponsPrioityColumn {
                get {
                    return this.columnResponsPrioity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParentProjectIDColumn {
                get {
                    return this.columnParentProjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParentResponsIDColumn {
                get {
                    return this.columnParentResponsID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssStatusColumn {
                get {
                    return this.columnAssStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn descProjectColumn {
                get {
                    return this.columndescProject;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn descReponseColumn {
                get {
                    return this.columndescReponse;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn descNoteColumn {
                get {
                    return this.columndescNote;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpAccSheetRow this[int index] {
                get {
                    return ((EmpAccSheetRow)(this.Rows[index]));
                }
            }
            
            public event EmpAccSheetRowChangeEventHandler EmpAccSheetRowChanging;
            
            public event EmpAccSheetRowChangeEventHandler EmpAccSheetRowChanged;
            
            public event EmpAccSheetRowChangeEventHandler EmpAccSheetRowDeleting;
            
            public event EmpAccSheetRowChangeEventHandler EmpAccSheetRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEmpAccSheetRow(EmpAccSheetRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpAccSheetRow AddEmpAccSheetRow(
                        long Taskpriority, 
                        string taskname, 
                        int unit, 
                        double sun, 
                        double mon, 
                        double tue, 
                        double wen, 
                        double thr, 
                        double fri, 
                        double sat, 
                        double week, 
                        long StrongID, 
                        long RecoredType, 
                        long ResponsPrioity, 
                        long ParentProjectID, 
                        long ParentResponsID, 
                        long AssStatus, 
                        string descProject, 
                        string descReponse, 
                        string descNote) {
                EmpAccSheetRow rowEmpAccSheetRow = ((EmpAccSheetRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Taskpriority,
                        taskname,
                        unit,
                        sun,
                        mon,
                        tue,
                        wen,
                        thr,
                        fri,
                        sat,
                        week,
                        StrongID,
                        RecoredType,
                        ResponsPrioity,
                        ParentProjectID,
                        ParentResponsID,
                        AssStatus,
                        descProject,
                        descReponse,
                        descNote};
                rowEmpAccSheetRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowEmpAccSheetRow);
                return rowEmpAccSheetRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                EmpAccSheetDataTable cln = ((EmpAccSheetDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new EmpAccSheetDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTaskpriority = base.Columns["Taskpriority"];
                this.columntaskname = base.Columns["taskname"];
                this.columnunit = base.Columns["unit"];
                this.columnsun = base.Columns["sun"];
                this.columnmon = base.Columns["mon"];
                this.columntue = base.Columns["tue"];
                this.columnwen = base.Columns["wen"];
                this.columnthr = base.Columns["thr"];
                this.columnfri = base.Columns["fri"];
                this.columnsat = base.Columns["sat"];
                this.columnweek = base.Columns["week"];
                this.columnStrongID = base.Columns["StrongID"];
                this.columnRecoredType = base.Columns["RecoredType"];
                this.columnResponsPrioity = base.Columns["ResponsPrioity"];
                this.columnParentProjectID = base.Columns["ParentProjectID"];
                this.columnParentResponsID = base.Columns["ParentResponsID"];
                this.columnAssStatus = base.Columns["AssStatus"];
                this.columndescProject = base.Columns["descProject"];
                this.columndescReponse = base.Columns["descReponse"];
                this.columndescNote = base.Columns["descNote"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTaskpriority = new global::System.Data.DataColumn("Taskpriority", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaskpriority);
                this.columntaskname = new global::System.Data.DataColumn("taskname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntaskname);
                this.columnunit = new global::System.Data.DataColumn("unit", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnunit);
                this.columnsun = new global::System.Data.DataColumn("sun", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsun);
                this.columnmon = new global::System.Data.DataColumn("mon", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmon);
                this.columntue = new global::System.Data.DataColumn("tue", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntue);
                this.columnwen = new global::System.Data.DataColumn("wen", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnwen);
                this.columnthr = new global::System.Data.DataColumn("thr", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnthr);
                this.columnfri = new global::System.Data.DataColumn("fri", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfri);
                this.columnsat = new global::System.Data.DataColumn("sat", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsat);
                this.columnweek = new global::System.Data.DataColumn("week", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnweek);
                this.columnStrongID = new global::System.Data.DataColumn("StrongID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStrongID);
                this.columnRecoredType = new global::System.Data.DataColumn("RecoredType", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRecoredType);
                this.columnResponsPrioity = new global::System.Data.DataColumn("ResponsPrioity", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnResponsPrioity);
                this.columnParentProjectID = new global::System.Data.DataColumn("ParentProjectID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParentProjectID);
                this.columnParentResponsID = new global::System.Data.DataColumn("ParentResponsID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParentResponsID);
                this.columnAssStatus = new global::System.Data.DataColumn("AssStatus", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssStatus);
                this.columndescProject = new global::System.Data.DataColumn("descProject", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndescProject);
                this.columndescReponse = new global::System.Data.DataColumn("descReponse", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndescReponse);
                this.columndescNote = new global::System.Data.DataColumn("descNote", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndescNote);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpAccSheetRow NewEmpAccSheetRow() {
                return ((EmpAccSheetRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new EmpAccSheetRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(EmpAccSheetRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EmpAccSheetRowChanged != null)) {
                    this.EmpAccSheetRowChanged(this, new EmpAccSheetRowChangeEvent(((EmpAccSheetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EmpAccSheetRowChanging != null)) {
                    this.EmpAccSheetRowChanging(this, new EmpAccSheetRowChangeEvent(((EmpAccSheetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EmpAccSheetRowDeleted != null)) {
                    this.EmpAccSheetRowDeleted(this, new EmpAccSheetRowChangeEvent(((EmpAccSheetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EmpAccSheetRowDeleting != null)) {
                    this.EmpAccSheetRowDeleting(this, new EmpAccSheetRowChangeEvent(((EmpAccSheetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEmpAccSheetRow(EmpAccSheetRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsAccountabilitySheet ds = new dsAccountabilitySheet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EmpAccSheetDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EmployeeDataDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnEmployeeIndex;
            
            private global::System.Data.DataColumn columnEmployeeName;
            
            private global::System.Data.DataColumn columnDeptIndex;
            
            private global::System.Data.DataColumn columnDeptName;
            
            private global::System.Data.DataColumn columnJobIndex;
            
            private global::System.Data.DataColumn columnJobName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeDataDataTable() {
                this.TableName = "EmployeeData";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmployeeDataDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EmployeeDataDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmployeeIndexColumn {
                get {
                    return this.columnEmployeeIndex;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmployeeNameColumn {
                get {
                    return this.columnEmployeeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeptIndexColumn {
                get {
                    return this.columnDeptIndex;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeptNameColumn {
                get {
                    return this.columnDeptName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JobIndexColumn {
                get {
                    return this.columnJobIndex;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JobNameColumn {
                get {
                    return this.columnJobName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeDataRow this[int index] {
                get {
                    return ((EmployeeDataRow)(this.Rows[index]));
                }
            }
            
            public event EmployeeDataRowChangeEventHandler EmployeeDataRowChanging;
            
            public event EmployeeDataRowChangeEventHandler EmployeeDataRowChanged;
            
            public event EmployeeDataRowChangeEventHandler EmployeeDataRowDeleting;
            
            public event EmployeeDataRowChangeEventHandler EmployeeDataRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEmployeeDataRow(EmployeeDataRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeDataRow AddEmployeeDataRow(long EmployeeIndex, string EmployeeName, long DeptIndex, string DeptName, long JobIndex, string JobName) {
                EmployeeDataRow rowEmployeeDataRow = ((EmployeeDataRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        EmployeeIndex,
                        EmployeeName,
                        DeptIndex,
                        DeptName,
                        JobIndex,
                        JobName};
                rowEmployeeDataRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowEmployeeDataRow);
                return rowEmployeeDataRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                EmployeeDataDataTable cln = ((EmployeeDataDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new EmployeeDataDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEmployeeIndex = base.Columns["EmployeeIndex"];
                this.columnEmployeeName = base.Columns["EmployeeName"];
                this.columnDeptIndex = base.Columns["DeptIndex"];
                this.columnDeptName = base.Columns["DeptName"];
                this.columnJobIndex = base.Columns["JobIndex"];
                this.columnJobName = base.Columns["JobName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEmployeeIndex = new global::System.Data.DataColumn("EmployeeIndex", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmployeeIndex);
                this.columnEmployeeName = new global::System.Data.DataColumn("EmployeeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmployeeName);
                this.columnDeptIndex = new global::System.Data.DataColumn("DeptIndex", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeptIndex);
                this.columnDeptName = new global::System.Data.DataColumn("DeptName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeptName);
                this.columnJobIndex = new global::System.Data.DataColumn("JobIndex", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJobIndex);
                this.columnJobName = new global::System.Data.DataColumn("JobName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJobName);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeDataRow NewEmployeeDataRow() {
                return ((EmployeeDataRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new EmployeeDataRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(EmployeeDataRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EmployeeDataRowChanged != null)) {
                    this.EmployeeDataRowChanged(this, new EmployeeDataRowChangeEvent(((EmployeeDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EmployeeDataRowChanging != null)) {
                    this.EmployeeDataRowChanging(this, new EmployeeDataRowChangeEvent(((EmployeeDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EmployeeDataRowDeleted != null)) {
                    this.EmployeeDataRowDeleted(this, new EmployeeDataRowChangeEvent(((EmployeeDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EmployeeDataRowDeleting != null)) {
                    this.EmployeeDataRowDeleting(this, new EmployeeDataRowChangeEvent(((EmployeeDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEmployeeDataRow(EmployeeDataRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsAccountabilitySheet ds = new dsAccountabilitySheet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EmployeeDataDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class WeekDataDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnSunDate;
            
            private global::System.Data.DataColumn columnMonDate;
            
            private global::System.Data.DataColumn columnTueDate;
            
            private global::System.Data.DataColumn columnWedDate;
            
            private global::System.Data.DataColumn columnThurDate;
            
            private global::System.Data.DataColumn columnFriDate;
            
            private global::System.Data.DataColumn columnSatDate;
            
            private global::System.Data.DataColumn columnSunTotal;
            
            private global::System.Data.DataColumn columnMonTotal;
            
            private global::System.Data.DataColumn columnWedTotal;
            
            private global::System.Data.DataColumn columnFriTotal;
            
            private global::System.Data.DataColumn columnSatTotal;
            
            private global::System.Data.DataColumn columnWeekTotal;
            
            private global::System.Data.DataColumn columnMonth;
            
            private global::System.Data.DataColumn columnWeek;
            
            private global::System.Data.DataColumn columnYear;
            
            private global::System.Data.DataColumn columnThurTotal;
            
            private global::System.Data.DataColumn columnTuesTotal;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WeekDataDataTable() {
                this.TableName = "WeekData";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal WeekDataDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected WeekDataDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SunDateColumn {
                get {
                    return this.columnSunDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MonDateColumn {
                get {
                    return this.columnMonDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TueDateColumn {
                get {
                    return this.columnTueDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WedDateColumn {
                get {
                    return this.columnWedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ThurDateColumn {
                get {
                    return this.columnThurDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FriDateColumn {
                get {
                    return this.columnFriDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SatDateColumn {
                get {
                    return this.columnSatDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SunTotalColumn {
                get {
                    return this.columnSunTotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MonTotalColumn {
                get {
                    return this.columnMonTotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WedTotalColumn {
                get {
                    return this.columnWedTotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FriTotalColumn {
                get {
                    return this.columnFriTotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SatTotalColumn {
                get {
                    return this.columnSatTotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WeekTotalColumn {
                get {
                    return this.columnWeekTotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MonthColumn {
                get {
                    return this.columnMonth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WeekColumn {
                get {
                    return this.columnWeek;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn YearColumn {
                get {
                    return this.columnYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ThurTotalColumn {
                get {
                    return this.columnThurTotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TuesTotalColumn {
                get {
                    return this.columnTuesTotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WeekDataRow this[int index] {
                get {
                    return ((WeekDataRow)(this.Rows[index]));
                }
            }
            
            public event WeekDataRowChangeEventHandler WeekDataRowChanging;
            
            public event WeekDataRowChangeEventHandler WeekDataRowChanged;
            
            public event WeekDataRowChangeEventHandler WeekDataRowDeleting;
            
            public event WeekDataRowChangeEventHandler WeekDataRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddWeekDataRow(WeekDataRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WeekDataRow AddWeekDataRow(
                        System.DateTime SunDate, 
                        System.DateTime MonDate, 
                        System.DateTime TueDate, 
                        System.DateTime WedDate, 
                        System.DateTime ThurDate, 
                        System.DateTime FriDate, 
                        System.DateTime SatDate, 
                        double SunTotal, 
                        double MonTotal, 
                        double WedTotal, 
                        double FriTotal, 
                        double SatTotal, 
                        double WeekTotal, 
                        long Month, 
                        long Week, 
                        long Year, 
                        double ThurTotal, 
                        double TuesTotal) {
                WeekDataRow rowWeekDataRow = ((WeekDataRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SunDate,
                        MonDate,
                        TueDate,
                        WedDate,
                        ThurDate,
                        FriDate,
                        SatDate,
                        SunTotal,
                        MonTotal,
                        WedTotal,
                        FriTotal,
                        SatTotal,
                        WeekTotal,
                        Month,
                        Week,
                        Year,
                        ThurTotal,
                        TuesTotal};
                rowWeekDataRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowWeekDataRow);
                return rowWeekDataRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                WeekDataDataTable cln = ((WeekDataDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new WeekDataDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSunDate = base.Columns["SunDate"];
                this.columnMonDate = base.Columns["MonDate"];
                this.columnTueDate = base.Columns["TueDate"];
                this.columnWedDate = base.Columns["WedDate"];
                this.columnThurDate = base.Columns["ThurDate"];
                this.columnFriDate = base.Columns["FriDate"];
                this.columnSatDate = base.Columns["SatDate"];
                this.columnSunTotal = base.Columns["SunTotal"];
                this.columnMonTotal = base.Columns["MonTotal"];
                this.columnWedTotal = base.Columns["WedTotal"];
                this.columnFriTotal = base.Columns["FriTotal"];
                this.columnSatTotal = base.Columns["SatTotal"];
                this.columnWeekTotal = base.Columns["WeekTotal"];
                this.columnMonth = base.Columns["Month"];
                this.columnWeek = base.Columns["Week"];
                this.columnYear = base.Columns["Year"];
                this.columnThurTotal = base.Columns["ThurTotal"];
                this.columnTuesTotal = base.Columns["TuesTotal"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSunDate = new global::System.Data.DataColumn("SunDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSunDate);
                this.columnMonDate = new global::System.Data.DataColumn("MonDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMonDate);
                this.columnTueDate = new global::System.Data.DataColumn("TueDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTueDate);
                this.columnWedDate = new global::System.Data.DataColumn("WedDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWedDate);
                this.columnThurDate = new global::System.Data.DataColumn("ThurDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnThurDate);
                this.columnFriDate = new global::System.Data.DataColumn("FriDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFriDate);
                this.columnSatDate = new global::System.Data.DataColumn("SatDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSatDate);
                this.columnSunTotal = new global::System.Data.DataColumn("SunTotal", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSunTotal);
                this.columnMonTotal = new global::System.Data.DataColumn("MonTotal", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMonTotal);
                this.columnWedTotal = new global::System.Data.DataColumn("WedTotal", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWedTotal);
                this.columnFriTotal = new global::System.Data.DataColumn("FriTotal", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFriTotal);
                this.columnSatTotal = new global::System.Data.DataColumn("SatTotal", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSatTotal);
                this.columnWeekTotal = new global::System.Data.DataColumn("WeekTotal", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWeekTotal);
                this.columnMonth = new global::System.Data.DataColumn("Month", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMonth);
                this.columnWeek = new global::System.Data.DataColumn("Week", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWeek);
                this.columnYear = new global::System.Data.DataColumn("Year", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnYear);
                this.columnThurTotal = new global::System.Data.DataColumn("ThurTotal", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnThurTotal);
                this.columnTuesTotal = new global::System.Data.DataColumn("TuesTotal", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTuesTotal);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WeekDataRow NewWeekDataRow() {
                return ((WeekDataRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new WeekDataRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(WeekDataRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.WeekDataRowChanged != null)) {
                    this.WeekDataRowChanged(this, new WeekDataRowChangeEvent(((WeekDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.WeekDataRowChanging != null)) {
                    this.WeekDataRowChanging(this, new WeekDataRowChangeEvent(((WeekDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.WeekDataRowDeleted != null)) {
                    this.WeekDataRowDeleted(this, new WeekDataRowChangeEvent(((WeekDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.WeekDataRowDeleting != null)) {
                    this.WeekDataRowDeleting(this, new WeekDataRowChangeEvent(((WeekDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveWeekDataRow(WeekDataRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsAccountabilitySheet ds = new dsAccountabilitySheet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "WeekDataDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class WeekNotesDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnNoteDate;
            
            private global::System.Data.DataColumn columnNoteBody;
            
            private global::System.Data.DataColumn columnHasDaysOff;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WeekNotesDataTable() {
                this.TableName = "WeekNotes";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal WeekNotesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected WeekNotesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NoteDateColumn {
                get {
                    return this.columnNoteDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NoteBodyColumn {
                get {
                    return this.columnNoteBody;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HasDaysOffColumn {
                get {
                    return this.columnHasDaysOff;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WeekNotesRow this[int index] {
                get {
                    return ((WeekNotesRow)(this.Rows[index]));
                }
            }
            
            public event WeekNotesRowChangeEventHandler WeekNotesRowChanging;
            
            public event WeekNotesRowChangeEventHandler WeekNotesRowChanged;
            
            public event WeekNotesRowChangeEventHandler WeekNotesRowDeleting;
            
            public event WeekNotesRowChangeEventHandler WeekNotesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddWeekNotesRow(WeekNotesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WeekNotesRow AddWeekNotesRow(System.DateTime NoteDate, string NoteBody, bool HasDaysOff) {
                WeekNotesRow rowWeekNotesRow = ((WeekNotesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        NoteDate,
                        NoteBody,
                        HasDaysOff};
                rowWeekNotesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowWeekNotesRow);
                return rowWeekNotesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                WeekNotesDataTable cln = ((WeekNotesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new WeekNotesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnNoteDate = base.Columns["NoteDate"];
                this.columnNoteBody = base.Columns["NoteBody"];
                this.columnHasDaysOff = base.Columns["HasDaysOff"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnNoteDate = new global::System.Data.DataColumn("NoteDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNoteDate);
                this.columnNoteBody = new global::System.Data.DataColumn("NoteBody", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNoteBody);
                this.columnHasDaysOff = new global::System.Data.DataColumn("HasDaysOff", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHasDaysOff);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WeekNotesRow NewWeekNotesRow() {
                return ((WeekNotesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new WeekNotesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(WeekNotesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.WeekNotesRowChanged != null)) {
                    this.WeekNotesRowChanged(this, new WeekNotesRowChangeEvent(((WeekNotesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.WeekNotesRowChanging != null)) {
                    this.WeekNotesRowChanging(this, new WeekNotesRowChangeEvent(((WeekNotesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.WeekNotesRowDeleted != null)) {
                    this.WeekNotesRowDeleted(this, new WeekNotesRowChangeEvent(((WeekNotesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.WeekNotesRowDeleting != null)) {
                    this.WeekNotesRowDeleting(this, new WeekNotesRowChangeEvent(((WeekNotesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveWeekNotesRow(WeekNotesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsAccountabilitySheet ds = new dsAccountabilitySheet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "WeekNotesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EmpAccSheetRow : global::System.Data.DataRow {
            
            private EmpAccSheetDataTable tableEmpAccSheet;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmpAccSheetRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEmpAccSheet = ((EmpAccSheetDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long Taskpriority {
                get {
                    try {
                        return ((long)(this[this.tableEmpAccSheet.TaskpriorityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Taskpriority\' in table \'EmpAccSheet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpAccSheet.TaskpriorityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string taskname {
                get {
                    try {
                        return ((string)(this[this.tableEmpAccSheet.tasknameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'taskname\' in table \'EmpAccSheet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpAccSheet.tasknameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int unit {
                get {
                    try {
                        return ((int)(this[this.tableEmpAccSheet.unitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'unit\' in table \'EmpAccSheet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpAccSheet.unitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double sun {
                get {
                    try {
                        return ((double)(this[this.tableEmpAccSheet.sunColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sun\' in table \'EmpAccSheet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpAccSheet.sunColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double mon {
                get {
                    try {
                        return ((double)(this[this.tableEmpAccSheet.monColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'mon\' in table \'EmpAccSheet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpAccSheet.monColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double tue {
                get {
                    try {
                        return ((double)(this[this.tableEmpAccSheet.tueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tue\' in table \'EmpAccSheet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpAccSheet.tueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double wen {
                get {
                    try {
                        return ((double)(this[this.tableEmpAccSheet.wenColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'wen\' in table \'EmpAccSheet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpAccSheet.wenColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double thr {
                get {
                    try {
                        return ((double)(this[this.tableEmpAccSheet.thrColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'thr\' in table \'EmpAccSheet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpAccSheet.thrColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double fri {
                get {
                    try {
                        return ((double)(this[this.tableEmpAccSheet.friColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'fri\' in table \'EmpAccSheet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpAccSheet.friColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double sat {
                get {
                    try {
                        return ((double)(this[this.tableEmpAccSheet.satColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sat\' in table \'EmpAccSheet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpAccSheet.satColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double week {
                get {
                    try {
                        return ((double)(this[this.tableEmpAccSheet.weekColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'week\' in table \'EmpAccSheet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpAccSheet.weekColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long StrongID {
                get {
                    try {
                        return ((long)(this[this.tableEmpAccSheet.StrongIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StrongID\' in table \'EmpAccSheet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpAccSheet.StrongIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long RecoredType {
                get {
                    try {
                        return ((long)(this[this.tableEmpAccSheet.RecoredTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RecoredType\' in table \'EmpAccSheet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpAccSheet.RecoredTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long ResponsPrioity {
                get {
                    try {
                        return ((long)(this[this.tableEmpAccSheet.ResponsPrioityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ResponsPrioity\' in table \'EmpAccSheet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpAccSheet.ResponsPrioityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long ParentProjectID {
                get {
                    try {
                        return ((long)(this[this.tableEmpAccSheet.ParentProjectIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParentProjectID\' in table \'EmpAccSheet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpAccSheet.ParentProjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long ParentResponsID {
                get {
                    try {
                        return ((long)(this[this.tableEmpAccSheet.ParentResponsIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParentResponsID\' in table \'EmpAccSheet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpAccSheet.ParentResponsIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long AssStatus {
                get {
                    try {
                        return ((long)(this[this.tableEmpAccSheet.AssStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssStatus\' in table \'EmpAccSheet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpAccSheet.AssStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string descProject {
                get {
                    try {
                        return ((string)(this[this.tableEmpAccSheet.descProjectColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'descProject\' in table \'EmpAccSheet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpAccSheet.descProjectColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string descReponse {
                get {
                    try {
                        return ((string)(this[this.tableEmpAccSheet.descReponseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'descReponse\' in table \'EmpAccSheet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpAccSheet.descReponseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string descNote {
                get {
                    try {
                        return ((string)(this[this.tableEmpAccSheet.descNoteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'descNote\' in table \'EmpAccSheet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmpAccSheet.descNoteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaskpriorityNull() {
                return this.IsNull(this.tableEmpAccSheet.TaskpriorityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaskpriorityNull() {
                this[this.tableEmpAccSheet.TaskpriorityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstasknameNull() {
                return this.IsNull(this.tableEmpAccSheet.tasknameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettasknameNull() {
                this[this.tableEmpAccSheet.tasknameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsunitNull() {
                return this.IsNull(this.tableEmpAccSheet.unitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetunitNull() {
                this[this.tableEmpAccSheet.unitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssunNull() {
                return this.IsNull(this.tableEmpAccSheet.sunColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsunNull() {
                this[this.tableEmpAccSheet.sunColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmonNull() {
                return this.IsNull(this.tableEmpAccSheet.monColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmonNull() {
                this[this.tableEmpAccSheet.monColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstueNull() {
                return this.IsNull(this.tableEmpAccSheet.tueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettueNull() {
                this[this.tableEmpAccSheet.tueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IswenNull() {
                return this.IsNull(this.tableEmpAccSheet.wenColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetwenNull() {
                this[this.tableEmpAccSheet.wenColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsthrNull() {
                return this.IsNull(this.tableEmpAccSheet.thrColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetthrNull() {
                this[this.tableEmpAccSheet.thrColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfriNull() {
                return this.IsNull(this.tableEmpAccSheet.friColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfriNull() {
                this[this.tableEmpAccSheet.friColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssatNull() {
                return this.IsNull(this.tableEmpAccSheet.satColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsatNull() {
                this[this.tableEmpAccSheet.satColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsweekNull() {
                return this.IsNull(this.tableEmpAccSheet.weekColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetweekNull() {
                this[this.tableEmpAccSheet.weekColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStrongIDNull() {
                return this.IsNull(this.tableEmpAccSheet.StrongIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStrongIDNull() {
                this[this.tableEmpAccSheet.StrongIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRecoredTypeNull() {
                return this.IsNull(this.tableEmpAccSheet.RecoredTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRecoredTypeNull() {
                this[this.tableEmpAccSheet.RecoredTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsResponsPrioityNull() {
                return this.IsNull(this.tableEmpAccSheet.ResponsPrioityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetResponsPrioityNull() {
                this[this.tableEmpAccSheet.ResponsPrioityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParentProjectIDNull() {
                return this.IsNull(this.tableEmpAccSheet.ParentProjectIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParentProjectIDNull() {
                this[this.tableEmpAccSheet.ParentProjectIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParentResponsIDNull() {
                return this.IsNull(this.tableEmpAccSheet.ParentResponsIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParentResponsIDNull() {
                this[this.tableEmpAccSheet.ParentResponsIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssStatusNull() {
                return this.IsNull(this.tableEmpAccSheet.AssStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssStatusNull() {
                this[this.tableEmpAccSheet.AssStatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdescProjectNull() {
                return this.IsNull(this.tableEmpAccSheet.descProjectColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdescProjectNull() {
                this[this.tableEmpAccSheet.descProjectColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdescReponseNull() {
                return this.IsNull(this.tableEmpAccSheet.descReponseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdescReponseNull() {
                this[this.tableEmpAccSheet.descReponseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdescNoteNull() {
                return this.IsNull(this.tableEmpAccSheet.descNoteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdescNoteNull() {
                this[this.tableEmpAccSheet.descNoteColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EmployeeDataRow : global::System.Data.DataRow {
            
            private EmployeeDataDataTable tableEmployeeData;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmployeeDataRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEmployeeData = ((EmployeeDataDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long EmployeeIndex {
                get {
                    try {
                        return ((long)(this[this.tableEmployeeData.EmployeeIndexColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmployeeIndex\' in table \'EmployeeData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeeData.EmployeeIndexColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmployeeName {
                get {
                    try {
                        return ((string)(this[this.tableEmployeeData.EmployeeNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmployeeName\' in table \'EmployeeData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeeData.EmployeeNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long DeptIndex {
                get {
                    try {
                        return ((long)(this[this.tableEmployeeData.DeptIndexColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeptIndex\' in table \'EmployeeData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeeData.DeptIndexColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DeptName {
                get {
                    try {
                        return ((string)(this[this.tableEmployeeData.DeptNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeptName\' in table \'EmployeeData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeeData.DeptNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long JobIndex {
                get {
                    try {
                        return ((long)(this[this.tableEmployeeData.JobIndexColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'JobIndex\' in table \'EmployeeData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeeData.JobIndexColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string JobName {
                get {
                    try {
                        return ((string)(this[this.tableEmployeeData.JobNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'JobName\' in table \'EmployeeData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeeData.JobNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmployeeIndexNull() {
                return this.IsNull(this.tableEmployeeData.EmployeeIndexColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmployeeIndexNull() {
                this[this.tableEmployeeData.EmployeeIndexColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmployeeNameNull() {
                return this.IsNull(this.tableEmployeeData.EmployeeNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmployeeNameNull() {
                this[this.tableEmployeeData.EmployeeNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeptIndexNull() {
                return this.IsNull(this.tableEmployeeData.DeptIndexColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeptIndexNull() {
                this[this.tableEmployeeData.DeptIndexColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeptNameNull() {
                return this.IsNull(this.tableEmployeeData.DeptNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeptNameNull() {
                this[this.tableEmployeeData.DeptNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJobIndexNull() {
                return this.IsNull(this.tableEmployeeData.JobIndexColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJobIndexNull() {
                this[this.tableEmployeeData.JobIndexColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJobNameNull() {
                return this.IsNull(this.tableEmployeeData.JobNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJobNameNull() {
                this[this.tableEmployeeData.JobNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class WeekDataRow : global::System.Data.DataRow {
            
            private WeekDataDataTable tableWeekData;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal WeekDataRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableWeekData = ((WeekDataDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime SunDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableWeekData.SunDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SunDate\' in table \'WeekData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWeekData.SunDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime MonDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableWeekData.MonDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MonDate\' in table \'WeekData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWeekData.MonDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime TueDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableWeekData.TueDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TueDate\' in table \'WeekData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWeekData.TueDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime WedDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableWeekData.WedDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WedDate\' in table \'WeekData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWeekData.WedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ThurDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableWeekData.ThurDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ThurDate\' in table \'WeekData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWeekData.ThurDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime FriDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableWeekData.FriDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FriDate\' in table \'WeekData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWeekData.FriDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime SatDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableWeekData.SatDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SatDate\' in table \'WeekData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWeekData.SatDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double SunTotal {
                get {
                    try {
                        return ((double)(this[this.tableWeekData.SunTotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SunTotal\' in table \'WeekData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWeekData.SunTotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double MonTotal {
                get {
                    try {
                        return ((double)(this[this.tableWeekData.MonTotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MonTotal\' in table \'WeekData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWeekData.MonTotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double WedTotal {
                get {
                    try {
                        return ((double)(this[this.tableWeekData.WedTotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WedTotal\' in table \'WeekData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWeekData.WedTotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double FriTotal {
                get {
                    try {
                        return ((double)(this[this.tableWeekData.FriTotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FriTotal\' in table \'WeekData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWeekData.FriTotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double SatTotal {
                get {
                    try {
                        return ((double)(this[this.tableWeekData.SatTotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SatTotal\' in table \'WeekData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWeekData.SatTotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double WeekTotal {
                get {
                    try {
                        return ((double)(this[this.tableWeekData.WeekTotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WeekTotal\' in table \'WeekData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWeekData.WeekTotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long Month {
                get {
                    try {
                        return ((long)(this[this.tableWeekData.MonthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Month\' in table \'WeekData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWeekData.MonthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long Week {
                get {
                    try {
                        return ((long)(this[this.tableWeekData.WeekColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Week\' in table \'WeekData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWeekData.WeekColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long Year {
                get {
                    try {
                        return ((long)(this[this.tableWeekData.YearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Year\' in table \'WeekData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWeekData.YearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ThurTotal {
                get {
                    try {
                        return ((double)(this[this.tableWeekData.ThurTotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ThurTotal\' in table \'WeekData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWeekData.ThurTotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TuesTotal {
                get {
                    try {
                        return ((double)(this[this.tableWeekData.TuesTotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TuesTotal\' in table \'WeekData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWeekData.TuesTotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSunDateNull() {
                return this.IsNull(this.tableWeekData.SunDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSunDateNull() {
                this[this.tableWeekData.SunDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMonDateNull() {
                return this.IsNull(this.tableWeekData.MonDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMonDateNull() {
                this[this.tableWeekData.MonDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTueDateNull() {
                return this.IsNull(this.tableWeekData.TueDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTueDateNull() {
                this[this.tableWeekData.TueDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWedDateNull() {
                return this.IsNull(this.tableWeekData.WedDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWedDateNull() {
                this[this.tableWeekData.WedDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsThurDateNull() {
                return this.IsNull(this.tableWeekData.ThurDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetThurDateNull() {
                this[this.tableWeekData.ThurDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFriDateNull() {
                return this.IsNull(this.tableWeekData.FriDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFriDateNull() {
                this[this.tableWeekData.FriDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSatDateNull() {
                return this.IsNull(this.tableWeekData.SatDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSatDateNull() {
                this[this.tableWeekData.SatDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSunTotalNull() {
                return this.IsNull(this.tableWeekData.SunTotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSunTotalNull() {
                this[this.tableWeekData.SunTotalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMonTotalNull() {
                return this.IsNull(this.tableWeekData.MonTotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMonTotalNull() {
                this[this.tableWeekData.MonTotalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWedTotalNull() {
                return this.IsNull(this.tableWeekData.WedTotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWedTotalNull() {
                this[this.tableWeekData.WedTotalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFriTotalNull() {
                return this.IsNull(this.tableWeekData.FriTotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFriTotalNull() {
                this[this.tableWeekData.FriTotalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSatTotalNull() {
                return this.IsNull(this.tableWeekData.SatTotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSatTotalNull() {
                this[this.tableWeekData.SatTotalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWeekTotalNull() {
                return this.IsNull(this.tableWeekData.WeekTotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWeekTotalNull() {
                this[this.tableWeekData.WeekTotalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMonthNull() {
                return this.IsNull(this.tableWeekData.MonthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMonthNull() {
                this[this.tableWeekData.MonthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWeekNull() {
                return this.IsNull(this.tableWeekData.WeekColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWeekNull() {
                this[this.tableWeekData.WeekColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsYearNull() {
                return this.IsNull(this.tableWeekData.YearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetYearNull() {
                this[this.tableWeekData.YearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsThurTotalNull() {
                return this.IsNull(this.tableWeekData.ThurTotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetThurTotalNull() {
                this[this.tableWeekData.ThurTotalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTuesTotalNull() {
                return this.IsNull(this.tableWeekData.TuesTotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTuesTotalNull() {
                this[this.tableWeekData.TuesTotalColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class WeekNotesRow : global::System.Data.DataRow {
            
            private WeekNotesDataTable tableWeekNotes;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal WeekNotesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableWeekNotes = ((WeekNotesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime NoteDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableWeekNotes.NoteDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NoteDate\' in table \'WeekNotes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWeekNotes.NoteDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NoteBody {
                get {
                    try {
                        return ((string)(this[this.tableWeekNotes.NoteBodyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NoteBody\' in table \'WeekNotes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWeekNotes.NoteBodyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool HasDaysOff {
                get {
                    try {
                        return ((bool)(this[this.tableWeekNotes.HasDaysOffColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HasDaysOff\' in table \'WeekNotes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWeekNotes.HasDaysOffColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNoteDateNull() {
                return this.IsNull(this.tableWeekNotes.NoteDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNoteDateNull() {
                this[this.tableWeekNotes.NoteDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNoteBodyNull() {
                return this.IsNull(this.tableWeekNotes.NoteBodyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNoteBodyNull() {
                this[this.tableWeekNotes.NoteBodyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHasDaysOffNull() {
                return this.IsNull(this.tableWeekNotes.HasDaysOffColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHasDaysOffNull() {
                this[this.tableWeekNotes.HasDaysOffColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EmpAccSheetRowChangeEvent : global::System.EventArgs {
            
            private EmpAccSheetRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpAccSheetRowChangeEvent(EmpAccSheetRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmpAccSheetRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EmployeeDataRowChangeEvent : global::System.EventArgs {
            
            private EmployeeDataRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeDataRowChangeEvent(EmployeeDataRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeDataRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class WeekDataRowChangeEvent : global::System.EventArgs {
            
            private WeekDataRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WeekDataRowChangeEvent(WeekDataRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WeekDataRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class WeekNotesRowChangeEvent : global::System.EventArgs {
            
            private WeekNotesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WeekNotesRowChangeEvent(WeekNotesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WeekNotesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591