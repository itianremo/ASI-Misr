//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1873
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TSN.ERP.SharedComponents.Data {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("dsAccDailyEntries")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class dsAccDailyEntries : global::System.Data.DataSet {
        
        private GEN_AccDailyEntriesDataTable tableGEN_AccDailyEntries;
        
        private GEN_ProjectsDataTable tableGEN_Projects;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public dsAccDailyEntries() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected dsAccDailyEntries(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["GEN_AccDailyEntries"] != null)) {
                    base.Tables.Add(new GEN_AccDailyEntriesDataTable(ds.Tables["GEN_AccDailyEntries"]));
                }
                if ((ds.Tables["GEN_Projects"] != null)) {
                    base.Tables.Add(new GEN_ProjectsDataTable(ds.Tables["GEN_Projects"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GEN_AccDailyEntriesDataTable GEN_AccDailyEntries {
            get {
                return this.tableGEN_AccDailyEntries;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GEN_ProjectsDataTable GEN_Projects {
            get {
                return this.tableGEN_Projects;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            dsAccDailyEntries cln = ((dsAccDailyEntries)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["GEN_AccDailyEntries"] != null)) {
                    base.Tables.Add(new GEN_AccDailyEntriesDataTable(ds.Tables["GEN_AccDailyEntries"]));
                }
                if ((ds.Tables["GEN_Projects"] != null)) {
                    base.Tables.Add(new GEN_ProjectsDataTable(ds.Tables["GEN_Projects"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableGEN_AccDailyEntries = ((GEN_AccDailyEntriesDataTable)(base.Tables["GEN_AccDailyEntries"]));
            if ((initTable == true)) {
                if ((this.tableGEN_AccDailyEntries != null)) {
                    this.tableGEN_AccDailyEntries.InitVars();
                }
            }
            this.tableGEN_Projects = ((GEN_ProjectsDataTable)(base.Tables["GEN_Projects"]));
            if ((initTable == true)) {
                if ((this.tableGEN_Projects != null)) {
                    this.tableGEN_Projects.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "dsAccDailyEntries";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/dsAccDailyEntries.xsd";
            this.Locale = new global::System.Globalization.CultureInfo("ar-EG");
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableGEN_AccDailyEntries = new GEN_AccDailyEntriesDataTable();
            base.Tables.Add(this.tableGEN_AccDailyEntries);
            this.tableGEN_Projects = new GEN_ProjectsDataTable();
            base.Tables.Add(this.tableGEN_Projects);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGEN_AccDailyEntries() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGEN_Projects() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            dsAccDailyEntries ds = new dsAccDailyEntries();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void GEN_AccDailyEntriesRowChangeEventHandler(object sender, GEN_AccDailyEntriesRowChangeEvent e);
        
        public delegate void GEN_ProjectsRowChangeEventHandler(object sender, GEN_ProjectsRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GEN_AccDailyEntriesDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnTransID;
            
            private global::System.Data.DataColumn columnNoteID;
            
            private global::System.Data.DataColumn columnAssignmentD;
            
            private global::System.Data.DataColumn columnAccountabilityValue;
            
            private global::System.Data.DataColumn columnAccountabilityDate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GEN_AccDailyEntriesDataTable() {
                this.TableName = "GEN_AccDailyEntries";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GEN_AccDailyEntriesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GEN_AccDailyEntriesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TransIDColumn {
                get {
                    return this.columnTransID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NoteIDColumn {
                get {
                    return this.columnNoteID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssignmentDColumn {
                get {
                    return this.columnAssignmentD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AccountabilityValueColumn {
                get {
                    return this.columnAccountabilityValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AccountabilityDateColumn {
                get {
                    return this.columnAccountabilityDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GEN_AccDailyEntriesRow this[int index] {
                get {
                    return ((GEN_AccDailyEntriesRow)(this.Rows[index]));
                }
            }
            
            public event GEN_AccDailyEntriesRowChangeEventHandler GEN_AccDailyEntriesRowChanging;
            
            public event GEN_AccDailyEntriesRowChangeEventHandler GEN_AccDailyEntriesRowChanged;
            
            public event GEN_AccDailyEntriesRowChangeEventHandler GEN_AccDailyEntriesRowDeleting;
            
            public event GEN_AccDailyEntriesRowChangeEventHandler GEN_AccDailyEntriesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGEN_AccDailyEntriesRow(GEN_AccDailyEntriesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GEN_AccDailyEntriesRow AddGEN_AccDailyEntriesRow(int TransID, int NoteID, int AssignmentD, decimal AccountabilityValue, System.DateTime AccountabilityDate) {
                GEN_AccDailyEntriesRow rowGEN_AccDailyEntriesRow = ((GEN_AccDailyEntriesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TransID,
                        NoteID,
                        AssignmentD,
                        AccountabilityValue,
                        AccountabilityDate};
                rowGEN_AccDailyEntriesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGEN_AccDailyEntriesRow);
                return rowGEN_AccDailyEntriesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GEN_AccDailyEntriesRow FindByTransID(int TransID) {
                return ((GEN_AccDailyEntriesRow)(this.Rows.Find(new object[] {
                            TransID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GEN_AccDailyEntriesDataTable cln = ((GEN_AccDailyEntriesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GEN_AccDailyEntriesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTransID = base.Columns["TransID"];
                this.columnNoteID = base.Columns["NoteID"];
                this.columnAssignmentD = base.Columns["AssignmentD"];
                this.columnAccountabilityValue = base.Columns["AccountabilityValue"];
                this.columnAccountabilityDate = base.Columns["AccountabilityDate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTransID = new global::System.Data.DataColumn("TransID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTransID);
                this.columnNoteID = new global::System.Data.DataColumn("NoteID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNoteID);
                this.columnAssignmentD = new global::System.Data.DataColumn("AssignmentD", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssignmentD);
                this.columnAccountabilityValue = new global::System.Data.DataColumn("AccountabilityValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAccountabilityValue);
                this.columnAccountabilityDate = new global::System.Data.DataColumn("AccountabilityDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAccountabilityDate);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTransID}, true));
                this.columnTransID.AllowDBNull = false;
                this.columnTransID.Unique = true;
                this.columnAccountabilityValue.AllowDBNull = false;
                this.columnAccountabilityDate.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GEN_AccDailyEntriesRow NewGEN_AccDailyEntriesRow() {
                return ((GEN_AccDailyEntriesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GEN_AccDailyEntriesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GEN_AccDailyEntriesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GEN_AccDailyEntriesRowChanged != null)) {
                    this.GEN_AccDailyEntriesRowChanged(this, new GEN_AccDailyEntriesRowChangeEvent(((GEN_AccDailyEntriesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GEN_AccDailyEntriesRowChanging != null)) {
                    this.GEN_AccDailyEntriesRowChanging(this, new GEN_AccDailyEntriesRowChangeEvent(((GEN_AccDailyEntriesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GEN_AccDailyEntriesRowDeleted != null)) {
                    this.GEN_AccDailyEntriesRowDeleted(this, new GEN_AccDailyEntriesRowChangeEvent(((GEN_AccDailyEntriesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GEN_AccDailyEntriesRowDeleting != null)) {
                    this.GEN_AccDailyEntriesRowDeleting(this, new GEN_AccDailyEntriesRowChangeEvent(((GEN_AccDailyEntriesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGEN_AccDailyEntriesRow(GEN_AccDailyEntriesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsAccDailyEntries ds = new dsAccDailyEntries();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GEN_AccDailyEntriesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GEN_ProjectsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnprojectID;
            
            private global::System.Data.DataColumn columnProjectName;
            
            private global::System.Data.DataColumn columnProjectOwner;
            
            private global::System.Data.DataColumn columnProjectStartDate;
            
            private global::System.Data.DataColumn columnProjectStatus;
            
            private global::System.Data.DataColumn columnProjectOrginatorTarget;
            
            private global::System.Data.DataColumn columnProjectTargetDate;
            
            private global::System.Data.DataColumn columnProjectCriticalDate;
            
            private global::System.Data.DataColumn columnProjectCompleteDate;
            
            private global::System.Data.DataColumn columnProjectComplete;
            
            private global::System.Data.DataColumn columnProjectManager;
            
            private global::System.Data.DataColumn columnProjectDesc;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GEN_ProjectsDataTable() {
                this.TableName = "GEN_Projects";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GEN_ProjectsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GEN_ProjectsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn projectIDColumn {
                get {
                    return this.columnprojectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectNameColumn {
                get {
                    return this.columnProjectName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectOwnerColumn {
                get {
                    return this.columnProjectOwner;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectStartDateColumn {
                get {
                    return this.columnProjectStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectStatusColumn {
                get {
                    return this.columnProjectStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectOrginatorTargetColumn {
                get {
                    return this.columnProjectOrginatorTarget;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectTargetDateColumn {
                get {
                    return this.columnProjectTargetDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectCriticalDateColumn {
                get {
                    return this.columnProjectCriticalDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectCompleteDateColumn {
                get {
                    return this.columnProjectCompleteDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectCompleteColumn {
                get {
                    return this.columnProjectComplete;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectManagerColumn {
                get {
                    return this.columnProjectManager;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectDescColumn {
                get {
                    return this.columnProjectDesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GEN_ProjectsRow this[int index] {
                get {
                    return ((GEN_ProjectsRow)(this.Rows[index]));
                }
            }
            
            public event GEN_ProjectsRowChangeEventHandler GEN_ProjectsRowChanging;
            
            public event GEN_ProjectsRowChangeEventHandler GEN_ProjectsRowChanged;
            
            public event GEN_ProjectsRowChangeEventHandler GEN_ProjectsRowDeleting;
            
            public event GEN_ProjectsRowChangeEventHandler GEN_ProjectsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGEN_ProjectsRow(GEN_ProjectsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GEN_ProjectsRow AddGEN_ProjectsRow(int projectID, string ProjectName, int ProjectOwner, System.DateTime ProjectStartDate, short ProjectStatus, System.DateTime ProjectOrginatorTarget, System.DateTime ProjectTargetDate, System.DateTime ProjectCriticalDate, System.DateTime ProjectCompleteDate, bool ProjectComplete, int ProjectManager, string ProjectDesc) {
                GEN_ProjectsRow rowGEN_ProjectsRow = ((GEN_ProjectsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        projectID,
                        ProjectName,
                        ProjectOwner,
                        ProjectStartDate,
                        ProjectStatus,
                        ProjectOrginatorTarget,
                        ProjectTargetDate,
                        ProjectCriticalDate,
                        ProjectCompleteDate,
                        ProjectComplete,
                        ProjectManager,
                        ProjectDesc};
                rowGEN_ProjectsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGEN_ProjectsRow);
                return rowGEN_ProjectsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GEN_ProjectsRow FindByprojectID(int projectID) {
                return ((GEN_ProjectsRow)(this.Rows.Find(new object[] {
                            projectID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GEN_ProjectsDataTable cln = ((GEN_ProjectsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GEN_ProjectsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnprojectID = base.Columns["projectID"];
                this.columnProjectName = base.Columns["ProjectName"];
                this.columnProjectOwner = base.Columns["ProjectOwner"];
                this.columnProjectStartDate = base.Columns["ProjectStartDate"];
                this.columnProjectStatus = base.Columns["ProjectStatus"];
                this.columnProjectOrginatorTarget = base.Columns["ProjectOrginatorTarget"];
                this.columnProjectTargetDate = base.Columns["ProjectTargetDate"];
                this.columnProjectCriticalDate = base.Columns["ProjectCriticalDate"];
                this.columnProjectCompleteDate = base.Columns["ProjectCompleteDate"];
                this.columnProjectComplete = base.Columns["ProjectComplete"];
                this.columnProjectManager = base.Columns["ProjectManager"];
                this.columnProjectDesc = base.Columns["ProjectDesc"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnprojectID = new global::System.Data.DataColumn("projectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnprojectID);
                this.columnProjectName = new global::System.Data.DataColumn("ProjectName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectName);
                this.columnProjectOwner = new global::System.Data.DataColumn("ProjectOwner", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectOwner);
                this.columnProjectStartDate = new global::System.Data.DataColumn("ProjectStartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectStartDate);
                this.columnProjectStatus = new global::System.Data.DataColumn("ProjectStatus", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectStatus);
                this.columnProjectOrginatorTarget = new global::System.Data.DataColumn("ProjectOrginatorTarget", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectOrginatorTarget);
                this.columnProjectTargetDate = new global::System.Data.DataColumn("ProjectTargetDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectTargetDate);
                this.columnProjectCriticalDate = new global::System.Data.DataColumn("ProjectCriticalDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectCriticalDate);
                this.columnProjectCompleteDate = new global::System.Data.DataColumn("ProjectCompleteDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectCompleteDate);
                this.columnProjectComplete = new global::System.Data.DataColumn("ProjectComplete", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectComplete);
                this.columnProjectManager = new global::System.Data.DataColumn("ProjectManager", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectManager);
                this.columnProjectDesc = new global::System.Data.DataColumn("ProjectDesc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectDesc);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnprojectID}, true));
                this.columnprojectID.AllowDBNull = false;
                this.columnprojectID.Unique = true;
                this.columnProjectName.AllowDBNull = false;
                this.columnProjectOwner.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GEN_ProjectsRow NewGEN_ProjectsRow() {
                return ((GEN_ProjectsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GEN_ProjectsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GEN_ProjectsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GEN_ProjectsRowChanged != null)) {
                    this.GEN_ProjectsRowChanged(this, new GEN_ProjectsRowChangeEvent(((GEN_ProjectsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GEN_ProjectsRowChanging != null)) {
                    this.GEN_ProjectsRowChanging(this, new GEN_ProjectsRowChangeEvent(((GEN_ProjectsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GEN_ProjectsRowDeleted != null)) {
                    this.GEN_ProjectsRowDeleted(this, new GEN_ProjectsRowChangeEvent(((GEN_ProjectsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GEN_ProjectsRowDeleting != null)) {
                    this.GEN_ProjectsRowDeleting(this, new GEN_ProjectsRowChangeEvent(((GEN_ProjectsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGEN_ProjectsRow(GEN_ProjectsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsAccDailyEntries ds = new dsAccDailyEntries();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GEN_ProjectsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GEN_AccDailyEntriesRow : global::System.Data.DataRow {
            
            private GEN_AccDailyEntriesDataTable tableGEN_AccDailyEntries;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GEN_AccDailyEntriesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGEN_AccDailyEntries = ((GEN_AccDailyEntriesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TransID {
                get {
                    return ((int)(this[this.tableGEN_AccDailyEntries.TransIDColumn]));
                }
                set {
                    this[this.tableGEN_AccDailyEntries.TransIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NoteID {
                get {
                    try {
                        return ((int)(this[this.tableGEN_AccDailyEntries.NoteIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NoteID\' in table \'GEN_AccDailyEntries\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEN_AccDailyEntries.NoteIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AssignmentD {
                get {
                    try {
                        return ((int)(this[this.tableGEN_AccDailyEntries.AssignmentDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssignmentD\' in table \'GEN_AccDailyEntries\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEN_AccDailyEntries.AssignmentDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal AccountabilityValue {
                get {
                    return ((decimal)(this[this.tableGEN_AccDailyEntries.AccountabilityValueColumn]));
                }
                set {
                    this[this.tableGEN_AccDailyEntries.AccountabilityValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime AccountabilityDate {
                get {
                    return ((global::System.DateTime)(this[this.tableGEN_AccDailyEntries.AccountabilityDateColumn]));
                }
                set {
                    this[this.tableGEN_AccDailyEntries.AccountabilityDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNoteIDNull() {
                return this.IsNull(this.tableGEN_AccDailyEntries.NoteIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNoteIDNull() {
                this[this.tableGEN_AccDailyEntries.NoteIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssignmentDNull() {
                return this.IsNull(this.tableGEN_AccDailyEntries.AssignmentDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssignmentDNull() {
                this[this.tableGEN_AccDailyEntries.AssignmentDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GEN_ProjectsRow : global::System.Data.DataRow {
            
            private GEN_ProjectsDataTable tableGEN_Projects;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GEN_ProjectsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGEN_Projects = ((GEN_ProjectsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int projectID {
                get {
                    return ((int)(this[this.tableGEN_Projects.projectIDColumn]));
                }
                set {
                    this[this.tableGEN_Projects.projectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProjectName {
                get {
                    return ((string)(this[this.tableGEN_Projects.ProjectNameColumn]));
                }
                set {
                    this[this.tableGEN_Projects.ProjectNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectOwner {
                get {
                    return ((int)(this[this.tableGEN_Projects.ProjectOwnerColumn]));
                }
                set {
                    this[this.tableGEN_Projects.ProjectOwnerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ProjectStartDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableGEN_Projects.ProjectStartDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectStartDate\' in table \'GEN_Projects\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEN_Projects.ProjectStartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short ProjectStatus {
                get {
                    try {
                        return ((short)(this[this.tableGEN_Projects.ProjectStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectStatus\' in table \'GEN_Projects\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEN_Projects.ProjectStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ProjectOrginatorTarget {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableGEN_Projects.ProjectOrginatorTargetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectOrginatorTarget\' in table \'GEN_Projects\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEN_Projects.ProjectOrginatorTargetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ProjectTargetDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableGEN_Projects.ProjectTargetDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectTargetDate\' in table \'GEN_Projects\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEN_Projects.ProjectTargetDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ProjectCriticalDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableGEN_Projects.ProjectCriticalDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectCriticalDate\' in table \'GEN_Projects\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEN_Projects.ProjectCriticalDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ProjectCompleteDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableGEN_Projects.ProjectCompleteDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectCompleteDate\' in table \'GEN_Projects\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEN_Projects.ProjectCompleteDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ProjectComplete {
                get {
                    try {
                        return ((bool)(this[this.tableGEN_Projects.ProjectCompleteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectComplete\' in table \'GEN_Projects\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEN_Projects.ProjectCompleteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectManager {
                get {
                    try {
                        return ((int)(this[this.tableGEN_Projects.ProjectManagerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectManager\' in table \'GEN_Projects\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEN_Projects.ProjectManagerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProjectDesc {
                get {
                    try {
                        return ((string)(this[this.tableGEN_Projects.ProjectDescColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectDesc\' in table \'GEN_Projects\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGEN_Projects.ProjectDescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectStartDateNull() {
                return this.IsNull(this.tableGEN_Projects.ProjectStartDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectStartDateNull() {
                this[this.tableGEN_Projects.ProjectStartDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectStatusNull() {
                return this.IsNull(this.tableGEN_Projects.ProjectStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectStatusNull() {
                this[this.tableGEN_Projects.ProjectStatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectOrginatorTargetNull() {
                return this.IsNull(this.tableGEN_Projects.ProjectOrginatorTargetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectOrginatorTargetNull() {
                this[this.tableGEN_Projects.ProjectOrginatorTargetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectTargetDateNull() {
                return this.IsNull(this.tableGEN_Projects.ProjectTargetDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectTargetDateNull() {
                this[this.tableGEN_Projects.ProjectTargetDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectCriticalDateNull() {
                return this.IsNull(this.tableGEN_Projects.ProjectCriticalDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectCriticalDateNull() {
                this[this.tableGEN_Projects.ProjectCriticalDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectCompleteDateNull() {
                return this.IsNull(this.tableGEN_Projects.ProjectCompleteDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectCompleteDateNull() {
                this[this.tableGEN_Projects.ProjectCompleteDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectCompleteNull() {
                return this.IsNull(this.tableGEN_Projects.ProjectCompleteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectCompleteNull() {
                this[this.tableGEN_Projects.ProjectCompleteColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectManagerNull() {
                return this.IsNull(this.tableGEN_Projects.ProjectManagerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectManagerNull() {
                this[this.tableGEN_Projects.ProjectManagerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectDescNull() {
                return this.IsNull(this.tableGEN_Projects.ProjectDescColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectDescNull() {
                this[this.tableGEN_Projects.ProjectDescColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GEN_AccDailyEntriesRowChangeEvent : global::System.EventArgs {
            
            private GEN_AccDailyEntriesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GEN_AccDailyEntriesRowChangeEvent(GEN_AccDailyEntriesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GEN_AccDailyEntriesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GEN_ProjectsRowChangeEvent : global::System.EventArgs {
            
            private GEN_ProjectsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GEN_ProjectsRowChangeEvent(GEN_ProjectsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GEN_ProjectsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591