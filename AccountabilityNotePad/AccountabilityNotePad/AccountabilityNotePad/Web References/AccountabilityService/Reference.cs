//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.1433.
// 
#pragma warning disable 1591

namespace AccountabilityNotePad.AccountabilityService {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="AccountabilityServiceSoap", Namespace="http://tempuri.org/")]
    public partial class AccountabilityService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private AuthHeader authHeaderValueField;
        
        private System.Threading.SendOrPostCallback UpdateSheetOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateSheetForDayOperationCompleted;
        
        private System.Threading.SendOrPostCallback CureentEmployeeOperationCompleted;
        
        private System.Threading.SendOrPostCallback SheetDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback SheetViewOperationCompleted;
        
        private System.Threading.SendOrPostCallback ViewAccountabilityEmployeesOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoadOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTotalAccSheetOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAccSheetOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAssigmentAccountabilityOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetAccountabilityValueOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveNoteOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveNoteInSpecificDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEmployeeTaskSummaryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEmployeeNotesInIntervalOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetERPSessionOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoginOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public AccountabilityService() {
            this.Url = global::AccountabilityNotePad.Properties.Settings.Default.AccountabilityNotePad_AccountabilityService_AccountabilityService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public AuthHeader AuthHeaderValue {
            get {
                return this.authHeaderValueField;
            }
            set {
                this.authHeaderValueField = value;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event UpdateSheetCompletedEventHandler UpdateSheetCompleted;
        
        /// <remarks/>
        public event UpdateSheetForDayCompletedEventHandler UpdateSheetForDayCompleted;
        
        /// <remarks/>
        public event CureentEmployeeCompletedEventHandler CureentEmployeeCompleted;
        
        /// <remarks/>
        public event SheetDateCompletedEventHandler SheetDateCompleted;
        
        /// <remarks/>
        public event SheetViewCompletedEventHandler SheetViewCompleted;
        
        /// <remarks/>
        public event ViewAccountabilityEmployeesCompletedEventHandler ViewAccountabilityEmployeesCompleted;
        
        /// <remarks/>
        public event LoadCompletedEventHandler LoadCompleted;
        
        /// <remarks/>
        public event GetTotalAccSheetCompletedEventHandler GetTotalAccSheetCompleted;
        
        /// <remarks/>
        public event GetAccSheetCompletedEventHandler GetAccSheetCompleted;
        
        /// <remarks/>
        public event GetAssigmentAccountabilityCompletedEventHandler GetAssigmentAccountabilityCompleted;
        
        /// <remarks/>
        public event SetAccountabilityValueCompletedEventHandler SetAccountabilityValueCompleted;
        
        /// <remarks/>
        public event SaveNoteCompletedEventHandler SaveNoteCompleted;
        
        /// <remarks/>
        public event SaveNoteInSpecificDateCompletedEventHandler SaveNoteInSpecificDateCompleted;
        
        /// <remarks/>
        public event GetEmployeeTaskSummaryCompletedEventHandler GetEmployeeTaskSummaryCompleted;
        
        /// <remarks/>
        public event GetEmployeeNotesInIntervalCompletedEventHandler GetEmployeeNotesInIntervalCompleted;
        
        /// <remarks/>
        public event GetERPSessionCompletedEventHandler GetERPSessionCompleted;
        
        /// <remarks/>
        public event LoginCompletedEventHandler LoginCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateSheet", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet UpdateSheet(System.Data.DataSet AccountabilitySheet, int empID, System.DateTime AccDate, int ViewType) {
            object[] results = this.Invoke("UpdateSheet", new object[] {
                        AccountabilitySheet,
                        empID,
                        AccDate,
                        ViewType});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateSheetAsync(System.Data.DataSet AccountabilitySheet, int empID, System.DateTime AccDate, int ViewType) {
            this.UpdateSheetAsync(AccountabilitySheet, empID, AccDate, ViewType, null);
        }
        
        /// <remarks/>
        public void UpdateSheetAsync(System.Data.DataSet AccountabilitySheet, int empID, System.DateTime AccDate, int ViewType, object userState) {
            if ((this.UpdateSheetOperationCompleted == null)) {
                this.UpdateSheetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateSheetOperationCompleted);
            }
            this.InvokeAsync("UpdateSheet", new object[] {
                        AccountabilitySheet,
                        empID,
                        AccDate,
                        ViewType}, this.UpdateSheetOperationCompleted, userState);
        }
        
        private void OnUpdateSheetOperationCompleted(object arg) {
            if ((this.UpdateSheetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateSheetCompleted(this, new UpdateSheetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateSheetForDay", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet UpdateSheetForDay(System.Data.DataSet AccountabilitySheet, int empID, System.DateTime AccDate, int ViewType, bool IsUpdateOneDateOnly) {
            object[] results = this.Invoke("UpdateSheetForDay", new object[] {
                        AccountabilitySheet,
                        empID,
                        AccDate,
                        ViewType,
                        IsUpdateOneDateOnly});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateSheetForDayAsync(System.Data.DataSet AccountabilitySheet, int empID, System.DateTime AccDate, int ViewType, bool IsUpdateOneDateOnly) {
            this.UpdateSheetForDayAsync(AccountabilitySheet, empID, AccDate, ViewType, IsUpdateOneDateOnly, null);
        }
        
        /// <remarks/>
        public void UpdateSheetForDayAsync(System.Data.DataSet AccountabilitySheet, int empID, System.DateTime AccDate, int ViewType, bool IsUpdateOneDateOnly, object userState) {
            if ((this.UpdateSheetForDayOperationCompleted == null)) {
                this.UpdateSheetForDayOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateSheetForDayOperationCompleted);
            }
            this.InvokeAsync("UpdateSheetForDay", new object[] {
                        AccountabilitySheet,
                        empID,
                        AccDate,
                        ViewType,
                        IsUpdateOneDateOnly}, this.UpdateSheetForDayOperationCompleted, userState);
        }
        
        private void OnUpdateSheetForDayOperationCompleted(object arg) {
            if ((this.UpdateSheetForDayCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateSheetForDayCompleted(this, new UpdateSheetForDayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CureentEmployee", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CureentEmployee(int EmployeeID) {
            this.Invoke("CureentEmployee", new object[] {
                        EmployeeID});
        }
        
        /// <remarks/>
        public void CureentEmployeeAsync(int EmployeeID) {
            this.CureentEmployeeAsync(EmployeeID, null);
        }
        
        /// <remarks/>
        public void CureentEmployeeAsync(int EmployeeID, object userState) {
            if ((this.CureentEmployeeOperationCompleted == null)) {
                this.CureentEmployeeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCureentEmployeeOperationCompleted);
            }
            this.InvokeAsync("CureentEmployee", new object[] {
                        EmployeeID}, this.CureentEmployeeOperationCompleted, userState);
        }
        
        private void OnCureentEmployeeOperationCompleted(object arg) {
            if ((this.CureentEmployeeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CureentEmployeeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SheetDate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SheetDate(System.DateTime AccDate) {
            this.Invoke("SheetDate", new object[] {
                        AccDate});
        }
        
        /// <remarks/>
        public void SheetDateAsync(System.DateTime AccDate) {
            this.SheetDateAsync(AccDate, null);
        }
        
        /// <remarks/>
        public void SheetDateAsync(System.DateTime AccDate, object userState) {
            if ((this.SheetDateOperationCompleted == null)) {
                this.SheetDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSheetDateOperationCompleted);
            }
            this.InvokeAsync("SheetDate", new object[] {
                        AccDate}, this.SheetDateOperationCompleted, userState);
        }
        
        private void OnSheetDateOperationCompleted(object arg) {
            if ((this.SheetDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SheetDateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SheetView", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SheetView(int ViewType) {
            this.Invoke("SheetView", new object[] {
                        ViewType});
        }
        
        /// <remarks/>
        public void SheetViewAsync(int ViewType) {
            this.SheetViewAsync(ViewType, null);
        }
        
        /// <remarks/>
        public void SheetViewAsync(int ViewType, object userState) {
            if ((this.SheetViewOperationCompleted == null)) {
                this.SheetViewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSheetViewOperationCompleted);
            }
            this.InvokeAsync("SheetView", new object[] {
                        ViewType}, this.SheetViewOperationCompleted, userState);
        }
        
        private void OnSheetViewOperationCompleted(object arg) {
            if ((this.SheetViewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SheetViewCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ViewAccountabilityEmployees", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ViewAccountabilityEmployees() {
            object[] results = this.Invoke("ViewAccountabilityEmployees", new object[0]);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ViewAccountabilityEmployeesAsync() {
            this.ViewAccountabilityEmployeesAsync(null);
        }
        
        /// <remarks/>
        public void ViewAccountabilityEmployeesAsync(object userState) {
            if ((this.ViewAccountabilityEmployeesOperationCompleted == null)) {
                this.ViewAccountabilityEmployeesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnViewAccountabilityEmployeesOperationCompleted);
            }
            this.InvokeAsync("ViewAccountabilityEmployees", new object[0], this.ViewAccountabilityEmployeesOperationCompleted, userState);
        }
        
        private void OnViewAccountabilityEmployeesOperationCompleted(object arg) {
            if ((this.ViewAccountabilityEmployeesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ViewAccountabilityEmployeesCompleted(this, new ViewAccountabilityEmployeesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Load", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Load() {
            object[] results = this.Invoke("Load", new object[0]);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void LoadAsync() {
            this.LoadAsync(null);
        }
        
        /// <remarks/>
        public void LoadAsync(object userState) {
            if ((this.LoadOperationCompleted == null)) {
                this.LoadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadOperationCompleted);
            }
            this.InvokeAsync("Load", new object[0], this.LoadOperationCompleted, userState);
        }
        
        private void OnLoadOperationCompleted(object arg) {
            if ((this.LoadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadCompleted(this, new LoadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTotalAccSheet", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetTotalAccSheet(System.DateTime sheetDate, string filter) {
            object[] results = this.Invoke("GetTotalAccSheet", new object[] {
                        sheetDate,
                        filter});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetTotalAccSheetAsync(System.DateTime sheetDate, string filter) {
            this.GetTotalAccSheetAsync(sheetDate, filter, null);
        }
        
        /// <remarks/>
        public void GetTotalAccSheetAsync(System.DateTime sheetDate, string filter, object userState) {
            if ((this.GetTotalAccSheetOperationCompleted == null)) {
                this.GetTotalAccSheetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTotalAccSheetOperationCompleted);
            }
            this.InvokeAsync("GetTotalAccSheet", new object[] {
                        sheetDate,
                        filter}, this.GetTotalAccSheetOperationCompleted, userState);
        }
        
        private void OnGetTotalAccSheetOperationCompleted(object arg) {
            if ((this.GetTotalAccSheetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTotalAccSheetCompleted(this, new GetTotalAccSheetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAccSheet", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetAccSheet(int empID, System.DateTime AccDate, int ViewType, bool showOffDays) {
            object[] results = this.Invoke("GetAccSheet", new object[] {
                        empID,
                        AccDate,
                        ViewType,
                        showOffDays});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetAccSheetAsync(int empID, System.DateTime AccDate, int ViewType, bool showOffDays) {
            this.GetAccSheetAsync(empID, AccDate, ViewType, showOffDays, null);
        }
        
        /// <remarks/>
        public void GetAccSheetAsync(int empID, System.DateTime AccDate, int ViewType, bool showOffDays, object userState) {
            if ((this.GetAccSheetOperationCompleted == null)) {
                this.GetAccSheetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAccSheetOperationCompleted);
            }
            this.InvokeAsync("GetAccSheet", new object[] {
                        empID,
                        AccDate,
                        ViewType,
                        showOffDays}, this.GetAccSheetOperationCompleted, userState);
        }
        
        private void OnGetAccSheetOperationCompleted(object arg) {
            if ((this.GetAccSheetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAccSheetCompleted(this, new GetAccSheetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAssigmentAccountability", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetAssigmentAccountability(int assignmentID) {
            object[] results = this.Invoke("GetAssigmentAccountability", new object[] {
                        assignmentID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetAssigmentAccountabilityAsync(int assignmentID) {
            this.GetAssigmentAccountabilityAsync(assignmentID, null);
        }
        
        /// <remarks/>
        public void GetAssigmentAccountabilityAsync(int assignmentID, object userState) {
            if ((this.GetAssigmentAccountabilityOperationCompleted == null)) {
                this.GetAssigmentAccountabilityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAssigmentAccountabilityOperationCompleted);
            }
            this.InvokeAsync("GetAssigmentAccountability", new object[] {
                        assignmentID}, this.GetAssigmentAccountabilityOperationCompleted, userState);
        }
        
        private void OnGetAssigmentAccountabilityOperationCompleted(object arg) {
            if ((this.GetAssigmentAccountabilityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAssigmentAccountabilityCompleted(this, new GetAssigmentAccountabilityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetAccountabilityValue", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetAccountabilityValue(int AssginmentID, double AccValue, System.DateTime AccDate) {
            object[] results = this.Invoke("SetAccountabilityValue", new object[] {
                        AssginmentID,
                        AccValue,
                        AccDate});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetAccountabilityValueAsync(int AssginmentID, double AccValue, System.DateTime AccDate) {
            this.SetAccountabilityValueAsync(AssginmentID, AccValue, AccDate, null);
        }
        
        /// <remarks/>
        public void SetAccountabilityValueAsync(int AssginmentID, double AccValue, System.DateTime AccDate, object userState) {
            if ((this.SetAccountabilityValueOperationCompleted == null)) {
                this.SetAccountabilityValueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetAccountabilityValueOperationCompleted);
            }
            this.InvokeAsync("SetAccountabilityValue", new object[] {
                        AssginmentID,
                        AccValue,
                        AccDate}, this.SetAccountabilityValueOperationCompleted, userState);
        }
        
        private void OnSetAccountabilityValueOperationCompleted(object arg) {
            if ((this.SetAccountabilityValueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetAccountabilityValueCompleted(this, new SetAccountabilityValueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SaveNote", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SaveNote(System.DateTime NoteDate, string NoteBody, int ContactID) {
            object[] results = this.Invoke("SaveNote", new object[] {
                        NoteDate,
                        NoteBody,
                        ContactID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SaveNoteAsync(System.DateTime NoteDate, string NoteBody, int ContactID) {
            this.SaveNoteAsync(NoteDate, NoteBody, ContactID, null);
        }
        
        /// <remarks/>
        public void SaveNoteAsync(System.DateTime NoteDate, string NoteBody, int ContactID, object userState) {
            if ((this.SaveNoteOperationCompleted == null)) {
                this.SaveNoteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveNoteOperationCompleted);
            }
            this.InvokeAsync("SaveNote", new object[] {
                        NoteDate,
                        NoteBody,
                        ContactID}, this.SaveNoteOperationCompleted, userState);
        }
        
        private void OnSaveNoteOperationCompleted(object arg) {
            if ((this.SaveNoteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveNoteCompleted(this, new SaveNoteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SaveNoteInSpecificDate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SaveNoteInSpecificDate(System.DateTime NoteDate, string NoteBody, int ContactID) {
            object[] results = this.Invoke("SaveNoteInSpecificDate", new object[] {
                        NoteDate,
                        NoteBody,
                        ContactID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SaveNoteInSpecificDateAsync(System.DateTime NoteDate, string NoteBody, int ContactID) {
            this.SaveNoteInSpecificDateAsync(NoteDate, NoteBody, ContactID, null);
        }
        
        /// <remarks/>
        public void SaveNoteInSpecificDateAsync(System.DateTime NoteDate, string NoteBody, int ContactID, object userState) {
            if ((this.SaveNoteInSpecificDateOperationCompleted == null)) {
                this.SaveNoteInSpecificDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveNoteInSpecificDateOperationCompleted);
            }
            this.InvokeAsync("SaveNoteInSpecificDate", new object[] {
                        NoteDate,
                        NoteBody,
                        ContactID}, this.SaveNoteInSpecificDateOperationCompleted, userState);
        }
        
        private void OnSaveNoteInSpecificDateOperationCompleted(object arg) {
            if ((this.SaveNoteInSpecificDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveNoteInSpecificDateCompleted(this, new SaveNoteInSpecificDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetEmployeeTaskSummary", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetEmployeeTaskSummary(int ContactID, System.DateTime FromDate, System.DateTime ToDate) {
            object[] results = this.Invoke("GetEmployeeTaskSummary", new object[] {
                        ContactID,
                        FromDate,
                        ToDate});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetEmployeeTaskSummaryAsync(int ContactID, System.DateTime FromDate, System.DateTime ToDate) {
            this.GetEmployeeTaskSummaryAsync(ContactID, FromDate, ToDate, null);
        }
        
        /// <remarks/>
        public void GetEmployeeTaskSummaryAsync(int ContactID, System.DateTime FromDate, System.DateTime ToDate, object userState) {
            if ((this.GetEmployeeTaskSummaryOperationCompleted == null)) {
                this.GetEmployeeTaskSummaryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEmployeeTaskSummaryOperationCompleted);
            }
            this.InvokeAsync("GetEmployeeTaskSummary", new object[] {
                        ContactID,
                        FromDate,
                        ToDate}, this.GetEmployeeTaskSummaryOperationCompleted, userState);
        }
        
        private void OnGetEmployeeTaskSummaryOperationCompleted(object arg) {
            if ((this.GetEmployeeTaskSummaryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEmployeeTaskSummaryCompleted(this, new GetEmployeeTaskSummaryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetEmployeeNotesInInterval", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetEmployeeNotesInInterval(int ContactID, System.DateTime FromDate, System.DateTime ToDate) {
            object[] results = this.Invoke("GetEmployeeNotesInInterval", new object[] {
                        ContactID,
                        FromDate,
                        ToDate});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetEmployeeNotesInIntervalAsync(int ContactID, System.DateTime FromDate, System.DateTime ToDate) {
            this.GetEmployeeNotesInIntervalAsync(ContactID, FromDate, ToDate, null);
        }
        
        /// <remarks/>
        public void GetEmployeeNotesInIntervalAsync(int ContactID, System.DateTime FromDate, System.DateTime ToDate, object userState) {
            if ((this.GetEmployeeNotesInIntervalOperationCompleted == null)) {
                this.GetEmployeeNotesInIntervalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEmployeeNotesInIntervalOperationCompleted);
            }
            this.InvokeAsync("GetEmployeeNotesInInterval", new object[] {
                        ContactID,
                        FromDate,
                        ToDate}, this.GetEmployeeNotesInIntervalOperationCompleted, userState);
        }
        
        private void OnGetEmployeeNotesInIntervalOperationCompleted(object arg) {
            if ((this.GetEmployeeNotesInIntervalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEmployeeNotesInIntervalCompleted(this, new GetEmployeeNotesInIntervalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetERPSession", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetERPSession(string UserToken) {
            object[] results = this.Invoke("GetERPSession", new object[] {
                        UserToken});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetERPSessionAsync(string UserToken) {
            this.GetERPSessionAsync(UserToken, null);
        }
        
        /// <remarks/>
        public void GetERPSessionAsync(string UserToken, object userState) {
            if ((this.GetERPSessionOperationCompleted == null)) {
                this.GetERPSessionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetERPSessionOperationCompleted);
            }
            this.InvokeAsync("GetERPSession", new object[] {
                        UserToken}, this.GetERPSessionOperationCompleted, userState);
        }
        
        private void OnGetERPSessionOperationCompleted(object arg) {
            if ((this.GetERPSessionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetERPSessionCompleted(this, new GetERPSessionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Login", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Login(string userName, string passWord) {
            object[] results = this.Invoke("Login", new object[] {
                        userName,
                        passWord});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LoginAsync(string userName, string passWord) {
            this.LoginAsync(userName, passWord, null);
        }
        
        /// <remarks/>
        public void LoginAsync(string userName, string passWord, object userState) {
            if ((this.LoginOperationCompleted == null)) {
                this.LoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginOperationCompleted);
            }
            this.InvokeAsync("Login", new object[] {
                        userName,
                        passWord}, this.LoginOperationCompleted, userState);
        }
        
        private void OnLoginOperationCompleted(object arg) {
            if ((this.LoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoginCompleted(this, new LoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://tempuri.org/", IsNullable=false)]
    public partial class AuthHeader : System.Web.Services.Protocols.SoapHeader {
        
        private string tokenField;
        
        /// <remarks/>
        public string Token {
            get {
                return this.tokenField;
            }
            set {
                this.tokenField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void UpdateSheetCompletedEventHandler(object sender, UpdateSheetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateSheetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateSheetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void UpdateSheetForDayCompletedEventHandler(object sender, UpdateSheetForDayCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateSheetForDayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateSheetForDayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void CureentEmployeeCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void SheetDateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void SheetViewCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void ViewAccountabilityEmployeesCompletedEventHandler(object sender, ViewAccountabilityEmployeesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ViewAccountabilityEmployeesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ViewAccountabilityEmployeesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void LoadCompletedEventHandler(object sender, LoadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void GetTotalAccSheetCompletedEventHandler(object sender, GetTotalAccSheetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTotalAccSheetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTotalAccSheetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void GetAccSheetCompletedEventHandler(object sender, GetAccSheetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAccSheetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAccSheetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void GetAssigmentAccountabilityCompletedEventHandler(object sender, GetAssigmentAccountabilityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAssigmentAccountabilityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAssigmentAccountabilityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void SetAccountabilityValueCompletedEventHandler(object sender, SetAccountabilityValueCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetAccountabilityValueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetAccountabilityValueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void SaveNoteCompletedEventHandler(object sender, SaveNoteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveNoteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveNoteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void SaveNoteInSpecificDateCompletedEventHandler(object sender, SaveNoteInSpecificDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveNoteInSpecificDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveNoteInSpecificDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void GetEmployeeTaskSummaryCompletedEventHandler(object sender, GetEmployeeTaskSummaryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEmployeeTaskSummaryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEmployeeTaskSummaryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void GetEmployeeNotesInIntervalCompletedEventHandler(object sender, GetEmployeeNotesInIntervalCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEmployeeNotesInIntervalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEmployeeNotesInIntervalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void GetERPSessionCompletedEventHandler(object sender, GetERPSessionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetERPSessionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetERPSessionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void LoginCompletedEventHandler(object sender, LoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591